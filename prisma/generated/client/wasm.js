
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  positionEn: 'positionEn',
  positionAr: 'positionAr'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  departmentEn: 'departmentEn',
  departmentAr: 'departmentAr'
};

exports.Prisma.DivisionScalarFieldEnum = {
  id: 'id',
  divisionName: 'divisionName'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  unitName: 'unitName'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  gradeOfficial: 'gradeOfficial',
  gradeInternal: 'gradeInternal'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  locationName: 'locationName'
};

exports.Prisma.ContractTypeScalarFieldEnum = {
  id: 'id',
  typeName: 'typeName'
};

exports.Prisma.NationalityScalarFieldEnum = {
  id: 'id',
  nationalityEn: 'nationalityEn',
  nationalityAr: 'nationalityAr'
};

exports.Prisma.GenderScalarFieldEnum = {
  id: 'id',
  genderEn: 'genderEn',
  genderAr: 'genderAr'
};

exports.Prisma.MaritalStatusScalarFieldEnum = {
  id: 'id',
  statusEn: 'statusEn',
  statusAr: 'statusAr'
};

exports.Prisma.EntityScalarFieldEnum = {
  id: 'id',
  entityName: 'entityName'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  budgetName: 'budgetName'
};

exports.Prisma.StatusScalarFieldEnum = {
  id: 'id',
  statusName: 'statusName'
};

exports.Prisma.AuthScalarFieldEnum = {
  id: 'id',
  employeeCode: 'employeeCode',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  tokenExpiry: 'tokenExpiry'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  employeeCode: 'employeeCode',
  employeeCategory: 'employeeCategory',
  registerName: 'registerName',
  statusId: 'statusId',
  expectedStartDate: 'expectedStartDate',
  actualStartDate: 'actualStartDate',
  probationEndDate: 'probationEndDate',
  terminationDate: 'terminationDate',
  terminationReason: 'terminationReason',
  resignationType: 'resignationType',
  dateOfBirth: 'dateOfBirth',
  idName: 'idName',
  idNameAr: 'idNameAr',
  firstName: 'firstName',
  lastName: 'lastName',
  firstNameAr: 'firstNameAr',
  lastNameAr: 'lastNameAr',
  organizationId: 'organizationId',
  entityId: 'entityId',
  budgetId: 'budgetId',
  departmentId: 'departmentId',
  divisionId: 'divisionId',
  unitId: 'unitId',
  positionId: 'positionId',
  gradeId: 'gradeId',
  locationId: 'locationId',
  directManagerCode: 'directManagerCode',
  directManagerName: 'directManagerName',
  managerId: 'managerId',
  contractTypeId: 'contractTypeId',
  nationalityId: 'nationalityId',
  genderId: 'genderId',
  maritalStatusId: 'maritalStatusId',
  email: 'email',
  password: 'password',
  personalPhoneNumber1: 'personalPhoneNumber1',
  corporatePhoneNumber: 'corporatePhoneNumber',
  idNumber: 'idNumber',
  idPlaceOfIssue: 'idPlaceOfIssue',
  idAddress: 'idAddress',
  idAddressAr: 'idAddressAr',
  idZoneOfResidence: 'idZoneOfResidence',
  placeOfBirth: 'placeOfBirth',
  companyId: 'companyId',
  cleared: 'cleared',
  disabilityType: 'disabilityType',
  sourceId: 'sourceId',
  insertionDate: 'insertionDate',
  updateDate: 'updateDate'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Organization: 'Organization',
  Position: 'Position',
  Department: 'Department',
  Division: 'Division',
  Unit: 'Unit',
  Grade: 'Grade',
  Location: 'Location',
  ContractType: 'ContractType',
  Nationality: 'Nationality',
  Gender: 'Gender',
  MaritalStatus: 'MaritalStatus',
  Entity: 'Entity',
  Budget: 'Budget',
  Status: 'Status',
  Auth: 'Auth',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
