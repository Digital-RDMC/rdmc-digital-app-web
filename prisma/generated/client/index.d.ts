
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Division
 * 
 */
export type Division = $Result.DefaultSelection<Prisma.$DivisionPayload>
/**
 * Model Unit
 * 
 */
export type Unit = $Result.DefaultSelection<Prisma.$UnitPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model ContractType
 * 
 */
export type ContractType = $Result.DefaultSelection<Prisma.$ContractTypePayload>
/**
 * Model Nationality
 * 
 */
export type Nationality = $Result.DefaultSelection<Prisma.$NationalityPayload>
/**
 * Model Gender
 * 
 */
export type Gender = $Result.DefaultSelection<Prisma.$GenderPayload>
/**
 * Model MaritalStatus
 * 
 */
export type MaritalStatus = $Result.DefaultSelection<Prisma.$MaritalStatusPayload>
/**
 * Model Entity
 * 
 */
export type Entity = $Result.DefaultSelection<Prisma.$EntityPayload>
/**
 * Model Budget
 * 
 */
export type Budget = $Result.DefaultSelection<Prisma.$BudgetPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model Auth
 * 
 */
export type Auth = $Result.DefaultSelection<Prisma.$AuthPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.division`: Exposes CRUD operations for the **Division** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Divisions
    * const divisions = await prisma.division.findMany()
    * ```
    */
  get division(): Prisma.DivisionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unit`: Exposes CRUD operations for the **Unit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Units
    * const units = await prisma.unit.findMany()
    * ```
    */
  get unit(): Prisma.UnitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contractType`: Exposes CRUD operations for the **ContractType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractTypes
    * const contractTypes = await prisma.contractType.findMany()
    * ```
    */
  get contractType(): Prisma.ContractTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nationality`: Exposes CRUD operations for the **Nationality** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nationalities
    * const nationalities = await prisma.nationality.findMany()
    * ```
    */
  get nationality(): Prisma.NationalityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gender`: Exposes CRUD operations for the **Gender** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genders
    * const genders = await prisma.gender.findMany()
    * ```
    */
  get gender(): Prisma.GenderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.maritalStatus`: Exposes CRUD operations for the **MaritalStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaritalStatuses
    * const maritalStatuses = await prisma.maritalStatus.findMany()
    * ```
    */
  get maritalStatus(): Prisma.MaritalStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.entity`: Exposes CRUD operations for the **Entity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entities
    * const entities = await prisma.entity.findMany()
    * ```
    */
  get entity(): Prisma.EntityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.budget`: Exposes CRUD operations for the **Budget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Budgets
    * const budgets = await prisma.budget.findMany()
    * ```
    */
  get budget(): Prisma.BudgetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auth`: Exposes CRUD operations for the **Auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auths
    * const auths = await prisma.auth.findMany()
    * ```
    */
  get auth(): Prisma.AuthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Organization: 'Organization',
    Position: 'Position',
    Department: 'Department',
    Division: 'Division',
    Unit: 'Unit',
    Grade: 'Grade',
    Location: 'Location',
    ContractType: 'ContractType',
    Nationality: 'Nationality',
    Gender: 'Gender',
    MaritalStatus: 'MaritalStatus',
    Entity: 'Entity',
    Budget: 'Budget',
    Status: 'Status',
    Auth: 'Auth',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "organization" | "position" | "department" | "division" | "unit" | "grade" | "location" | "contractType" | "nationality" | "gender" | "maritalStatus" | "entity" | "budget" | "status" | "auth" | "user"
      txIsolationLevel: never
    }
    model: {
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.OrganizationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.OrganizationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PositionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.PositionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DepartmentFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.DepartmentAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Division: {
        payload: Prisma.$DivisionPayload<ExtArgs>
        fields: Prisma.DivisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DivisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DivisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          findFirst: {
            args: Prisma.DivisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DivisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          findMany: {
            args: Prisma.DivisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>[]
          }
          create: {
            args: Prisma.DivisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          createMany: {
            args: Prisma.DivisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DivisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          update: {
            args: Prisma.DivisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          deleteMany: {
            args: Prisma.DivisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DivisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DivisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          aggregate: {
            args: Prisma.DivisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDivision>
          }
          groupBy: {
            args: Prisma.DivisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DivisionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DivisionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.DivisionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.DivisionCountArgs<ExtArgs>
            result: $Utils.Optional<DivisionCountAggregateOutputType> | number
          }
        }
      }
      Unit: {
        payload: Prisma.$UnitPayload<ExtArgs>
        fields: Prisma.UnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findFirst: {
            args: Prisma.UnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findMany: {
            args: Prisma.UnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          create: {
            args: Prisma.UnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          createMany: {
            args: Prisma.UnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          update: {
            args: Prisma.UnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          deleteMany: {
            args: Prisma.UnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          aggregate: {
            args: Prisma.UnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnit>
          }
          groupBy: {
            args: Prisma.UnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UnitFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UnitAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UnitCountArgs<ExtArgs>
            result: $Utils.Optional<UnitCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.GradeFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.GradeAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LocationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.LocationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      ContractType: {
        payload: Prisma.$ContractTypePayload<ExtArgs>
        fields: Prisma.ContractTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>
          }
          findFirst: {
            args: Prisma.ContractTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>
          }
          findMany: {
            args: Prisma.ContractTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>[]
          }
          create: {
            args: Prisma.ContractTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>
          }
          createMany: {
            args: Prisma.ContractTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ContractTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>
          }
          update: {
            args: Prisma.ContractTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>
          }
          deleteMany: {
            args: Prisma.ContractTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractTypePayload>
          }
          aggregate: {
            args: Prisma.ContractTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractType>
          }
          groupBy: {
            args: Prisma.ContractTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractTypeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ContractTypeFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ContractTypeAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ContractTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ContractTypeCountAggregateOutputType> | number
          }
        }
      }
      Nationality: {
        payload: Prisma.$NationalityPayload<ExtArgs>
        fields: Prisma.NationalityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NationalityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NationalityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>
          }
          findFirst: {
            args: Prisma.NationalityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NationalityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>
          }
          findMany: {
            args: Prisma.NationalityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>[]
          }
          create: {
            args: Prisma.NationalityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>
          }
          createMany: {
            args: Prisma.NationalityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NationalityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>
          }
          update: {
            args: Prisma.NationalityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>
          }
          deleteMany: {
            args: Prisma.NationalityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NationalityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NationalityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NationalityPayload>
          }
          aggregate: {
            args: Prisma.NationalityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNationality>
          }
          groupBy: {
            args: Prisma.NationalityGroupByArgs<ExtArgs>
            result: $Utils.Optional<NationalityGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.NationalityFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.NationalityAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.NationalityCountArgs<ExtArgs>
            result: $Utils.Optional<NationalityCountAggregateOutputType> | number
          }
        }
      }
      Gender: {
        payload: Prisma.$GenderPayload<ExtArgs>
        fields: Prisma.GenderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>
          }
          findFirst: {
            args: Prisma.GenderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>
          }
          findMany: {
            args: Prisma.GenderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>[]
          }
          create: {
            args: Prisma.GenderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>
          }
          createMany: {
            args: Prisma.GenderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GenderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>
          }
          update: {
            args: Prisma.GenderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>
          }
          deleteMany: {
            args: Prisma.GenderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GenderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GenderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenderPayload>
          }
          aggregate: {
            args: Prisma.GenderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGender>
          }
          groupBy: {
            args: Prisma.GenderGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenderGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.GenderFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.GenderAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.GenderCountArgs<ExtArgs>
            result: $Utils.Optional<GenderCountAggregateOutputType> | number
          }
        }
      }
      MaritalStatus: {
        payload: Prisma.$MaritalStatusPayload<ExtArgs>
        fields: Prisma.MaritalStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaritalStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaritalStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>
          }
          findFirst: {
            args: Prisma.MaritalStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaritalStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>
          }
          findMany: {
            args: Prisma.MaritalStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>[]
          }
          create: {
            args: Prisma.MaritalStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>
          }
          createMany: {
            args: Prisma.MaritalStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MaritalStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>
          }
          update: {
            args: Prisma.MaritalStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>
          }
          deleteMany: {
            args: Prisma.MaritalStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaritalStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MaritalStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaritalStatusPayload>
          }
          aggregate: {
            args: Prisma.MaritalStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaritalStatus>
          }
          groupBy: {
            args: Prisma.MaritalStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaritalStatusGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MaritalStatusFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MaritalStatusAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MaritalStatusCountArgs<ExtArgs>
            result: $Utils.Optional<MaritalStatusCountAggregateOutputType> | number
          }
        }
      }
      Entity: {
        payload: Prisma.$EntityPayload<ExtArgs>
        fields: Prisma.EntityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          findFirst: {
            args: Prisma.EntityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          findMany: {
            args: Prisma.EntityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>[]
          }
          create: {
            args: Prisma.EntityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          createMany: {
            args: Prisma.EntityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EntityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          update: {
            args: Prisma.EntityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          deleteMany: {
            args: Prisma.EntityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EntityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EntityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          aggregate: {
            args: Prisma.EntityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEntity>
          }
          groupBy: {
            args: Prisma.EntityGroupByArgs<ExtArgs>
            result: $Utils.Optional<EntityGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.EntityFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.EntityAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.EntityCountArgs<ExtArgs>
            result: $Utils.Optional<EntityCountAggregateOutputType> | number
          }
        }
      }
      Budget: {
        payload: Prisma.$BudgetPayload<ExtArgs>
        fields: Prisma.BudgetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          findFirst: {
            args: Prisma.BudgetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          findMany: {
            args: Prisma.BudgetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>[]
          }
          create: {
            args: Prisma.BudgetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          createMany: {
            args: Prisma.BudgetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BudgetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          update: {
            args: Prisma.BudgetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          deleteMany: {
            args: Prisma.BudgetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          aggregate: {
            args: Prisma.BudgetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudget>
          }
          groupBy: {
            args: Prisma.BudgetGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BudgetFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.BudgetAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.BudgetCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.StatusFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.StatusAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      Auth: {
        payload: Prisma.$AuthPayload<ExtArgs>
        fields: Prisma.AuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          findFirst: {
            args: Prisma.AuthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          findMany: {
            args: Prisma.AuthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>[]
          }
          create: {
            args: Prisma.AuthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          createMany: {
            args: Prisma.AuthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          update: {
            args: Prisma.AuthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          deleteMany: {
            args: Prisma.AuthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          aggregate: {
            args: Prisma.AuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuth>
          }
          groupBy: {
            args: Prisma.AuthGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AuthFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AuthAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AuthCountArgs<ExtArgs>
            result: $Utils.Optional<AuthCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    organization?: OrganizationOmit
    position?: PositionOmit
    department?: DepartmentOmit
    division?: DivisionOmit
    unit?: UnitOmit
    grade?: GradeOmit
    location?: LocationOmit
    contractType?: ContractTypeOmit
    nationality?: NationalityOmit
    gender?: GenderOmit
    maritalStatus?: MaritalStatusOmit
    entity?: EntityOmit
    budget?: BudgetOmit
    status?: StatusOmit
    auth?: AuthOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type PositionCountOutputType
   */

  export type PositionCountOutputType = {
    users: number
  }

  export type PositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | PositionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PositionCountOutputType
     */
    select?: PositionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type DivisionCountOutputType
   */

  export type DivisionCountOutputType = {
    users: number
  }

  export type DivisionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DivisionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivisionCountOutputType
     */
    select?: DivisionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UnitCountOutputType
   */

  export type UnitCountOutputType = {
    users: number
  }

  export type UnitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UnitCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitCountOutputType
     */
    select?: UnitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type GradeCountOutputType
   */

  export type GradeCountOutputType = {
    users: number
  }

  export type GradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GradeCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeCountOutputType
     */
    select?: GradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    users: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | LocationCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ContractTypeCountOutputType
   */

  export type ContractTypeCountOutputType = {
    users: number
  }

  export type ContractTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ContractTypeCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * ContractTypeCountOutputType without action
   */
  export type ContractTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractTypeCountOutputType
     */
    select?: ContractTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractTypeCountOutputType without action
   */
  export type ContractTypeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type NationalityCountOutputType
   */

  export type NationalityCountOutputType = {
    users: number
  }

  export type NationalityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | NationalityCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * NationalityCountOutputType without action
   */
  export type NationalityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NationalityCountOutputType
     */
    select?: NationalityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NationalityCountOutputType without action
   */
  export type NationalityCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type GenderCountOutputType
   */

  export type GenderCountOutputType = {
    users: number
  }

  export type GenderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GenderCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * GenderCountOutputType without action
   */
  export type GenderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenderCountOutputType
     */
    select?: GenderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GenderCountOutputType without action
   */
  export type GenderCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type MaritalStatusCountOutputType
   */

  export type MaritalStatusCountOutputType = {
    users: number
  }

  export type MaritalStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | MaritalStatusCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * MaritalStatusCountOutputType without action
   */
  export type MaritalStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatusCountOutputType
     */
    select?: MaritalStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaritalStatusCountOutputType without action
   */
  export type MaritalStatusCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type EntityCountOutputType
   */

  export type EntityCountOutputType = {
    users: number
  }

  export type EntityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | EntityCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityCountOutputType
     */
    select?: EntityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type BudgetCountOutputType
   */

  export type BudgetCountOutputType = {
    users: number
  }

  export type BudgetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | BudgetCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * BudgetCountOutputType without action
   */
  export type BudgetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetCountOutputType
     */
    select?: BudgetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BudgetCountOutputType without action
   */
  export type BudgetCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    users: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | StatusCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    manages: number
    auth: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manages?: boolean | UserCountOutputTypeCountManagesArgs
    auth?: boolean | UserCountOutputTypeCountAuthArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    value: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    value: string
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>



  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "value", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      value: string
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * @param {OrganizationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const organization = await prisma.organization.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: OrganizationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Organization.
     * @param {OrganizationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const organization = await prisma.organization.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: OrganizationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly value: FieldRef<"Organization", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization findRaw
   */
  export type OrganizationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Organization aggregateRaw
   */
  export type OrganizationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionMinAggregateOutputType = {
    id: string | null
    positionEn: string | null
    positionAr: string | null
  }

  export type PositionMaxAggregateOutputType = {
    id: string | null
    positionEn: string | null
    positionAr: string | null
  }

  export type PositionCountAggregateOutputType = {
    id: number
    positionEn: number
    positionAr: number
    _all: number
  }


  export type PositionMinAggregateInputType = {
    id?: true
    positionEn?: true
    positionAr?: true
  }

  export type PositionMaxAggregateInputType = {
    id?: true
    positionEn?: true
    positionAr?: true
  }

  export type PositionCountAggregateInputType = {
    id?: true
    positionEn?: true
    positionAr?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    id: string
    positionEn: string
    positionAr: string | null
    _count: PositionCountAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    positionEn?: boolean
    positionAr?: boolean
    users?: boolean | Position$usersArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>



  export type PositionSelectScalar = {
    id?: boolean
    positionEn?: boolean
    positionAr?: boolean
  }

  export type PositionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "positionEn" | "positionAr", ExtArgs["result"]["position"]>
  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Position$usersArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      positionEn: string
      positionAr: string | null
    }, ExtArgs["result"]["position"]>
    composites: {}
  }

  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PositionFindUniqueArgs>(args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Position that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PositionFindFirstArgs>(args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PositionFindManyArgs>(args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
     */
    create<T extends PositionCreateArgs>(args: SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Positions.
     * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PositionCreateManyArgs>(args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
     */
    delete<T extends PositionDeleteArgs>(args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PositionUpdateArgs>(args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PositionDeleteManyArgs>(args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PositionUpdateManyArgs>(args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
     */
    upsert<T extends PositionUpsertArgs>(args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Positions that matches the filter.
     * @param {PositionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const position = await prisma.position.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: PositionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Position.
     * @param {PositionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const position = await prisma.position.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: PositionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Position$usersArgs<ExtArgs> = {}>(args?: Subset<T, Position$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Position model
   */
  interface PositionFieldRefs {
    readonly id: FieldRef<"Position", 'String'>
    readonly positionEn: FieldRef<"Position", 'String'>
    readonly positionAr: FieldRef<"Position", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }

  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
  }

  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to update.
     */
    limit?: number
  }

  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }

  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to delete.
     */
    limit?: number
  }

  /**
   * Position findRaw
   */
  export type PositionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Position aggregateRaw
   */
  export type PositionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Position.users
   */
  export type Position$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    departmentEn: string | null
    departmentAr: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    departmentEn: string | null
    departmentAr: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    departmentEn: number
    departmentAr: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    departmentEn?: true
    departmentAr?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    departmentEn?: true
    departmentAr?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    departmentEn?: true
    departmentAr?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    departmentEn: string
    departmentAr: string | null
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentEn?: boolean
    departmentAr?: boolean
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>



  export type DepartmentSelectScalar = {
    id?: boolean
    departmentEn?: boolean
    departmentAr?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "departmentEn" | "departmentAr", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      departmentEn: string
      departmentAr: string | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * @param {DepartmentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const department = await prisma.department.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: DepartmentFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Department.
     * @param {DepartmentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const department = await prisma.department.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: DepartmentAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly departmentEn: FieldRef<"Department", 'String'>
    readonly departmentAr: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department findRaw
   */
  export type DepartmentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Department aggregateRaw
   */
  export type DepartmentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Division
   */

  export type AggregateDivision = {
    _count: DivisionCountAggregateOutputType | null
    _min: DivisionMinAggregateOutputType | null
    _max: DivisionMaxAggregateOutputType | null
  }

  export type DivisionMinAggregateOutputType = {
    id: string | null
    divisionName: string | null
  }

  export type DivisionMaxAggregateOutputType = {
    id: string | null
    divisionName: string | null
  }

  export type DivisionCountAggregateOutputType = {
    id: number
    divisionName: number
    _all: number
  }


  export type DivisionMinAggregateInputType = {
    id?: true
    divisionName?: true
  }

  export type DivisionMaxAggregateInputType = {
    id?: true
    divisionName?: true
  }

  export type DivisionCountAggregateInputType = {
    id?: true
    divisionName?: true
    _all?: true
  }

  export type DivisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Division to aggregate.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Divisions
    **/
    _count?: true | DivisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DivisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DivisionMaxAggregateInputType
  }

  export type GetDivisionAggregateType<T extends DivisionAggregateArgs> = {
        [P in keyof T & keyof AggregateDivision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDivision[P]>
      : GetScalarType<T[P], AggregateDivision[P]>
  }




  export type DivisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivisionWhereInput
    orderBy?: DivisionOrderByWithAggregationInput | DivisionOrderByWithAggregationInput[]
    by: DivisionScalarFieldEnum[] | DivisionScalarFieldEnum
    having?: DivisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DivisionCountAggregateInputType | true
    _min?: DivisionMinAggregateInputType
    _max?: DivisionMaxAggregateInputType
  }

  export type DivisionGroupByOutputType = {
    id: string
    divisionName: string
    _count: DivisionCountAggregateOutputType | null
    _min: DivisionMinAggregateOutputType | null
    _max: DivisionMaxAggregateOutputType | null
  }

  type GetDivisionGroupByPayload<T extends DivisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DivisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DivisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DivisionGroupByOutputType[P]>
            : GetScalarType<T[P], DivisionGroupByOutputType[P]>
        }
      >
    >


  export type DivisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    divisionName?: boolean
    users?: boolean | Division$usersArgs<ExtArgs>
    _count?: boolean | DivisionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["division"]>



  export type DivisionSelectScalar = {
    id?: boolean
    divisionName?: boolean
  }

  export type DivisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "divisionName", ExtArgs["result"]["division"]>
  export type DivisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Division$usersArgs<ExtArgs>
    _count?: boolean | DivisionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DivisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Division"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      divisionName: string
    }, ExtArgs["result"]["division"]>
    composites: {}
  }

  type DivisionGetPayload<S extends boolean | null | undefined | DivisionDefaultArgs> = $Result.GetResult<Prisma.$DivisionPayload, S>

  type DivisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DivisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DivisionCountAggregateInputType | true
    }

  export interface DivisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Division'], meta: { name: 'Division' } }
    /**
     * Find zero or one Division that matches the filter.
     * @param {DivisionFindUniqueArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DivisionFindUniqueArgs>(args: SelectSubset<T, DivisionFindUniqueArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Division that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DivisionFindUniqueOrThrowArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DivisionFindUniqueOrThrowArgs>(args: SelectSubset<T, DivisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Division that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindFirstArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DivisionFindFirstArgs>(args?: SelectSubset<T, DivisionFindFirstArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Division that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindFirstOrThrowArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DivisionFindFirstOrThrowArgs>(args?: SelectSubset<T, DivisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Divisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Divisions
     * const divisions = await prisma.division.findMany()
     * 
     * // Get first 10 Divisions
     * const divisions = await prisma.division.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const divisionWithIdOnly = await prisma.division.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DivisionFindManyArgs>(args?: SelectSubset<T, DivisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Division.
     * @param {DivisionCreateArgs} args - Arguments to create a Division.
     * @example
     * // Create one Division
     * const Division = await prisma.division.create({
     *   data: {
     *     // ... data to create a Division
     *   }
     * })
     * 
     */
    create<T extends DivisionCreateArgs>(args: SelectSubset<T, DivisionCreateArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Divisions.
     * @param {DivisionCreateManyArgs} args - Arguments to create many Divisions.
     * @example
     * // Create many Divisions
     * const division = await prisma.division.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DivisionCreateManyArgs>(args?: SelectSubset<T, DivisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Division.
     * @param {DivisionDeleteArgs} args - Arguments to delete one Division.
     * @example
     * // Delete one Division
     * const Division = await prisma.division.delete({
     *   where: {
     *     // ... filter to delete one Division
     *   }
     * })
     * 
     */
    delete<T extends DivisionDeleteArgs>(args: SelectSubset<T, DivisionDeleteArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Division.
     * @param {DivisionUpdateArgs} args - Arguments to update one Division.
     * @example
     * // Update one Division
     * const division = await prisma.division.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DivisionUpdateArgs>(args: SelectSubset<T, DivisionUpdateArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Divisions.
     * @param {DivisionDeleteManyArgs} args - Arguments to filter Divisions to delete.
     * @example
     * // Delete a few Divisions
     * const { count } = await prisma.division.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DivisionDeleteManyArgs>(args?: SelectSubset<T, DivisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Divisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Divisions
     * const division = await prisma.division.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DivisionUpdateManyArgs>(args: SelectSubset<T, DivisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Division.
     * @param {DivisionUpsertArgs} args - Arguments to update or create a Division.
     * @example
     * // Update or create a Division
     * const division = await prisma.division.upsert({
     *   create: {
     *     // ... data to create a Division
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Division we want to update
     *   }
     * })
     */
    upsert<T extends DivisionUpsertArgs>(args: SelectSubset<T, DivisionUpsertArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Divisions that matches the filter.
     * @param {DivisionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const division = await prisma.division.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: DivisionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Division.
     * @param {DivisionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const division = await prisma.division.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: DivisionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Divisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionCountArgs} args - Arguments to filter Divisions to count.
     * @example
     * // Count the number of Divisions
     * const count = await prisma.division.count({
     *   where: {
     *     // ... the filter for the Divisions we want to count
     *   }
     * })
    **/
    count<T extends DivisionCountArgs>(
      args?: Subset<T, DivisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DivisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Division.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DivisionAggregateArgs>(args: Subset<T, DivisionAggregateArgs>): Prisma.PrismaPromise<GetDivisionAggregateType<T>>

    /**
     * Group by Division.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DivisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DivisionGroupByArgs['orderBy'] }
        : { orderBy?: DivisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DivisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDivisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Division model
   */
  readonly fields: DivisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Division.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DivisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Division$usersArgs<ExtArgs> = {}>(args?: Subset<T, Division$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Division model
   */
  interface DivisionFieldRefs {
    readonly id: FieldRef<"Division", 'String'>
    readonly divisionName: FieldRef<"Division", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Division findUnique
   */
  export type DivisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division findUniqueOrThrow
   */
  export type DivisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division findFirst
   */
  export type DivisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divisions.
     */
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division findFirstOrThrow
   */
  export type DivisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divisions.
     */
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division findMany
   */
  export type DivisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Divisions to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division create
   */
  export type DivisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The data needed to create a Division.
     */
    data: XOR<DivisionCreateInput, DivisionUncheckedCreateInput>
  }

  /**
   * Division createMany
   */
  export type DivisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Divisions.
     */
    data: DivisionCreateManyInput | DivisionCreateManyInput[]
  }

  /**
   * Division update
   */
  export type DivisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The data needed to update a Division.
     */
    data: XOR<DivisionUpdateInput, DivisionUncheckedUpdateInput>
    /**
     * Choose, which Division to update.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division updateMany
   */
  export type DivisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Divisions.
     */
    data: XOR<DivisionUpdateManyMutationInput, DivisionUncheckedUpdateManyInput>
    /**
     * Filter which Divisions to update
     */
    where?: DivisionWhereInput
    /**
     * Limit how many Divisions to update.
     */
    limit?: number
  }

  /**
   * Division upsert
   */
  export type DivisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The filter to search for the Division to update in case it exists.
     */
    where: DivisionWhereUniqueInput
    /**
     * In case the Division found by the `where` argument doesn't exist, create a new Division with this data.
     */
    create: XOR<DivisionCreateInput, DivisionUncheckedCreateInput>
    /**
     * In case the Division was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DivisionUpdateInput, DivisionUncheckedUpdateInput>
  }

  /**
   * Division delete
   */
  export type DivisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter which Division to delete.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division deleteMany
   */
  export type DivisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Divisions to delete
     */
    where?: DivisionWhereInput
    /**
     * Limit how many Divisions to delete.
     */
    limit?: number
  }

  /**
   * Division findRaw
   */
  export type DivisionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Division aggregateRaw
   */
  export type DivisionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Division.users
   */
  export type Division$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Division without action
   */
  export type DivisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
  }


  /**
   * Model Unit
   */

  export type AggregateUnit = {
    _count: UnitCountAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  export type UnitMinAggregateOutputType = {
    id: string | null
    unitName: string | null
  }

  export type UnitMaxAggregateOutputType = {
    id: string | null
    unitName: string | null
  }

  export type UnitCountAggregateOutputType = {
    id: number
    unitName: number
    _all: number
  }


  export type UnitMinAggregateInputType = {
    id?: true
    unitName?: true
  }

  export type UnitMaxAggregateInputType = {
    id?: true
    unitName?: true
  }

  export type UnitCountAggregateInputType = {
    id?: true
    unitName?: true
    _all?: true
  }

  export type UnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unit to aggregate.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Units
    **/
    _count?: true | UnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitMaxAggregateInputType
  }

  export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
        [P in keyof T & keyof AggregateUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnit[P]>
      : GetScalarType<T[P], AggregateUnit[P]>
  }




  export type UnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithAggregationInput | UnitOrderByWithAggregationInput[]
    by: UnitScalarFieldEnum[] | UnitScalarFieldEnum
    having?: UnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitCountAggregateInputType | true
    _min?: UnitMinAggregateInputType
    _max?: UnitMaxAggregateInputType
  }

  export type UnitGroupByOutputType = {
    id: string
    unitName: string
    _count: UnitCountAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  type GetUnitGroupByPayload<T extends UnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitGroupByOutputType[P]>
            : GetScalarType<T[P], UnitGroupByOutputType[P]>
        }
      >
    >


  export type UnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    unitName?: boolean
    users?: boolean | Unit$usersArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>



  export type UnitSelectScalar = {
    id?: boolean
    unitName?: boolean
  }

  export type UnitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "unitName", ExtArgs["result"]["unit"]>
  export type UnitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Unit$usersArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unit"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      unitName: string
    }, ExtArgs["result"]["unit"]>
    composites: {}
  }

  type UnitGetPayload<S extends boolean | null | undefined | UnitDefaultArgs> = $Result.GetResult<Prisma.$UnitPayload, S>

  type UnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitCountAggregateInputType | true
    }

  export interface UnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unit'], meta: { name: 'Unit' } }
    /**
     * Find zero or one Unit that matches the filter.
     * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitFindUniqueArgs>(args: SelectSubset<T, UnitFindUniqueArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Unit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitFindUniqueOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitFindFirstArgs>(args?: SelectSubset<T, UnitFindFirstArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Units that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Units
     * const units = await prisma.unit.findMany()
     * 
     * // Get first 10 Units
     * const units = await prisma.unit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitWithIdOnly = await prisma.unit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnitFindManyArgs>(args?: SelectSubset<T, UnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Unit.
     * @param {UnitCreateArgs} args - Arguments to create a Unit.
     * @example
     * // Create one Unit
     * const Unit = await prisma.unit.create({
     *   data: {
     *     // ... data to create a Unit
     *   }
     * })
     * 
     */
    create<T extends UnitCreateArgs>(args: SelectSubset<T, UnitCreateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Units.
     * @param {UnitCreateManyArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitCreateManyArgs>(args?: SelectSubset<T, UnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Unit.
     * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
     * @example
     * // Delete one Unit
     * const Unit = await prisma.unit.delete({
     *   where: {
     *     // ... filter to delete one Unit
     *   }
     * })
     * 
     */
    delete<T extends UnitDeleteArgs>(args: SelectSubset<T, UnitDeleteArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Unit.
     * @param {UnitUpdateArgs} args - Arguments to update one Unit.
     * @example
     * // Update one Unit
     * const unit = await prisma.unit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitUpdateArgs>(args: SelectSubset<T, UnitUpdateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Units.
     * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
     * @example
     * // Delete a few Units
     * const { count } = await prisma.unit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitDeleteManyArgs>(args?: SelectSubset<T, UnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitUpdateManyArgs>(args: SelectSubset<T, UnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Unit.
     * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
     * @example
     * // Update or create a Unit
     * const unit = await prisma.unit.upsert({
     *   create: {
     *     // ... data to create a Unit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unit we want to update
     *   }
     * })
     */
    upsert<T extends UnitUpsertArgs>(args: SelectSubset<T, UnitUpsertArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Units that matches the filter.
     * @param {UnitFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const unit = await prisma.unit.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UnitFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Unit.
     * @param {UnitAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const unit = await prisma.unit.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UnitAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitCountArgs} args - Arguments to filter Units to count.
     * @example
     * // Count the number of Units
     * const count = await prisma.unit.count({
     *   where: {
     *     // ... the filter for the Units we want to count
     *   }
     * })
    **/
    count<T extends UnitCountArgs>(
      args?: Subset<T, UnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitAggregateArgs>(args: Subset<T, UnitAggregateArgs>): Prisma.PrismaPromise<GetUnitAggregateType<T>>

    /**
     * Group by Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitGroupByArgs['orderBy'] }
        : { orderBy?: UnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unit model
   */
  readonly fields: UnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Unit$usersArgs<ExtArgs> = {}>(args?: Subset<T, Unit$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Unit model
   */
  interface UnitFieldRefs {
    readonly id: FieldRef<"Unit", 'String'>
    readonly unitName: FieldRef<"Unit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Unit findUnique
   */
  export type UnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findUniqueOrThrow
   */
  export type UnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findFirst
   */
  export type UnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findFirstOrThrow
   */
  export type UnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findMany
   */
  export type UnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Units to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit create
   */
  export type UnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to create a Unit.
     */
    data: XOR<UnitCreateInput, UnitUncheckedCreateInput>
  }

  /**
   * Unit createMany
   */
  export type UnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
  }

  /**
   * Unit update
   */
  export type UnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to update a Unit.
     */
    data: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
    /**
     * Choose, which Unit to update.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit updateMany
   */
  export type UnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
  }

  /**
   * Unit upsert
   */
  export type UnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The filter to search for the Unit to update in case it exists.
     */
    where: UnitWhereUniqueInput
    /**
     * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
     */
    create: XOR<UnitCreateInput, UnitUncheckedCreateInput>
    /**
     * In case the Unit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
  }

  /**
   * Unit delete
   */
  export type UnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter which Unit to delete.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit deleteMany
   */
  export type UnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Units to delete
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to delete.
     */
    limit?: number
  }

  /**
   * Unit findRaw
   */
  export type UnitFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Unit aggregateRaw
   */
  export type UnitAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Unit.users
   */
  export type Unit$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Unit without action
   */
  export type UnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    gradeOfficial: number | null
  }

  export type GradeSumAggregateOutputType = {
    gradeOfficial: number | null
  }

  export type GradeMinAggregateOutputType = {
    id: string | null
    gradeOfficial: number | null
    gradeInternal: string | null
  }

  export type GradeMaxAggregateOutputType = {
    id: string | null
    gradeOfficial: number | null
    gradeInternal: string | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    gradeOfficial: number
    gradeInternal: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    gradeOfficial?: true
  }

  export type GradeSumAggregateInputType = {
    gradeOfficial?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    gradeOfficial?: true
    gradeInternal?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    gradeOfficial?: true
    gradeInternal?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    gradeOfficial?: true
    gradeInternal?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: string
    gradeOfficial: number
    gradeInternal: string | null
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gradeOfficial?: boolean
    gradeInternal?: boolean
    users?: boolean | Grade$usersArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>



  export type GradeSelectScalar = {
    id?: boolean
    gradeOfficial?: boolean
    gradeInternal?: boolean
  }

  export type GradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gradeOfficial" | "gradeInternal", ExtArgs["result"]["grade"]>
  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Grade$usersArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      gradeOfficial: number
      gradeInternal: string | null
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * @param {GradeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const grade = await prisma.grade.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: GradeFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Grade.
     * @param {GradeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const grade = await prisma.grade.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: GradeAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Grade$usersArgs<ExtArgs> = {}>(args?: Subset<T, Grade$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'String'>
    readonly gradeOfficial: FieldRef<"Grade", 'Int'>
    readonly gradeInternal: FieldRef<"Grade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to delete.
     */
    limit?: number
  }

  /**
   * Grade findRaw
   */
  export type GradeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Grade aggregateRaw
   */
  export type GradeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Grade.users
   */
  export type Grade$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    locationName: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    locationName: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    locationName: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    locationName?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    locationName?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    locationName?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    locationName: string
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationName?: boolean
    users?: boolean | Location$usersArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>



  export type LocationSelectScalar = {
    id?: boolean
    locationName?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "locationName", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Location$usersArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      locationName: string
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * @param {LocationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const location = await prisma.location.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: LocationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Location.
     * @param {LocationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const location = await prisma.location.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: LocationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Location$usersArgs<ExtArgs> = {}>(args?: Subset<T, Location$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly locationName: FieldRef<"Location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location findRaw
   */
  export type LocationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Location aggregateRaw
   */
  export type LocationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Location.users
   */
  export type Location$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model ContractType
   */

  export type AggregateContractType = {
    _count: ContractTypeCountAggregateOutputType | null
    _min: ContractTypeMinAggregateOutputType | null
    _max: ContractTypeMaxAggregateOutputType | null
  }

  export type ContractTypeMinAggregateOutputType = {
    id: string | null
    typeName: string | null
  }

  export type ContractTypeMaxAggregateOutputType = {
    id: string | null
    typeName: string | null
  }

  export type ContractTypeCountAggregateOutputType = {
    id: number
    typeName: number
    _all: number
  }


  export type ContractTypeMinAggregateInputType = {
    id?: true
    typeName?: true
  }

  export type ContractTypeMaxAggregateInputType = {
    id?: true
    typeName?: true
  }

  export type ContractTypeCountAggregateInputType = {
    id?: true
    typeName?: true
    _all?: true
  }

  export type ContractTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractType to aggregate.
     */
    where?: ContractTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypes to fetch.
     */
    orderBy?: ContractTypeOrderByWithRelationInput | ContractTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractTypes
    **/
    _count?: true | ContractTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractTypeMaxAggregateInputType
  }

  export type GetContractTypeAggregateType<T extends ContractTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateContractType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractType[P]>
      : GetScalarType<T[P], AggregateContractType[P]>
  }




  export type ContractTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractTypeWhereInput
    orderBy?: ContractTypeOrderByWithAggregationInput | ContractTypeOrderByWithAggregationInput[]
    by: ContractTypeScalarFieldEnum[] | ContractTypeScalarFieldEnum
    having?: ContractTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractTypeCountAggregateInputType | true
    _min?: ContractTypeMinAggregateInputType
    _max?: ContractTypeMaxAggregateInputType
  }

  export type ContractTypeGroupByOutputType = {
    id: string
    typeName: string
    _count: ContractTypeCountAggregateOutputType | null
    _min: ContractTypeMinAggregateOutputType | null
    _max: ContractTypeMaxAggregateOutputType | null
  }

  type GetContractTypeGroupByPayload<T extends ContractTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ContractTypeGroupByOutputType[P]>
        }
      >
    >


  export type ContractTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeName?: boolean
    users?: boolean | ContractType$usersArgs<ExtArgs>
    _count?: boolean | ContractTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractType"]>



  export type ContractTypeSelectScalar = {
    id?: boolean
    typeName?: boolean
  }

  export type ContractTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "typeName", ExtArgs["result"]["contractType"]>
  export type ContractTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ContractType$usersArgs<ExtArgs>
    _count?: boolean | ContractTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ContractTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractType"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      typeName: string
    }, ExtArgs["result"]["contractType"]>
    composites: {}
  }

  type ContractTypeGetPayload<S extends boolean | null | undefined | ContractTypeDefaultArgs> = $Result.GetResult<Prisma.$ContractTypePayload, S>

  type ContractTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractTypeCountAggregateInputType | true
    }

  export interface ContractTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractType'], meta: { name: 'ContractType' } }
    /**
     * Find zero or one ContractType that matches the filter.
     * @param {ContractTypeFindUniqueArgs} args - Arguments to find a ContractType
     * @example
     * // Get one ContractType
     * const contractType = await prisma.contractType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractTypeFindUniqueArgs>(args: SelectSubset<T, ContractTypeFindUniqueArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContractType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractTypeFindUniqueOrThrowArgs} args - Arguments to find a ContractType
     * @example
     * // Get one ContractType
     * const contractType = await prisma.contractType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeFindFirstArgs} args - Arguments to find a ContractType
     * @example
     * // Get one ContractType
     * const contractType = await prisma.contractType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractTypeFindFirstArgs>(args?: SelectSubset<T, ContractTypeFindFirstArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeFindFirstOrThrowArgs} args - Arguments to find a ContractType
     * @example
     * // Get one ContractType
     * const contractType = await prisma.contractType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractTypes
     * const contractTypes = await prisma.contractType.findMany()
     * 
     * // Get first 10 ContractTypes
     * const contractTypes = await prisma.contractType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractTypeWithIdOnly = await prisma.contractType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractTypeFindManyArgs>(args?: SelectSubset<T, ContractTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContractType.
     * @param {ContractTypeCreateArgs} args - Arguments to create a ContractType.
     * @example
     * // Create one ContractType
     * const ContractType = await prisma.contractType.create({
     *   data: {
     *     // ... data to create a ContractType
     *   }
     * })
     * 
     */
    create<T extends ContractTypeCreateArgs>(args: SelectSubset<T, ContractTypeCreateArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContractTypes.
     * @param {ContractTypeCreateManyArgs} args - Arguments to create many ContractTypes.
     * @example
     * // Create many ContractTypes
     * const contractType = await prisma.contractType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractTypeCreateManyArgs>(args?: SelectSubset<T, ContractTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ContractType.
     * @param {ContractTypeDeleteArgs} args - Arguments to delete one ContractType.
     * @example
     * // Delete one ContractType
     * const ContractType = await prisma.contractType.delete({
     *   where: {
     *     // ... filter to delete one ContractType
     *   }
     * })
     * 
     */
    delete<T extends ContractTypeDeleteArgs>(args: SelectSubset<T, ContractTypeDeleteArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContractType.
     * @param {ContractTypeUpdateArgs} args - Arguments to update one ContractType.
     * @example
     * // Update one ContractType
     * const contractType = await prisma.contractType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractTypeUpdateArgs>(args: SelectSubset<T, ContractTypeUpdateArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContractTypes.
     * @param {ContractTypeDeleteManyArgs} args - Arguments to filter ContractTypes to delete.
     * @example
     * // Delete a few ContractTypes
     * const { count } = await prisma.contractType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractTypeDeleteManyArgs>(args?: SelectSubset<T, ContractTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractTypes
     * const contractType = await prisma.contractType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractTypeUpdateManyArgs>(args: SelectSubset<T, ContractTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContractType.
     * @param {ContractTypeUpsertArgs} args - Arguments to update or create a ContractType.
     * @example
     * // Update or create a ContractType
     * const contractType = await prisma.contractType.upsert({
     *   create: {
     *     // ... data to create a ContractType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractType we want to update
     *   }
     * })
     */
    upsert<T extends ContractTypeUpsertArgs>(args: SelectSubset<T, ContractTypeUpsertArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractTypes that matches the filter.
     * @param {ContractTypeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const contractType = await prisma.contractType.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ContractTypeFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ContractType.
     * @param {ContractTypeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const contractType = await prisma.contractType.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ContractTypeAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ContractTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeCountArgs} args - Arguments to filter ContractTypes to count.
     * @example
     * // Count the number of ContractTypes
     * const count = await prisma.contractType.count({
     *   where: {
     *     // ... the filter for the ContractTypes we want to count
     *   }
     * })
    **/
    count<T extends ContractTypeCountArgs>(
      args?: Subset<T, ContractTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractTypeAggregateArgs>(args: Subset<T, ContractTypeAggregateArgs>): Prisma.PrismaPromise<GetContractTypeAggregateType<T>>

    /**
     * Group by ContractType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractTypeGroupByArgs['orderBy'] }
        : { orderBy?: ContractTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractType model
   */
  readonly fields: ContractTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends ContractType$usersArgs<ExtArgs> = {}>(args?: Subset<T, ContractType$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractType model
   */
  interface ContractTypeFieldRefs {
    readonly id: FieldRef<"ContractType", 'String'>
    readonly typeName: FieldRef<"ContractType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContractType findUnique
   */
  export type ContractTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContractType to fetch.
     */
    where: ContractTypeWhereUniqueInput
  }

  /**
   * ContractType findUniqueOrThrow
   */
  export type ContractTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContractType to fetch.
     */
    where: ContractTypeWhereUniqueInput
  }

  /**
   * ContractType findFirst
   */
  export type ContractTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContractType to fetch.
     */
    where?: ContractTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypes to fetch.
     */
    orderBy?: ContractTypeOrderByWithRelationInput | ContractTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractTypes.
     */
    cursor?: ContractTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractTypes.
     */
    distinct?: ContractTypeScalarFieldEnum | ContractTypeScalarFieldEnum[]
  }

  /**
   * ContractType findFirstOrThrow
   */
  export type ContractTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContractType to fetch.
     */
    where?: ContractTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypes to fetch.
     */
    orderBy?: ContractTypeOrderByWithRelationInput | ContractTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractTypes.
     */
    cursor?: ContractTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractTypes.
     */
    distinct?: ContractTypeScalarFieldEnum | ContractTypeScalarFieldEnum[]
  }

  /**
   * ContractType findMany
   */
  export type ContractTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContractTypes to fetch.
     */
    where?: ContractTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractTypes to fetch.
     */
    orderBy?: ContractTypeOrderByWithRelationInput | ContractTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractTypes.
     */
    cursor?: ContractTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractTypes.
     */
    skip?: number
    distinct?: ContractTypeScalarFieldEnum | ContractTypeScalarFieldEnum[]
  }

  /**
   * ContractType create
   */
  export type ContractTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractType.
     */
    data: XOR<ContractTypeCreateInput, ContractTypeUncheckedCreateInput>
  }

  /**
   * ContractType createMany
   */
  export type ContractTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractTypes.
     */
    data: ContractTypeCreateManyInput | ContractTypeCreateManyInput[]
  }

  /**
   * ContractType update
   */
  export type ContractTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractType.
     */
    data: XOR<ContractTypeUpdateInput, ContractTypeUncheckedUpdateInput>
    /**
     * Choose, which ContractType to update.
     */
    where: ContractTypeWhereUniqueInput
  }

  /**
   * ContractType updateMany
   */
  export type ContractTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractTypes.
     */
    data: XOR<ContractTypeUpdateManyMutationInput, ContractTypeUncheckedUpdateManyInput>
    /**
     * Filter which ContractTypes to update
     */
    where?: ContractTypeWhereInput
    /**
     * Limit how many ContractTypes to update.
     */
    limit?: number
  }

  /**
   * ContractType upsert
   */
  export type ContractTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractType to update in case it exists.
     */
    where: ContractTypeWhereUniqueInput
    /**
     * In case the ContractType found by the `where` argument doesn't exist, create a new ContractType with this data.
     */
    create: XOR<ContractTypeCreateInput, ContractTypeUncheckedCreateInput>
    /**
     * In case the ContractType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractTypeUpdateInput, ContractTypeUncheckedUpdateInput>
  }

  /**
   * ContractType delete
   */
  export type ContractTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    /**
     * Filter which ContractType to delete.
     */
    where: ContractTypeWhereUniqueInput
  }

  /**
   * ContractType deleteMany
   */
  export type ContractTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractTypes to delete
     */
    where?: ContractTypeWhereInput
    /**
     * Limit how many ContractTypes to delete.
     */
    limit?: number
  }

  /**
   * ContractType findRaw
   */
  export type ContractTypeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ContractType aggregateRaw
   */
  export type ContractTypeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ContractType.users
   */
  export type ContractType$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * ContractType without action
   */
  export type ContractTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
  }


  /**
   * Model Nationality
   */

  export type AggregateNationality = {
    _count: NationalityCountAggregateOutputType | null
    _min: NationalityMinAggregateOutputType | null
    _max: NationalityMaxAggregateOutputType | null
  }

  export type NationalityMinAggregateOutputType = {
    id: string | null
    nationalityEn: string | null
    nationalityAr: string | null
  }

  export type NationalityMaxAggregateOutputType = {
    id: string | null
    nationalityEn: string | null
    nationalityAr: string | null
  }

  export type NationalityCountAggregateOutputType = {
    id: number
    nationalityEn: number
    nationalityAr: number
    _all: number
  }


  export type NationalityMinAggregateInputType = {
    id?: true
    nationalityEn?: true
    nationalityAr?: true
  }

  export type NationalityMaxAggregateInputType = {
    id?: true
    nationalityEn?: true
    nationalityAr?: true
  }

  export type NationalityCountAggregateInputType = {
    id?: true
    nationalityEn?: true
    nationalityAr?: true
    _all?: true
  }

  export type NationalityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nationality to aggregate.
     */
    where?: NationalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nationalities to fetch.
     */
    orderBy?: NationalityOrderByWithRelationInput | NationalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NationalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nationalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nationalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nationalities
    **/
    _count?: true | NationalityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NationalityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NationalityMaxAggregateInputType
  }

  export type GetNationalityAggregateType<T extends NationalityAggregateArgs> = {
        [P in keyof T & keyof AggregateNationality]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNationality[P]>
      : GetScalarType<T[P], AggregateNationality[P]>
  }




  export type NationalityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NationalityWhereInput
    orderBy?: NationalityOrderByWithAggregationInput | NationalityOrderByWithAggregationInput[]
    by: NationalityScalarFieldEnum[] | NationalityScalarFieldEnum
    having?: NationalityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NationalityCountAggregateInputType | true
    _min?: NationalityMinAggregateInputType
    _max?: NationalityMaxAggregateInputType
  }

  export type NationalityGroupByOutputType = {
    id: string
    nationalityEn: string
    nationalityAr: string | null
    _count: NationalityCountAggregateOutputType | null
    _min: NationalityMinAggregateOutputType | null
    _max: NationalityMaxAggregateOutputType | null
  }

  type GetNationalityGroupByPayload<T extends NationalityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NationalityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NationalityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NationalityGroupByOutputType[P]>
            : GetScalarType<T[P], NationalityGroupByOutputType[P]>
        }
      >
    >


  export type NationalitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nationalityEn?: boolean
    nationalityAr?: boolean
    users?: boolean | Nationality$usersArgs<ExtArgs>
    _count?: boolean | NationalityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nationality"]>



  export type NationalitySelectScalar = {
    id?: boolean
    nationalityEn?: boolean
    nationalityAr?: boolean
  }

  export type NationalityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nationalityEn" | "nationalityAr", ExtArgs["result"]["nationality"]>
  export type NationalityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Nationality$usersArgs<ExtArgs>
    _count?: boolean | NationalityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NationalityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nationality"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nationalityEn: string
      nationalityAr: string | null
    }, ExtArgs["result"]["nationality"]>
    composites: {}
  }

  type NationalityGetPayload<S extends boolean | null | undefined | NationalityDefaultArgs> = $Result.GetResult<Prisma.$NationalityPayload, S>

  type NationalityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NationalityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NationalityCountAggregateInputType | true
    }

  export interface NationalityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nationality'], meta: { name: 'Nationality' } }
    /**
     * Find zero or one Nationality that matches the filter.
     * @param {NationalityFindUniqueArgs} args - Arguments to find a Nationality
     * @example
     * // Get one Nationality
     * const nationality = await prisma.nationality.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NationalityFindUniqueArgs>(args: SelectSubset<T, NationalityFindUniqueArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Nationality that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NationalityFindUniqueOrThrowArgs} args - Arguments to find a Nationality
     * @example
     * // Get one Nationality
     * const nationality = await prisma.nationality.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NationalityFindUniqueOrThrowArgs>(args: SelectSubset<T, NationalityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Nationality that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityFindFirstArgs} args - Arguments to find a Nationality
     * @example
     * // Get one Nationality
     * const nationality = await prisma.nationality.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NationalityFindFirstArgs>(args?: SelectSubset<T, NationalityFindFirstArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Nationality that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityFindFirstOrThrowArgs} args - Arguments to find a Nationality
     * @example
     * // Get one Nationality
     * const nationality = await prisma.nationality.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NationalityFindFirstOrThrowArgs>(args?: SelectSubset<T, NationalityFindFirstOrThrowArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Nationalities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nationalities
     * const nationalities = await prisma.nationality.findMany()
     * 
     * // Get first 10 Nationalities
     * const nationalities = await prisma.nationality.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nationalityWithIdOnly = await prisma.nationality.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NationalityFindManyArgs>(args?: SelectSubset<T, NationalityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Nationality.
     * @param {NationalityCreateArgs} args - Arguments to create a Nationality.
     * @example
     * // Create one Nationality
     * const Nationality = await prisma.nationality.create({
     *   data: {
     *     // ... data to create a Nationality
     *   }
     * })
     * 
     */
    create<T extends NationalityCreateArgs>(args: SelectSubset<T, NationalityCreateArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Nationalities.
     * @param {NationalityCreateManyArgs} args - Arguments to create many Nationalities.
     * @example
     * // Create many Nationalities
     * const nationality = await prisma.nationality.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NationalityCreateManyArgs>(args?: SelectSubset<T, NationalityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nationality.
     * @param {NationalityDeleteArgs} args - Arguments to delete one Nationality.
     * @example
     * // Delete one Nationality
     * const Nationality = await prisma.nationality.delete({
     *   where: {
     *     // ... filter to delete one Nationality
     *   }
     * })
     * 
     */
    delete<T extends NationalityDeleteArgs>(args: SelectSubset<T, NationalityDeleteArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Nationality.
     * @param {NationalityUpdateArgs} args - Arguments to update one Nationality.
     * @example
     * // Update one Nationality
     * const nationality = await prisma.nationality.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NationalityUpdateArgs>(args: SelectSubset<T, NationalityUpdateArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Nationalities.
     * @param {NationalityDeleteManyArgs} args - Arguments to filter Nationalities to delete.
     * @example
     * // Delete a few Nationalities
     * const { count } = await prisma.nationality.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NationalityDeleteManyArgs>(args?: SelectSubset<T, NationalityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nationalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nationalities
     * const nationality = await prisma.nationality.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NationalityUpdateManyArgs>(args: SelectSubset<T, NationalityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nationality.
     * @param {NationalityUpsertArgs} args - Arguments to update or create a Nationality.
     * @example
     * // Update or create a Nationality
     * const nationality = await prisma.nationality.upsert({
     *   create: {
     *     // ... data to create a Nationality
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nationality we want to update
     *   }
     * })
     */
    upsert<T extends NationalityUpsertArgs>(args: SelectSubset<T, NationalityUpsertArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Nationalities that matches the filter.
     * @param {NationalityFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const nationality = await prisma.nationality.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: NationalityFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Nationality.
     * @param {NationalityAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const nationality = await prisma.nationality.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: NationalityAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Nationalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityCountArgs} args - Arguments to filter Nationalities to count.
     * @example
     * // Count the number of Nationalities
     * const count = await prisma.nationality.count({
     *   where: {
     *     // ... the filter for the Nationalities we want to count
     *   }
     * })
    **/
    count<T extends NationalityCountArgs>(
      args?: Subset<T, NationalityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NationalityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nationality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NationalityAggregateArgs>(args: Subset<T, NationalityAggregateArgs>): Prisma.PrismaPromise<GetNationalityAggregateType<T>>

    /**
     * Group by Nationality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NationalityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NationalityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NationalityGroupByArgs['orderBy'] }
        : { orderBy?: NationalityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NationalityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNationalityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nationality model
   */
  readonly fields: NationalityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nationality.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NationalityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Nationality$usersArgs<ExtArgs> = {}>(args?: Subset<T, Nationality$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nationality model
   */
  interface NationalityFieldRefs {
    readonly id: FieldRef<"Nationality", 'String'>
    readonly nationalityEn: FieldRef<"Nationality", 'String'>
    readonly nationalityAr: FieldRef<"Nationality", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Nationality findUnique
   */
  export type NationalityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * Filter, which Nationality to fetch.
     */
    where: NationalityWhereUniqueInput
  }

  /**
   * Nationality findUniqueOrThrow
   */
  export type NationalityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * Filter, which Nationality to fetch.
     */
    where: NationalityWhereUniqueInput
  }

  /**
   * Nationality findFirst
   */
  export type NationalityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * Filter, which Nationality to fetch.
     */
    where?: NationalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nationalities to fetch.
     */
    orderBy?: NationalityOrderByWithRelationInput | NationalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nationalities.
     */
    cursor?: NationalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nationalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nationalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nationalities.
     */
    distinct?: NationalityScalarFieldEnum | NationalityScalarFieldEnum[]
  }

  /**
   * Nationality findFirstOrThrow
   */
  export type NationalityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * Filter, which Nationality to fetch.
     */
    where?: NationalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nationalities to fetch.
     */
    orderBy?: NationalityOrderByWithRelationInput | NationalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nationalities.
     */
    cursor?: NationalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nationalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nationalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nationalities.
     */
    distinct?: NationalityScalarFieldEnum | NationalityScalarFieldEnum[]
  }

  /**
   * Nationality findMany
   */
  export type NationalityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * Filter, which Nationalities to fetch.
     */
    where?: NationalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nationalities to fetch.
     */
    orderBy?: NationalityOrderByWithRelationInput | NationalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nationalities.
     */
    cursor?: NationalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nationalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nationalities.
     */
    skip?: number
    distinct?: NationalityScalarFieldEnum | NationalityScalarFieldEnum[]
  }

  /**
   * Nationality create
   */
  export type NationalityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * The data needed to create a Nationality.
     */
    data: XOR<NationalityCreateInput, NationalityUncheckedCreateInput>
  }

  /**
   * Nationality createMany
   */
  export type NationalityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nationalities.
     */
    data: NationalityCreateManyInput | NationalityCreateManyInput[]
  }

  /**
   * Nationality update
   */
  export type NationalityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * The data needed to update a Nationality.
     */
    data: XOR<NationalityUpdateInput, NationalityUncheckedUpdateInput>
    /**
     * Choose, which Nationality to update.
     */
    where: NationalityWhereUniqueInput
  }

  /**
   * Nationality updateMany
   */
  export type NationalityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nationalities.
     */
    data: XOR<NationalityUpdateManyMutationInput, NationalityUncheckedUpdateManyInput>
    /**
     * Filter which Nationalities to update
     */
    where?: NationalityWhereInput
    /**
     * Limit how many Nationalities to update.
     */
    limit?: number
  }

  /**
   * Nationality upsert
   */
  export type NationalityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * The filter to search for the Nationality to update in case it exists.
     */
    where: NationalityWhereUniqueInput
    /**
     * In case the Nationality found by the `where` argument doesn't exist, create a new Nationality with this data.
     */
    create: XOR<NationalityCreateInput, NationalityUncheckedCreateInput>
    /**
     * In case the Nationality was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NationalityUpdateInput, NationalityUncheckedUpdateInput>
  }

  /**
   * Nationality delete
   */
  export type NationalityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    /**
     * Filter which Nationality to delete.
     */
    where: NationalityWhereUniqueInput
  }

  /**
   * Nationality deleteMany
   */
  export type NationalityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nationalities to delete
     */
    where?: NationalityWhereInput
    /**
     * Limit how many Nationalities to delete.
     */
    limit?: number
  }

  /**
   * Nationality findRaw
   */
  export type NationalityFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Nationality aggregateRaw
   */
  export type NationalityAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Nationality.users
   */
  export type Nationality$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Nationality without action
   */
  export type NationalityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
  }


  /**
   * Model Gender
   */

  export type AggregateGender = {
    _count: GenderCountAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  export type GenderMinAggregateOutputType = {
    id: string | null
    genderEn: string | null
    genderAr: string | null
  }

  export type GenderMaxAggregateOutputType = {
    id: string | null
    genderEn: string | null
    genderAr: string | null
  }

  export type GenderCountAggregateOutputType = {
    id: number
    genderEn: number
    genderAr: number
    _all: number
  }


  export type GenderMinAggregateInputType = {
    id?: true
    genderEn?: true
    genderAr?: true
  }

  export type GenderMaxAggregateInputType = {
    id?: true
    genderEn?: true
    genderAr?: true
  }

  export type GenderCountAggregateInputType = {
    id?: true
    genderEn?: true
    genderAr?: true
    _all?: true
  }

  export type GenderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gender to aggregate.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genders
    **/
    _count?: true | GenderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenderMaxAggregateInputType
  }

  export type GetGenderAggregateType<T extends GenderAggregateArgs> = {
        [P in keyof T & keyof AggregateGender]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGender[P]>
      : GetScalarType<T[P], AggregateGender[P]>
  }




  export type GenderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenderWhereInput
    orderBy?: GenderOrderByWithAggregationInput | GenderOrderByWithAggregationInput[]
    by: GenderScalarFieldEnum[] | GenderScalarFieldEnum
    having?: GenderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenderCountAggregateInputType | true
    _min?: GenderMinAggregateInputType
    _max?: GenderMaxAggregateInputType
  }

  export type GenderGroupByOutputType = {
    id: string
    genderEn: string
    genderAr: string | null
    _count: GenderCountAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  type GetGenderGroupByPayload<T extends GenderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenderGroupByOutputType[P]>
            : GetScalarType<T[P], GenderGroupByOutputType[P]>
        }
      >
    >


  export type GenderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    genderEn?: boolean
    genderAr?: boolean
    users?: boolean | Gender$usersArgs<ExtArgs>
    _count?: boolean | GenderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gender"]>



  export type GenderSelectScalar = {
    id?: boolean
    genderEn?: boolean
    genderAr?: boolean
  }

  export type GenderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "genderEn" | "genderAr", ExtArgs["result"]["gender"]>
  export type GenderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Gender$usersArgs<ExtArgs>
    _count?: boolean | GenderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GenderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gender"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      genderEn: string
      genderAr: string | null
    }, ExtArgs["result"]["gender"]>
    composites: {}
  }

  type GenderGetPayload<S extends boolean | null | undefined | GenderDefaultArgs> = $Result.GetResult<Prisma.$GenderPayload, S>

  type GenderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GenderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GenderCountAggregateInputType | true
    }

  export interface GenderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gender'], meta: { name: 'Gender' } }
    /**
     * Find zero or one Gender that matches the filter.
     * @param {GenderFindUniqueArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GenderFindUniqueArgs>(args: SelectSubset<T, GenderFindUniqueArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Gender that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GenderFindUniqueOrThrowArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GenderFindUniqueOrThrowArgs>(args: SelectSubset<T, GenderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gender that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindFirstArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GenderFindFirstArgs>(args?: SelectSubset<T, GenderFindFirstArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Gender that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindFirstOrThrowArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GenderFindFirstOrThrowArgs>(args?: SelectSubset<T, GenderFindFirstOrThrowArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Genders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genders
     * const genders = await prisma.gender.findMany()
     * 
     * // Get first 10 Genders
     * const genders = await prisma.gender.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genderWithIdOnly = await prisma.gender.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GenderFindManyArgs>(args?: SelectSubset<T, GenderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Gender.
     * @param {GenderCreateArgs} args - Arguments to create a Gender.
     * @example
     * // Create one Gender
     * const Gender = await prisma.gender.create({
     *   data: {
     *     // ... data to create a Gender
     *   }
     * })
     * 
     */
    create<T extends GenderCreateArgs>(args: SelectSubset<T, GenderCreateArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Genders.
     * @param {GenderCreateManyArgs} args - Arguments to create many Genders.
     * @example
     * // Create many Genders
     * const gender = await prisma.gender.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GenderCreateManyArgs>(args?: SelectSubset<T, GenderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gender.
     * @param {GenderDeleteArgs} args - Arguments to delete one Gender.
     * @example
     * // Delete one Gender
     * const Gender = await prisma.gender.delete({
     *   where: {
     *     // ... filter to delete one Gender
     *   }
     * })
     * 
     */
    delete<T extends GenderDeleteArgs>(args: SelectSubset<T, GenderDeleteArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Gender.
     * @param {GenderUpdateArgs} args - Arguments to update one Gender.
     * @example
     * // Update one Gender
     * const gender = await prisma.gender.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GenderUpdateArgs>(args: SelectSubset<T, GenderUpdateArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Genders.
     * @param {GenderDeleteManyArgs} args - Arguments to filter Genders to delete.
     * @example
     * // Delete a few Genders
     * const { count } = await prisma.gender.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GenderDeleteManyArgs>(args?: SelectSubset<T, GenderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genders
     * const gender = await prisma.gender.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GenderUpdateManyArgs>(args: SelectSubset<T, GenderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gender.
     * @param {GenderUpsertArgs} args - Arguments to update or create a Gender.
     * @example
     * // Update or create a Gender
     * const gender = await prisma.gender.upsert({
     *   create: {
     *     // ... data to create a Gender
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gender we want to update
     *   }
     * })
     */
    upsert<T extends GenderUpsertArgs>(args: SelectSubset<T, GenderUpsertArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Genders that matches the filter.
     * @param {GenderFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const gender = await prisma.gender.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: GenderFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Gender.
     * @param {GenderAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const gender = await prisma.gender.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: GenderAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderCountArgs} args - Arguments to filter Genders to count.
     * @example
     * // Count the number of Genders
     * const count = await prisma.gender.count({
     *   where: {
     *     // ... the filter for the Genders we want to count
     *   }
     * })
    **/
    count<T extends GenderCountArgs>(
      args?: Subset<T, GenderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenderAggregateArgs>(args: Subset<T, GenderAggregateArgs>): Prisma.PrismaPromise<GetGenderAggregateType<T>>

    /**
     * Group by Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenderGroupByArgs['orderBy'] }
        : { orderBy?: GenderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gender model
   */
  readonly fields: GenderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gender.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GenderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Gender$usersArgs<ExtArgs> = {}>(args?: Subset<T, Gender$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gender model
   */
  interface GenderFieldRefs {
    readonly id: FieldRef<"Gender", 'String'>
    readonly genderEn: FieldRef<"Gender", 'String'>
    readonly genderAr: FieldRef<"Gender", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Gender findUnique
   */
  export type GenderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where: GenderWhereUniqueInput
  }

  /**
   * Gender findUniqueOrThrow
   */
  export type GenderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where: GenderWhereUniqueInput
  }

  /**
   * Gender findFirst
   */
  export type GenderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genders.
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genders.
     */
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }

  /**
   * Gender findFirstOrThrow
   */
  export type GenderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genders.
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genders.
     */
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }

  /**
   * Gender findMany
   */
  export type GenderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * Filter, which Genders to fetch.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genders.
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }

  /**
   * Gender create
   */
  export type GenderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * The data needed to create a Gender.
     */
    data: XOR<GenderCreateInput, GenderUncheckedCreateInput>
  }

  /**
   * Gender createMany
   */
  export type GenderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Genders.
     */
    data: GenderCreateManyInput | GenderCreateManyInput[]
  }

  /**
   * Gender update
   */
  export type GenderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * The data needed to update a Gender.
     */
    data: XOR<GenderUpdateInput, GenderUncheckedUpdateInput>
    /**
     * Choose, which Gender to update.
     */
    where: GenderWhereUniqueInput
  }

  /**
   * Gender updateMany
   */
  export type GenderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Genders.
     */
    data: XOR<GenderUpdateManyMutationInput, GenderUncheckedUpdateManyInput>
    /**
     * Filter which Genders to update
     */
    where?: GenderWhereInput
    /**
     * Limit how many Genders to update.
     */
    limit?: number
  }

  /**
   * Gender upsert
   */
  export type GenderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * The filter to search for the Gender to update in case it exists.
     */
    where: GenderWhereUniqueInput
    /**
     * In case the Gender found by the `where` argument doesn't exist, create a new Gender with this data.
     */
    create: XOR<GenderCreateInput, GenderUncheckedCreateInput>
    /**
     * In case the Gender was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenderUpdateInput, GenderUncheckedUpdateInput>
  }

  /**
   * Gender delete
   */
  export type GenderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    /**
     * Filter which Gender to delete.
     */
    where: GenderWhereUniqueInput
  }

  /**
   * Gender deleteMany
   */
  export type GenderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genders to delete
     */
    where?: GenderWhereInput
    /**
     * Limit how many Genders to delete.
     */
    limit?: number
  }

  /**
   * Gender findRaw
   */
  export type GenderFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Gender aggregateRaw
   */
  export type GenderAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Gender.users
   */
  export type Gender$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Gender without action
   */
  export type GenderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
  }


  /**
   * Model MaritalStatus
   */

  export type AggregateMaritalStatus = {
    _count: MaritalStatusCountAggregateOutputType | null
    _min: MaritalStatusMinAggregateOutputType | null
    _max: MaritalStatusMaxAggregateOutputType | null
  }

  export type MaritalStatusMinAggregateOutputType = {
    id: string | null
    statusEn: string | null
    statusAr: string | null
  }

  export type MaritalStatusMaxAggregateOutputType = {
    id: string | null
    statusEn: string | null
    statusAr: string | null
  }

  export type MaritalStatusCountAggregateOutputType = {
    id: number
    statusEn: number
    statusAr: number
    _all: number
  }


  export type MaritalStatusMinAggregateInputType = {
    id?: true
    statusEn?: true
    statusAr?: true
  }

  export type MaritalStatusMaxAggregateInputType = {
    id?: true
    statusEn?: true
    statusAr?: true
  }

  export type MaritalStatusCountAggregateInputType = {
    id?: true
    statusEn?: true
    statusAr?: true
    _all?: true
  }

  export type MaritalStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaritalStatus to aggregate.
     */
    where?: MaritalStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaritalStatuses to fetch.
     */
    orderBy?: MaritalStatusOrderByWithRelationInput | MaritalStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaritalStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaritalStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaritalStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaritalStatuses
    **/
    _count?: true | MaritalStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaritalStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaritalStatusMaxAggregateInputType
  }

  export type GetMaritalStatusAggregateType<T extends MaritalStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateMaritalStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaritalStatus[P]>
      : GetScalarType<T[P], AggregateMaritalStatus[P]>
  }




  export type MaritalStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaritalStatusWhereInput
    orderBy?: MaritalStatusOrderByWithAggregationInput | MaritalStatusOrderByWithAggregationInput[]
    by: MaritalStatusScalarFieldEnum[] | MaritalStatusScalarFieldEnum
    having?: MaritalStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaritalStatusCountAggregateInputType | true
    _min?: MaritalStatusMinAggregateInputType
    _max?: MaritalStatusMaxAggregateInputType
  }

  export type MaritalStatusGroupByOutputType = {
    id: string
    statusEn: string
    statusAr: string | null
    _count: MaritalStatusCountAggregateOutputType | null
    _min: MaritalStatusMinAggregateOutputType | null
    _max: MaritalStatusMaxAggregateOutputType | null
  }

  type GetMaritalStatusGroupByPayload<T extends MaritalStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaritalStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaritalStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaritalStatusGroupByOutputType[P]>
            : GetScalarType<T[P], MaritalStatusGroupByOutputType[P]>
        }
      >
    >


  export type MaritalStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusEn?: boolean
    statusAr?: boolean
    users?: boolean | MaritalStatus$usersArgs<ExtArgs>
    _count?: boolean | MaritalStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maritalStatus"]>



  export type MaritalStatusSelectScalar = {
    id?: boolean
    statusEn?: boolean
    statusAr?: boolean
  }

  export type MaritalStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statusEn" | "statusAr", ExtArgs["result"]["maritalStatus"]>
  export type MaritalStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | MaritalStatus$usersArgs<ExtArgs>
    _count?: boolean | MaritalStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MaritalStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaritalStatus"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      statusEn: string
      statusAr: string | null
    }, ExtArgs["result"]["maritalStatus"]>
    composites: {}
  }

  type MaritalStatusGetPayload<S extends boolean | null | undefined | MaritalStatusDefaultArgs> = $Result.GetResult<Prisma.$MaritalStatusPayload, S>

  type MaritalStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaritalStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaritalStatusCountAggregateInputType | true
    }

  export interface MaritalStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaritalStatus'], meta: { name: 'MaritalStatus' } }
    /**
     * Find zero or one MaritalStatus that matches the filter.
     * @param {MaritalStatusFindUniqueArgs} args - Arguments to find a MaritalStatus
     * @example
     * // Get one MaritalStatus
     * const maritalStatus = await prisma.maritalStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaritalStatusFindUniqueArgs>(args: SelectSubset<T, MaritalStatusFindUniqueArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaritalStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaritalStatusFindUniqueOrThrowArgs} args - Arguments to find a MaritalStatus
     * @example
     * // Get one MaritalStatus
     * const maritalStatus = await prisma.maritalStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaritalStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, MaritalStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaritalStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusFindFirstArgs} args - Arguments to find a MaritalStatus
     * @example
     * // Get one MaritalStatus
     * const maritalStatus = await prisma.maritalStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaritalStatusFindFirstArgs>(args?: SelectSubset<T, MaritalStatusFindFirstArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaritalStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusFindFirstOrThrowArgs} args - Arguments to find a MaritalStatus
     * @example
     * // Get one MaritalStatus
     * const maritalStatus = await prisma.maritalStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaritalStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, MaritalStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaritalStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaritalStatuses
     * const maritalStatuses = await prisma.maritalStatus.findMany()
     * 
     * // Get first 10 MaritalStatuses
     * const maritalStatuses = await prisma.maritalStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maritalStatusWithIdOnly = await prisma.maritalStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaritalStatusFindManyArgs>(args?: SelectSubset<T, MaritalStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaritalStatus.
     * @param {MaritalStatusCreateArgs} args - Arguments to create a MaritalStatus.
     * @example
     * // Create one MaritalStatus
     * const MaritalStatus = await prisma.maritalStatus.create({
     *   data: {
     *     // ... data to create a MaritalStatus
     *   }
     * })
     * 
     */
    create<T extends MaritalStatusCreateArgs>(args: SelectSubset<T, MaritalStatusCreateArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaritalStatuses.
     * @param {MaritalStatusCreateManyArgs} args - Arguments to create many MaritalStatuses.
     * @example
     * // Create many MaritalStatuses
     * const maritalStatus = await prisma.maritalStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaritalStatusCreateManyArgs>(args?: SelectSubset<T, MaritalStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MaritalStatus.
     * @param {MaritalStatusDeleteArgs} args - Arguments to delete one MaritalStatus.
     * @example
     * // Delete one MaritalStatus
     * const MaritalStatus = await prisma.maritalStatus.delete({
     *   where: {
     *     // ... filter to delete one MaritalStatus
     *   }
     * })
     * 
     */
    delete<T extends MaritalStatusDeleteArgs>(args: SelectSubset<T, MaritalStatusDeleteArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaritalStatus.
     * @param {MaritalStatusUpdateArgs} args - Arguments to update one MaritalStatus.
     * @example
     * // Update one MaritalStatus
     * const maritalStatus = await prisma.maritalStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaritalStatusUpdateArgs>(args: SelectSubset<T, MaritalStatusUpdateArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaritalStatuses.
     * @param {MaritalStatusDeleteManyArgs} args - Arguments to filter MaritalStatuses to delete.
     * @example
     * // Delete a few MaritalStatuses
     * const { count } = await prisma.maritalStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaritalStatusDeleteManyArgs>(args?: SelectSubset<T, MaritalStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaritalStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaritalStatuses
     * const maritalStatus = await prisma.maritalStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaritalStatusUpdateManyArgs>(args: SelectSubset<T, MaritalStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MaritalStatus.
     * @param {MaritalStatusUpsertArgs} args - Arguments to update or create a MaritalStatus.
     * @example
     * // Update or create a MaritalStatus
     * const maritalStatus = await prisma.maritalStatus.upsert({
     *   create: {
     *     // ... data to create a MaritalStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaritalStatus we want to update
     *   }
     * })
     */
    upsert<T extends MaritalStatusUpsertArgs>(args: SelectSubset<T, MaritalStatusUpsertArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaritalStatuses that matches the filter.
     * @param {MaritalStatusFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const maritalStatus = await prisma.maritalStatus.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: MaritalStatusFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a MaritalStatus.
     * @param {MaritalStatusAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const maritalStatus = await prisma.maritalStatus.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MaritalStatusAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of MaritalStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusCountArgs} args - Arguments to filter MaritalStatuses to count.
     * @example
     * // Count the number of MaritalStatuses
     * const count = await prisma.maritalStatus.count({
     *   where: {
     *     // ... the filter for the MaritalStatuses we want to count
     *   }
     * })
    **/
    count<T extends MaritalStatusCountArgs>(
      args?: Subset<T, MaritalStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaritalStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaritalStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaritalStatusAggregateArgs>(args: Subset<T, MaritalStatusAggregateArgs>): Prisma.PrismaPromise<GetMaritalStatusAggregateType<T>>

    /**
     * Group by MaritalStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaritalStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaritalStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaritalStatusGroupByArgs['orderBy'] }
        : { orderBy?: MaritalStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaritalStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaritalStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaritalStatus model
   */
  readonly fields: MaritalStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaritalStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaritalStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends MaritalStatus$usersArgs<ExtArgs> = {}>(args?: Subset<T, MaritalStatus$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaritalStatus model
   */
  interface MaritalStatusFieldRefs {
    readonly id: FieldRef<"MaritalStatus", 'String'>
    readonly statusEn: FieldRef<"MaritalStatus", 'String'>
    readonly statusAr: FieldRef<"MaritalStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MaritalStatus findUnique
   */
  export type MaritalStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * Filter, which MaritalStatus to fetch.
     */
    where: MaritalStatusWhereUniqueInput
  }

  /**
   * MaritalStatus findUniqueOrThrow
   */
  export type MaritalStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * Filter, which MaritalStatus to fetch.
     */
    where: MaritalStatusWhereUniqueInput
  }

  /**
   * MaritalStatus findFirst
   */
  export type MaritalStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * Filter, which MaritalStatus to fetch.
     */
    where?: MaritalStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaritalStatuses to fetch.
     */
    orderBy?: MaritalStatusOrderByWithRelationInput | MaritalStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaritalStatuses.
     */
    cursor?: MaritalStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaritalStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaritalStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaritalStatuses.
     */
    distinct?: MaritalStatusScalarFieldEnum | MaritalStatusScalarFieldEnum[]
  }

  /**
   * MaritalStatus findFirstOrThrow
   */
  export type MaritalStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * Filter, which MaritalStatus to fetch.
     */
    where?: MaritalStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaritalStatuses to fetch.
     */
    orderBy?: MaritalStatusOrderByWithRelationInput | MaritalStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaritalStatuses.
     */
    cursor?: MaritalStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaritalStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaritalStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaritalStatuses.
     */
    distinct?: MaritalStatusScalarFieldEnum | MaritalStatusScalarFieldEnum[]
  }

  /**
   * MaritalStatus findMany
   */
  export type MaritalStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * Filter, which MaritalStatuses to fetch.
     */
    where?: MaritalStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaritalStatuses to fetch.
     */
    orderBy?: MaritalStatusOrderByWithRelationInput | MaritalStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaritalStatuses.
     */
    cursor?: MaritalStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaritalStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaritalStatuses.
     */
    skip?: number
    distinct?: MaritalStatusScalarFieldEnum | MaritalStatusScalarFieldEnum[]
  }

  /**
   * MaritalStatus create
   */
  export type MaritalStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a MaritalStatus.
     */
    data: XOR<MaritalStatusCreateInput, MaritalStatusUncheckedCreateInput>
  }

  /**
   * MaritalStatus createMany
   */
  export type MaritalStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaritalStatuses.
     */
    data: MaritalStatusCreateManyInput | MaritalStatusCreateManyInput[]
  }

  /**
   * MaritalStatus update
   */
  export type MaritalStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a MaritalStatus.
     */
    data: XOR<MaritalStatusUpdateInput, MaritalStatusUncheckedUpdateInput>
    /**
     * Choose, which MaritalStatus to update.
     */
    where: MaritalStatusWhereUniqueInput
  }

  /**
   * MaritalStatus updateMany
   */
  export type MaritalStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaritalStatuses.
     */
    data: XOR<MaritalStatusUpdateManyMutationInput, MaritalStatusUncheckedUpdateManyInput>
    /**
     * Filter which MaritalStatuses to update
     */
    where?: MaritalStatusWhereInput
    /**
     * Limit how many MaritalStatuses to update.
     */
    limit?: number
  }

  /**
   * MaritalStatus upsert
   */
  export type MaritalStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the MaritalStatus to update in case it exists.
     */
    where: MaritalStatusWhereUniqueInput
    /**
     * In case the MaritalStatus found by the `where` argument doesn't exist, create a new MaritalStatus with this data.
     */
    create: XOR<MaritalStatusCreateInput, MaritalStatusUncheckedCreateInput>
    /**
     * In case the MaritalStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaritalStatusUpdateInput, MaritalStatusUncheckedUpdateInput>
  }

  /**
   * MaritalStatus delete
   */
  export type MaritalStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    /**
     * Filter which MaritalStatus to delete.
     */
    where: MaritalStatusWhereUniqueInput
  }

  /**
   * MaritalStatus deleteMany
   */
  export type MaritalStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaritalStatuses to delete
     */
    where?: MaritalStatusWhereInput
    /**
     * Limit how many MaritalStatuses to delete.
     */
    limit?: number
  }

  /**
   * MaritalStatus findRaw
   */
  export type MaritalStatusFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MaritalStatus aggregateRaw
   */
  export type MaritalStatusAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MaritalStatus.users
   */
  export type MaritalStatus$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * MaritalStatus without action
   */
  export type MaritalStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
  }


  /**
   * Model Entity
   */

  export type AggregateEntity = {
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  export type EntityMinAggregateOutputType = {
    id: string | null
    entityName: string | null
  }

  export type EntityMaxAggregateOutputType = {
    id: string | null
    entityName: string | null
  }

  export type EntityCountAggregateOutputType = {
    id: number
    entityName: number
    _all: number
  }


  export type EntityMinAggregateInputType = {
    id?: true
    entityName?: true
  }

  export type EntityMaxAggregateInputType = {
    id?: true
    entityName?: true
  }

  export type EntityCountAggregateInputType = {
    id?: true
    entityName?: true
    _all?: true
  }

  export type EntityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entity to aggregate.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entities
    **/
    _count?: true | EntityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntityMaxAggregateInputType
  }

  export type GetEntityAggregateType<T extends EntityAggregateArgs> = {
        [P in keyof T & keyof AggregateEntity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntity[P]>
      : GetScalarType<T[P], AggregateEntity[P]>
  }




  export type EntityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithAggregationInput | EntityOrderByWithAggregationInput[]
    by: EntityScalarFieldEnum[] | EntityScalarFieldEnum
    having?: EntityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntityCountAggregateInputType | true
    _min?: EntityMinAggregateInputType
    _max?: EntityMaxAggregateInputType
  }

  export type EntityGroupByOutputType = {
    id: string
    entityName: string
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  type GetEntityGroupByPayload<T extends EntityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntityGroupByOutputType[P]>
            : GetScalarType<T[P], EntityGroupByOutputType[P]>
        }
      >
    >


  export type EntitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityName?: boolean
    users?: boolean | Entity$usersArgs<ExtArgs>
    _count?: boolean | EntityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entity"]>



  export type EntitySelectScalar = {
    id?: boolean
    entityName?: boolean
  }

  export type EntityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityName", ExtArgs["result"]["entity"]>
  export type EntityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Entity$usersArgs<ExtArgs>
    _count?: boolean | EntityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EntityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entity"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityName: string
    }, ExtArgs["result"]["entity"]>
    composites: {}
  }

  type EntityGetPayload<S extends boolean | null | undefined | EntityDefaultArgs> = $Result.GetResult<Prisma.$EntityPayload, S>

  type EntityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EntityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EntityCountAggregateInputType | true
    }

  export interface EntityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entity'], meta: { name: 'Entity' } }
    /**
     * Find zero or one Entity that matches the filter.
     * @param {EntityFindUniqueArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EntityFindUniqueArgs>(args: SelectSubset<T, EntityFindUniqueArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Entity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EntityFindUniqueOrThrowArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EntityFindUniqueOrThrowArgs>(args: SelectSubset<T, EntityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Entity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EntityFindFirstArgs>(args?: SelectSubset<T, EntityFindFirstArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Entity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstOrThrowArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EntityFindFirstOrThrowArgs>(args?: SelectSubset<T, EntityFindFirstOrThrowArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Entities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entities
     * const entities = await prisma.entity.findMany()
     * 
     * // Get first 10 Entities
     * const entities = await prisma.entity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entityWithIdOnly = await prisma.entity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EntityFindManyArgs>(args?: SelectSubset<T, EntityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Entity.
     * @param {EntityCreateArgs} args - Arguments to create a Entity.
     * @example
     * // Create one Entity
     * const Entity = await prisma.entity.create({
     *   data: {
     *     // ... data to create a Entity
     *   }
     * })
     * 
     */
    create<T extends EntityCreateArgs>(args: SelectSubset<T, EntityCreateArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Entities.
     * @param {EntityCreateManyArgs} args - Arguments to create many Entities.
     * @example
     * // Create many Entities
     * const entity = await prisma.entity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EntityCreateManyArgs>(args?: SelectSubset<T, EntityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entity.
     * @param {EntityDeleteArgs} args - Arguments to delete one Entity.
     * @example
     * // Delete one Entity
     * const Entity = await prisma.entity.delete({
     *   where: {
     *     // ... filter to delete one Entity
     *   }
     * })
     * 
     */
    delete<T extends EntityDeleteArgs>(args: SelectSubset<T, EntityDeleteArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Entity.
     * @param {EntityUpdateArgs} args - Arguments to update one Entity.
     * @example
     * // Update one Entity
     * const entity = await prisma.entity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EntityUpdateArgs>(args: SelectSubset<T, EntityUpdateArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Entities.
     * @param {EntityDeleteManyArgs} args - Arguments to filter Entities to delete.
     * @example
     * // Delete a few Entities
     * const { count } = await prisma.entity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EntityDeleteManyArgs>(args?: SelectSubset<T, EntityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entities
     * const entity = await prisma.entity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EntityUpdateManyArgs>(args: SelectSubset<T, EntityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entity.
     * @param {EntityUpsertArgs} args - Arguments to update or create a Entity.
     * @example
     * // Update or create a Entity
     * const entity = await prisma.entity.upsert({
     *   create: {
     *     // ... data to create a Entity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entity we want to update
     *   }
     * })
     */
    upsert<T extends EntityUpsertArgs>(args: SelectSubset<T, EntityUpsertArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Entities that matches the filter.
     * @param {EntityFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const entity = await prisma.entity.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: EntityFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Entity.
     * @param {EntityAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const entity = await prisma.entity.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: EntityAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityCountArgs} args - Arguments to filter Entities to count.
     * @example
     * // Count the number of Entities
     * const count = await prisma.entity.count({
     *   where: {
     *     // ... the filter for the Entities we want to count
     *   }
     * })
    **/
    count<T extends EntityCountArgs>(
      args?: Subset<T, EntityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntityAggregateArgs>(args: Subset<T, EntityAggregateArgs>): Prisma.PrismaPromise<GetEntityAggregateType<T>>

    /**
     * Group by Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntityGroupByArgs['orderBy'] }
        : { orderBy?: EntityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entity model
   */
  readonly fields: EntityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Entity$usersArgs<ExtArgs> = {}>(args?: Subset<T, Entity$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Entity model
   */
  interface EntityFieldRefs {
    readonly id: FieldRef<"Entity", 'String'>
    readonly entityName: FieldRef<"Entity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Entity findUnique
   */
  export type EntityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity findUniqueOrThrow
   */
  export type EntityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity findFirst
   */
  export type EntityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     */
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity findFirstOrThrow
   */
  export type EntityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     */
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity findMany
   */
  export type EntityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entities to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity create
   */
  export type EntityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The data needed to create a Entity.
     */
    data: XOR<EntityCreateInput, EntityUncheckedCreateInput>
  }

  /**
   * Entity createMany
   */
  export type EntityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entities.
     */
    data: EntityCreateManyInput | EntityCreateManyInput[]
  }

  /**
   * Entity update
   */
  export type EntityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The data needed to update a Entity.
     */
    data: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
    /**
     * Choose, which Entity to update.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity updateMany
   */
  export type EntityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entities.
     */
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyInput>
    /**
     * Filter which Entities to update
     */
    where?: EntityWhereInput
    /**
     * Limit how many Entities to update.
     */
    limit?: number
  }

  /**
   * Entity upsert
   */
  export type EntityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The filter to search for the Entity to update in case it exists.
     */
    where: EntityWhereUniqueInput
    /**
     * In case the Entity found by the `where` argument doesn't exist, create a new Entity with this data.
     */
    create: XOR<EntityCreateInput, EntityUncheckedCreateInput>
    /**
     * In case the Entity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
  }

  /**
   * Entity delete
   */
  export type EntityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter which Entity to delete.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity deleteMany
   */
  export type EntityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entities to delete
     */
    where?: EntityWhereInput
    /**
     * Limit how many Entities to delete.
     */
    limit?: number
  }

  /**
   * Entity findRaw
   */
  export type EntityFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Entity aggregateRaw
   */
  export type EntityAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Entity.users
   */
  export type Entity$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Entity without action
   */
  export type EntityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
  }


  /**
   * Model Budget
   */

  export type AggregateBudget = {
    _count: BudgetCountAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  export type BudgetMinAggregateOutputType = {
    id: string | null
    budgetName: string | null
  }

  export type BudgetMaxAggregateOutputType = {
    id: string | null
    budgetName: string | null
  }

  export type BudgetCountAggregateOutputType = {
    id: number
    budgetName: number
    _all: number
  }


  export type BudgetMinAggregateInputType = {
    id?: true
    budgetName?: true
  }

  export type BudgetMaxAggregateInputType = {
    id?: true
    budgetName?: true
  }

  export type BudgetCountAggregateInputType = {
    id?: true
    budgetName?: true
    _all?: true
  }

  export type BudgetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budget to aggregate.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Budgets
    **/
    _count?: true | BudgetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetMaxAggregateInputType
  }

  export type GetBudgetAggregateType<T extends BudgetAggregateArgs> = {
        [P in keyof T & keyof AggregateBudget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudget[P]>
      : GetScalarType<T[P], AggregateBudget[P]>
  }




  export type BudgetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetWhereInput
    orderBy?: BudgetOrderByWithAggregationInput | BudgetOrderByWithAggregationInput[]
    by: BudgetScalarFieldEnum[] | BudgetScalarFieldEnum
    having?: BudgetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetCountAggregateInputType | true
    _min?: BudgetMinAggregateInputType
    _max?: BudgetMaxAggregateInputType
  }

  export type BudgetGroupByOutputType = {
    id: string
    budgetName: string
    _count: BudgetCountAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  type GetBudgetGroupByPayload<T extends BudgetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetGroupByOutputType[P]>
        }
      >
    >


  export type BudgetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    budgetName?: boolean
    users?: boolean | Budget$usersArgs<ExtArgs>
    _count?: boolean | BudgetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budget"]>



  export type BudgetSelectScalar = {
    id?: boolean
    budgetName?: boolean
  }

  export type BudgetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "budgetName", ExtArgs["result"]["budget"]>
  export type BudgetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Budget$usersArgs<ExtArgs>
    _count?: boolean | BudgetCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BudgetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Budget"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      budgetName: string
    }, ExtArgs["result"]["budget"]>
    composites: {}
  }

  type BudgetGetPayload<S extends boolean | null | undefined | BudgetDefaultArgs> = $Result.GetResult<Prisma.$BudgetPayload, S>

  type BudgetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BudgetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BudgetCountAggregateInputType | true
    }

  export interface BudgetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Budget'], meta: { name: 'Budget' } }
    /**
     * Find zero or one Budget that matches the filter.
     * @param {BudgetFindUniqueArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetFindUniqueArgs>(args: SelectSubset<T, BudgetFindUniqueArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Budget that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BudgetFindUniqueOrThrowArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetFindFirstArgs>(args?: SelectSubset<T, BudgetFindFirstArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstOrThrowArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Budgets
     * const budgets = await prisma.budget.findMany()
     * 
     * // Get first 10 Budgets
     * const budgets = await prisma.budget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetWithIdOnly = await prisma.budget.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetFindManyArgs>(args?: SelectSubset<T, BudgetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Budget.
     * @param {BudgetCreateArgs} args - Arguments to create a Budget.
     * @example
     * // Create one Budget
     * const Budget = await prisma.budget.create({
     *   data: {
     *     // ... data to create a Budget
     *   }
     * })
     * 
     */
    create<T extends BudgetCreateArgs>(args: SelectSubset<T, BudgetCreateArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Budgets.
     * @param {BudgetCreateManyArgs} args - Arguments to create many Budgets.
     * @example
     * // Create many Budgets
     * const budget = await prisma.budget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetCreateManyArgs>(args?: SelectSubset<T, BudgetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Budget.
     * @param {BudgetDeleteArgs} args - Arguments to delete one Budget.
     * @example
     * // Delete one Budget
     * const Budget = await prisma.budget.delete({
     *   where: {
     *     // ... filter to delete one Budget
     *   }
     * })
     * 
     */
    delete<T extends BudgetDeleteArgs>(args: SelectSubset<T, BudgetDeleteArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Budget.
     * @param {BudgetUpdateArgs} args - Arguments to update one Budget.
     * @example
     * // Update one Budget
     * const budget = await prisma.budget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetUpdateArgs>(args: SelectSubset<T, BudgetUpdateArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Budgets.
     * @param {BudgetDeleteManyArgs} args - Arguments to filter Budgets to delete.
     * @example
     * // Delete a few Budgets
     * const { count } = await prisma.budget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetDeleteManyArgs>(args?: SelectSubset<T, BudgetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Budgets
     * const budget = await prisma.budget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetUpdateManyArgs>(args: SelectSubset<T, BudgetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Budget.
     * @param {BudgetUpsertArgs} args - Arguments to update or create a Budget.
     * @example
     * // Update or create a Budget
     * const budget = await prisma.budget.upsert({
     *   create: {
     *     // ... data to create a Budget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Budget we want to update
     *   }
     * })
     */
    upsert<T extends BudgetUpsertArgs>(args: SelectSubset<T, BudgetUpsertArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * @param {BudgetFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const budget = await prisma.budget.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: BudgetFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Budget.
     * @param {BudgetAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const budget = await prisma.budget.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: BudgetAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCountArgs} args - Arguments to filter Budgets to count.
     * @example
     * // Count the number of Budgets
     * const count = await prisma.budget.count({
     *   where: {
     *     // ... the filter for the Budgets we want to count
     *   }
     * })
    **/
    count<T extends BudgetCountArgs>(
      args?: Subset<T, BudgetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetAggregateArgs>(args: Subset<T, BudgetAggregateArgs>): Prisma.PrismaPromise<GetBudgetAggregateType<T>>

    /**
     * Group by Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetGroupByArgs['orderBy'] }
        : { orderBy?: BudgetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Budget model
   */
  readonly fields: BudgetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Budget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Budget$usersArgs<ExtArgs> = {}>(args?: Subset<T, Budget$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Budget model
   */
  interface BudgetFieldRefs {
    readonly id: FieldRef<"Budget", 'String'>
    readonly budgetName: FieldRef<"Budget", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Budget findUnique
   */
  export type BudgetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget findUniqueOrThrow
   */
  export type BudgetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget findFirst
   */
  export type BudgetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget findFirstOrThrow
   */
  export type BudgetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget findMany
   */
  export type BudgetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget create
   */
  export type BudgetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The data needed to create a Budget.
     */
    data: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
  }

  /**
   * Budget createMany
   */
  export type BudgetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Budgets.
     */
    data: BudgetCreateManyInput | BudgetCreateManyInput[]
  }

  /**
   * Budget update
   */
  export type BudgetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The data needed to update a Budget.
     */
    data: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
    /**
     * Choose, which Budget to update.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget updateMany
   */
  export type BudgetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Budgets.
     */
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyInput>
    /**
     * Filter which Budgets to update
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to update.
     */
    limit?: number
  }

  /**
   * Budget upsert
   */
  export type BudgetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The filter to search for the Budget to update in case it exists.
     */
    where: BudgetWhereUniqueInput
    /**
     * In case the Budget found by the `where` argument doesn't exist, create a new Budget with this data.
     */
    create: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
    /**
     * In case the Budget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
  }

  /**
   * Budget delete
   */
  export type BudgetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter which Budget to delete.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget deleteMany
   */
  export type BudgetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budgets to delete
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to delete.
     */
    limit?: number
  }

  /**
   * Budget findRaw
   */
  export type BudgetFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Budget aggregateRaw
   */
  export type BudgetAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Budget.users
   */
  export type Budget$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Budget without action
   */
  export type BudgetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
  }


  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusMinAggregateOutputType = {
    id: string | null
    statusName: string | null
  }

  export type StatusMaxAggregateOutputType = {
    id: string | null
    statusName: string | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    statusName: number
    _all: number
  }


  export type StatusMinAggregateInputType = {
    id?: true
    statusName?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    statusName?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    statusName?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: string
    statusName: string
    _count: StatusCountAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusName?: boolean
    users?: boolean | Status$usersArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>



  export type StatusSelectScalar = {
    id?: boolean
    statusName?: boolean
  }

  export type StatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statusName", ExtArgs["result"]["status"]>
  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Status$usersArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      statusName: string
    }, ExtArgs["result"]["status"]>
    composites: {}
  }

  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusFindUniqueArgs>(args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Status that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusFindFirstArgs>(args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusFindManyArgs>(args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
     */
    create<T extends StatusCreateArgs>(args: SelectSubset<T, StatusCreateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Statuses.
     * @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusCreateManyArgs>(args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
     */
    delete<T extends StatusDeleteArgs>(args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusUpdateArgs>(args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusDeleteManyArgs>(args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusUpdateManyArgs>(args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
     */
    upsert<T extends StatusUpsertArgs>(args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Statuses that matches the filter.
     * @param {StatusFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const status = await prisma.status.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: StatusFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Status.
     * @param {StatusAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const status = await prisma.status.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: StatusAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Status$usersArgs<ExtArgs> = {}>(args?: Subset<T, Status$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Status model
   */
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'String'>
    readonly statusName: FieldRef<"Status", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }

  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
  }

  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to update.
     */
    limit?: number
  }

  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }

  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to delete.
     */
    limit?: number
  }

  /**
   * Status findRaw
   */
  export type StatusFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Status aggregateRaw
   */
  export type StatusAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Status.users
   */
  export type Status$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
  }


  /**
   * Model Auth
   */

  export type AggregateAuth = {
    _count: AuthCountAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  export type AuthMinAggregateOutputType = {
    id: string | null
    employeeCode: string | null
    userId: string | null
    token: string | null
    refreshToken: string | null
    tokenExpiry: Date | null
  }

  export type AuthMaxAggregateOutputType = {
    id: string | null
    employeeCode: string | null
    userId: string | null
    token: string | null
    refreshToken: string | null
    tokenExpiry: Date | null
  }

  export type AuthCountAggregateOutputType = {
    id: number
    employeeCode: number
    userId: number
    token: number
    refreshToken: number
    tokenExpiry: number
    _all: number
  }


  export type AuthMinAggregateInputType = {
    id?: true
    employeeCode?: true
    userId?: true
    token?: true
    refreshToken?: true
    tokenExpiry?: true
  }

  export type AuthMaxAggregateInputType = {
    id?: true
    employeeCode?: true
    userId?: true
    token?: true
    refreshToken?: true
    tokenExpiry?: true
  }

  export type AuthCountAggregateInputType = {
    id?: true
    employeeCode?: true
    userId?: true
    token?: true
    refreshToken?: true
    tokenExpiry?: true
    _all?: true
  }

  export type AuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auth to aggregate.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auths
    **/
    _count?: true | AuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthMaxAggregateInputType
  }

  export type GetAuthAggregateType<T extends AuthAggregateArgs> = {
        [P in keyof T & keyof AggregateAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuth[P]>
      : GetScalarType<T[P], AggregateAuth[P]>
  }




  export type AuthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthWhereInput
    orderBy?: AuthOrderByWithAggregationInput | AuthOrderByWithAggregationInput[]
    by: AuthScalarFieldEnum[] | AuthScalarFieldEnum
    having?: AuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthCountAggregateInputType | true
    _min?: AuthMinAggregateInputType
    _max?: AuthMaxAggregateInputType
  }

  export type AuthGroupByOutputType = {
    id: string
    employeeCode: string
    userId: string | null
    token: string | null
    refreshToken: string | null
    tokenExpiry: Date | null
    _count: AuthCountAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  type GetAuthGroupByPayload<T extends AuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthGroupByOutputType[P]>
            : GetScalarType<T[P], AuthGroupByOutputType[P]>
        }
      >
    >


  export type AuthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeCode?: boolean
    userId?: boolean
    token?: boolean
    refreshToken?: boolean
    tokenExpiry?: boolean
    user?: boolean | Auth$userArgs<ExtArgs>
  }, ExtArgs["result"]["auth"]>



  export type AuthSelectScalar = {
    id?: boolean
    employeeCode?: boolean
    userId?: boolean
    token?: boolean
    refreshToken?: boolean
    tokenExpiry?: boolean
  }

  export type AuthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeCode" | "userId" | "token" | "refreshToken" | "tokenExpiry", ExtArgs["result"]["auth"]>
  export type AuthInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Auth$userArgs<ExtArgs>
  }

  export type $AuthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auth"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeCode: string
      userId: string | null
      token: string | null
      refreshToken: string | null
      tokenExpiry: Date | null
    }, ExtArgs["result"]["auth"]>
    composites: {}
  }

  type AuthGetPayload<S extends boolean | null | undefined | AuthDefaultArgs> = $Result.GetResult<Prisma.$AuthPayload, S>

  type AuthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthCountAggregateInputType | true
    }

  export interface AuthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auth'], meta: { name: 'Auth' } }
    /**
     * Find zero or one Auth that matches the filter.
     * @param {AuthFindUniqueArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthFindUniqueArgs>(args: SelectSubset<T, AuthFindUniqueArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Auth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthFindUniqueOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindFirstArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthFindFirstArgs>(args?: SelectSubset<T, AuthFindFirstArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindFirstOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auths
     * const auths = await prisma.auth.findMany()
     * 
     * // Get first 10 Auths
     * const auths = await prisma.auth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authWithIdOnly = await prisma.auth.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthFindManyArgs>(args?: SelectSubset<T, AuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Auth.
     * @param {AuthCreateArgs} args - Arguments to create a Auth.
     * @example
     * // Create one Auth
     * const Auth = await prisma.auth.create({
     *   data: {
     *     // ... data to create a Auth
     *   }
     * })
     * 
     */
    create<T extends AuthCreateArgs>(args: SelectSubset<T, AuthCreateArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Auths.
     * @param {AuthCreateManyArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auth = await prisma.auth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthCreateManyArgs>(args?: SelectSubset<T, AuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Auth.
     * @param {AuthDeleteArgs} args - Arguments to delete one Auth.
     * @example
     * // Delete one Auth
     * const Auth = await prisma.auth.delete({
     *   where: {
     *     // ... filter to delete one Auth
     *   }
     * })
     * 
     */
    delete<T extends AuthDeleteArgs>(args: SelectSubset<T, AuthDeleteArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Auth.
     * @param {AuthUpdateArgs} args - Arguments to update one Auth.
     * @example
     * // Update one Auth
     * const auth = await prisma.auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthUpdateArgs>(args: SelectSubset<T, AuthUpdateArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Auths.
     * @param {AuthDeleteManyArgs} args - Arguments to filter Auths to delete.
     * @example
     * // Delete a few Auths
     * const { count } = await prisma.auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthDeleteManyArgs>(args?: SelectSubset<T, AuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auths
     * const auth = await prisma.auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthUpdateManyArgs>(args: SelectSubset<T, AuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auth.
     * @param {AuthUpsertArgs} args - Arguments to update or create a Auth.
     * @example
     * // Update or create a Auth
     * const auth = await prisma.auth.upsert({
     *   create: {
     *     // ... data to create a Auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auth we want to update
     *   }
     * })
     */
    upsert<T extends AuthUpsertArgs>(args: SelectSubset<T, AuthUpsertArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auths that matches the filter.
     * @param {AuthFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const auth = await prisma.auth.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AuthFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Auth.
     * @param {AuthAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const auth = await prisma.auth.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AuthAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthCountArgs} args - Arguments to filter Auths to count.
     * @example
     * // Count the number of Auths
     * const count = await prisma.auth.count({
     *   where: {
     *     // ... the filter for the Auths we want to count
     *   }
     * })
    **/
    count<T extends AuthCountArgs>(
      args?: Subset<T, AuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthAggregateArgs>(args: Subset<T, AuthAggregateArgs>): Prisma.PrismaPromise<GetAuthAggregateType<T>>

    /**
     * Group by Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthGroupByArgs['orderBy'] }
        : { orderBy?: AuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auth model
   */
  readonly fields: AuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Auth$userArgs<ExtArgs> = {}>(args?: Subset<T, Auth$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auth model
   */
  interface AuthFieldRefs {
    readonly id: FieldRef<"Auth", 'String'>
    readonly employeeCode: FieldRef<"Auth", 'String'>
    readonly userId: FieldRef<"Auth", 'String'>
    readonly token: FieldRef<"Auth", 'String'>
    readonly refreshToken: FieldRef<"Auth", 'String'>
    readonly tokenExpiry: FieldRef<"Auth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Auth findUnique
   */
  export type AuthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth findUniqueOrThrow
   */
  export type AuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth findFirst
   */
  export type AuthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * Auth findFirstOrThrow
   */
  export type AuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * Auth findMany
   */
  export type AuthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * Auth create
   */
  export type AuthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * The data needed to create a Auth.
     */
    data: XOR<AuthCreateInput, AuthUncheckedCreateInput>
  }

  /**
   * Auth createMany
   */
  export type AuthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auths.
     */
    data: AuthCreateManyInput | AuthCreateManyInput[]
  }

  /**
   * Auth update
   */
  export type AuthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * The data needed to update a Auth.
     */
    data: XOR<AuthUpdateInput, AuthUncheckedUpdateInput>
    /**
     * Choose, which Auth to update.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth updateMany
   */
  export type AuthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auths.
     */
    data: XOR<AuthUpdateManyMutationInput, AuthUncheckedUpdateManyInput>
    /**
     * Filter which Auths to update
     */
    where?: AuthWhereInput
    /**
     * Limit how many Auths to update.
     */
    limit?: number
  }

  /**
   * Auth upsert
   */
  export type AuthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * The filter to search for the Auth to update in case it exists.
     */
    where: AuthWhereUniqueInput
    /**
     * In case the Auth found by the `where` argument doesn't exist, create a new Auth with this data.
     */
    create: XOR<AuthCreateInput, AuthUncheckedCreateInput>
    /**
     * In case the Auth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthUpdateInput, AuthUncheckedUpdateInput>
  }

  /**
   * Auth delete
   */
  export type AuthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    /**
     * Filter which Auth to delete.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth deleteMany
   */
  export type AuthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auths to delete
     */
    where?: AuthWhereInput
    /**
     * Limit how many Auths to delete.
     */
    limit?: number
  }

  /**
   * Auth findRaw
   */
  export type AuthFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Auth aggregateRaw
   */
  export type AuthAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Auth.user
   */
  export type Auth$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Auth without action
   */
  export type AuthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    sourceId: number | null
  }

  export type UserSumAggregateOutputType = {
    sourceId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    employeeCode: string | null
    employeeCategory: string | null
    registerName: string | null
    statusId: string | null
    expectedStartDate: Date | null
    actualStartDate: Date | null
    probationEndDate: Date | null
    terminationDate: Date | null
    terminationReason: string | null
    resignationType: string | null
    dateOfBirth: Date | null
    idName: string | null
    idNameAr: string | null
    firstName: string | null
    lastName: string | null
    firstNameAr: string | null
    lastNameAr: string | null
    organizationId: string | null
    entityId: string | null
    budgetId: string | null
    departmentId: string | null
    divisionId: string | null
    unitId: string | null
    positionId: string | null
    gradeId: string | null
    locationId: string | null
    directManagerCode: string | null
    directManagerName: string | null
    managerId: string | null
    contractTypeId: string | null
    nationalityId: string | null
    genderId: string | null
    maritalStatusId: string | null
    email: string | null
    password: string | null
    personalPhoneNumber1: string | null
    corporatePhoneNumber: string | null
    idNumber: string | null
    idPlaceOfIssue: string | null
    idAddress: string | null
    idAddressAr: string | null
    idZoneOfResidence: string | null
    placeOfBirth: string | null
    companyId: string | null
    cleared: string | null
    disabilityType: string | null
    sourceId: number | null
    insertionDate: Date | null
    updateDate: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    employeeCode: string | null
    employeeCategory: string | null
    registerName: string | null
    statusId: string | null
    expectedStartDate: Date | null
    actualStartDate: Date | null
    probationEndDate: Date | null
    terminationDate: Date | null
    terminationReason: string | null
    resignationType: string | null
    dateOfBirth: Date | null
    idName: string | null
    idNameAr: string | null
    firstName: string | null
    lastName: string | null
    firstNameAr: string | null
    lastNameAr: string | null
    organizationId: string | null
    entityId: string | null
    budgetId: string | null
    departmentId: string | null
    divisionId: string | null
    unitId: string | null
    positionId: string | null
    gradeId: string | null
    locationId: string | null
    directManagerCode: string | null
    directManagerName: string | null
    managerId: string | null
    contractTypeId: string | null
    nationalityId: string | null
    genderId: string | null
    maritalStatusId: string | null
    email: string | null
    password: string | null
    personalPhoneNumber1: string | null
    corporatePhoneNumber: string | null
    idNumber: string | null
    idPlaceOfIssue: string | null
    idAddress: string | null
    idAddressAr: string | null
    idZoneOfResidence: string | null
    placeOfBirth: string | null
    companyId: string | null
    cleared: string | null
    disabilityType: string | null
    sourceId: number | null
    insertionDate: Date | null
    updateDate: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    employeeCode: number
    employeeCategory: number
    registerName: number
    statusId: number
    expectedStartDate: number
    actualStartDate: number
    probationEndDate: number
    terminationDate: number
    terminationReason: number
    resignationType: number
    dateOfBirth: number
    idName: number
    idNameAr: number
    firstName: number
    lastName: number
    firstNameAr: number
    lastNameAr: number
    organizationId: number
    entityId: number
    budgetId: number
    departmentId: number
    divisionId: number
    unitId: number
    positionId: number
    gradeId: number
    locationId: number
    directManagerCode: number
    directManagerName: number
    managerId: number
    contractTypeId: number
    nationalityId: number
    genderId: number
    maritalStatusId: number
    email: number
    password: number
    personalPhoneNumber1: number
    corporatePhoneNumber: number
    idNumber: number
    idPlaceOfIssue: number
    idAddress: number
    idAddressAr: number
    idZoneOfResidence: number
    placeOfBirth: number
    companyId: number
    cleared: number
    disabilityType: number
    sourceId: number
    insertionDate: number
    updateDate: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    sourceId?: true
  }

  export type UserSumAggregateInputType = {
    sourceId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    employeeCode?: true
    employeeCategory?: true
    registerName?: true
    statusId?: true
    expectedStartDate?: true
    actualStartDate?: true
    probationEndDate?: true
    terminationDate?: true
    terminationReason?: true
    resignationType?: true
    dateOfBirth?: true
    idName?: true
    idNameAr?: true
    firstName?: true
    lastName?: true
    firstNameAr?: true
    lastNameAr?: true
    organizationId?: true
    entityId?: true
    budgetId?: true
    departmentId?: true
    divisionId?: true
    unitId?: true
    positionId?: true
    gradeId?: true
    locationId?: true
    directManagerCode?: true
    directManagerName?: true
    managerId?: true
    contractTypeId?: true
    nationalityId?: true
    genderId?: true
    maritalStatusId?: true
    email?: true
    password?: true
    personalPhoneNumber1?: true
    corporatePhoneNumber?: true
    idNumber?: true
    idPlaceOfIssue?: true
    idAddress?: true
    idAddressAr?: true
    idZoneOfResidence?: true
    placeOfBirth?: true
    companyId?: true
    cleared?: true
    disabilityType?: true
    sourceId?: true
    insertionDate?: true
    updateDate?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    employeeCode?: true
    employeeCategory?: true
    registerName?: true
    statusId?: true
    expectedStartDate?: true
    actualStartDate?: true
    probationEndDate?: true
    terminationDate?: true
    terminationReason?: true
    resignationType?: true
    dateOfBirth?: true
    idName?: true
    idNameAr?: true
    firstName?: true
    lastName?: true
    firstNameAr?: true
    lastNameAr?: true
    organizationId?: true
    entityId?: true
    budgetId?: true
    departmentId?: true
    divisionId?: true
    unitId?: true
    positionId?: true
    gradeId?: true
    locationId?: true
    directManagerCode?: true
    directManagerName?: true
    managerId?: true
    contractTypeId?: true
    nationalityId?: true
    genderId?: true
    maritalStatusId?: true
    email?: true
    password?: true
    personalPhoneNumber1?: true
    corporatePhoneNumber?: true
    idNumber?: true
    idPlaceOfIssue?: true
    idAddress?: true
    idAddressAr?: true
    idZoneOfResidence?: true
    placeOfBirth?: true
    companyId?: true
    cleared?: true
    disabilityType?: true
    sourceId?: true
    insertionDate?: true
    updateDate?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    employeeCode?: true
    employeeCategory?: true
    registerName?: true
    statusId?: true
    expectedStartDate?: true
    actualStartDate?: true
    probationEndDate?: true
    terminationDate?: true
    terminationReason?: true
    resignationType?: true
    dateOfBirth?: true
    idName?: true
    idNameAr?: true
    firstName?: true
    lastName?: true
    firstNameAr?: true
    lastNameAr?: true
    organizationId?: true
    entityId?: true
    budgetId?: true
    departmentId?: true
    divisionId?: true
    unitId?: true
    positionId?: true
    gradeId?: true
    locationId?: true
    directManagerCode?: true
    directManagerName?: true
    managerId?: true
    contractTypeId?: true
    nationalityId?: true
    genderId?: true
    maritalStatusId?: true
    email?: true
    password?: true
    personalPhoneNumber1?: true
    corporatePhoneNumber?: true
    idNumber?: true
    idPlaceOfIssue?: true
    idAddress?: true
    idAddressAr?: true
    idZoneOfResidence?: true
    placeOfBirth?: true
    companyId?: true
    cleared?: true
    disabilityType?: true
    sourceId?: true
    insertionDate?: true
    updateDate?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    employeeCode: string
    employeeCategory: string | null
    registerName: string | null
    statusId: string | null
    expectedStartDate: Date | null
    actualStartDate: Date | null
    probationEndDate: Date | null
    terminationDate: Date | null
    terminationReason: string | null
    resignationType: string | null
    dateOfBirth: Date | null
    idName: string | null
    idNameAr: string | null
    firstName: string | null
    lastName: string | null
    firstNameAr: string | null
    lastNameAr: string | null
    organizationId: string | null
    entityId: string | null
    budgetId: string | null
    departmentId: string | null
    divisionId: string | null
    unitId: string | null
    positionId: string | null
    gradeId: string | null
    locationId: string | null
    directManagerCode: string | null
    directManagerName: string | null
    managerId: string | null
    contractTypeId: string | null
    nationalityId: string | null
    genderId: string | null
    maritalStatusId: string | null
    email: string
    password: string | null
    personalPhoneNumber1: string | null
    corporatePhoneNumber: string | null
    idNumber: string | null
    idPlaceOfIssue: string | null
    idAddress: string | null
    idAddressAr: string | null
    idZoneOfResidence: string | null
    placeOfBirth: string | null
    companyId: string | null
    cleared: string | null
    disabilityType: string | null
    sourceId: number | null
    insertionDate: Date | null
    updateDate: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeCode?: boolean
    employeeCategory?: boolean
    registerName?: boolean
    statusId?: boolean
    expectedStartDate?: boolean
    actualStartDate?: boolean
    probationEndDate?: boolean
    terminationDate?: boolean
    terminationReason?: boolean
    resignationType?: boolean
    dateOfBirth?: boolean
    idName?: boolean
    idNameAr?: boolean
    firstName?: boolean
    lastName?: boolean
    firstNameAr?: boolean
    lastNameAr?: boolean
    organizationId?: boolean
    entityId?: boolean
    budgetId?: boolean
    departmentId?: boolean
    divisionId?: boolean
    unitId?: boolean
    positionId?: boolean
    gradeId?: boolean
    locationId?: boolean
    directManagerCode?: boolean
    directManagerName?: boolean
    managerId?: boolean
    contractTypeId?: boolean
    nationalityId?: boolean
    genderId?: boolean
    maritalStatusId?: boolean
    email?: boolean
    password?: boolean
    personalPhoneNumber1?: boolean
    corporatePhoneNumber?: boolean
    idNumber?: boolean
    idPlaceOfIssue?: boolean
    idAddress?: boolean
    idAddressAr?: boolean
    idZoneOfResidence?: boolean
    placeOfBirth?: boolean
    companyId?: boolean
    cleared?: boolean
    disabilityType?: boolean
    sourceId?: boolean
    insertionDate?: boolean
    updateDate?: boolean
    status?: boolean | User$statusArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    entity?: boolean | User$entityArgs<ExtArgs>
    budget?: boolean | User$budgetArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    division?: boolean | User$divisionArgs<ExtArgs>
    unit?: boolean | User$unitArgs<ExtArgs>
    position?: boolean | User$positionArgs<ExtArgs>
    grade?: boolean | User$gradeArgs<ExtArgs>
    location?: boolean | User$locationArgs<ExtArgs>
    managedBy?: boolean | User$managedByArgs<ExtArgs>
    manages?: boolean | User$managesArgs<ExtArgs>
    contractType?: boolean | User$contractTypeArgs<ExtArgs>
    nationality?: boolean | User$nationalityArgs<ExtArgs>
    gender?: boolean | User$genderArgs<ExtArgs>
    maritalStatus?: boolean | User$maritalStatusArgs<ExtArgs>
    auth?: boolean | User$authArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    employeeCode?: boolean
    employeeCategory?: boolean
    registerName?: boolean
    statusId?: boolean
    expectedStartDate?: boolean
    actualStartDate?: boolean
    probationEndDate?: boolean
    terminationDate?: boolean
    terminationReason?: boolean
    resignationType?: boolean
    dateOfBirth?: boolean
    idName?: boolean
    idNameAr?: boolean
    firstName?: boolean
    lastName?: boolean
    firstNameAr?: boolean
    lastNameAr?: boolean
    organizationId?: boolean
    entityId?: boolean
    budgetId?: boolean
    departmentId?: boolean
    divisionId?: boolean
    unitId?: boolean
    positionId?: boolean
    gradeId?: boolean
    locationId?: boolean
    directManagerCode?: boolean
    directManagerName?: boolean
    managerId?: boolean
    contractTypeId?: boolean
    nationalityId?: boolean
    genderId?: boolean
    maritalStatusId?: boolean
    email?: boolean
    password?: boolean
    personalPhoneNumber1?: boolean
    corporatePhoneNumber?: boolean
    idNumber?: boolean
    idPlaceOfIssue?: boolean
    idAddress?: boolean
    idAddressAr?: boolean
    idZoneOfResidence?: boolean
    placeOfBirth?: boolean
    companyId?: boolean
    cleared?: boolean
    disabilityType?: boolean
    sourceId?: boolean
    insertionDate?: boolean
    updateDate?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeCode" | "employeeCategory" | "registerName" | "statusId" | "expectedStartDate" | "actualStartDate" | "probationEndDate" | "terminationDate" | "terminationReason" | "resignationType" | "dateOfBirth" | "idName" | "idNameAr" | "firstName" | "lastName" | "firstNameAr" | "lastNameAr" | "organizationId" | "entityId" | "budgetId" | "departmentId" | "divisionId" | "unitId" | "positionId" | "gradeId" | "locationId" | "directManagerCode" | "directManagerName" | "managerId" | "contractTypeId" | "nationalityId" | "genderId" | "maritalStatusId" | "email" | "password" | "personalPhoneNumber1" | "corporatePhoneNumber" | "idNumber" | "idPlaceOfIssue" | "idAddress" | "idAddressAr" | "idZoneOfResidence" | "placeOfBirth" | "companyId" | "cleared" | "disabilityType" | "sourceId" | "insertionDate" | "updateDate", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | User$statusArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    entity?: boolean | User$entityArgs<ExtArgs>
    budget?: boolean | User$budgetArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    division?: boolean | User$divisionArgs<ExtArgs>
    unit?: boolean | User$unitArgs<ExtArgs>
    position?: boolean | User$positionArgs<ExtArgs>
    grade?: boolean | User$gradeArgs<ExtArgs>
    location?: boolean | User$locationArgs<ExtArgs>
    managedBy?: boolean | User$managedByArgs<ExtArgs>
    manages?: boolean | User$managesArgs<ExtArgs>
    contractType?: boolean | User$contractTypeArgs<ExtArgs>
    nationality?: boolean | User$nationalityArgs<ExtArgs>
    gender?: boolean | User$genderArgs<ExtArgs>
    maritalStatus?: boolean | User$maritalStatusArgs<ExtArgs>
    auth?: boolean | User$authArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      status: Prisma.$StatusPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      entity: Prisma.$EntityPayload<ExtArgs> | null
      budget: Prisma.$BudgetPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      division: Prisma.$DivisionPayload<ExtArgs> | null
      unit: Prisma.$UnitPayload<ExtArgs> | null
      position: Prisma.$PositionPayload<ExtArgs> | null
      grade: Prisma.$GradePayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs> | null
      managedBy: Prisma.$UserPayload<ExtArgs> | null
      manages: Prisma.$UserPayload<ExtArgs>[]
      contractType: Prisma.$ContractTypePayload<ExtArgs> | null
      nationality: Prisma.$NationalityPayload<ExtArgs> | null
      gender: Prisma.$GenderPayload<ExtArgs> | null
      maritalStatus: Prisma.$MaritalStatusPayload<ExtArgs> | null
      auth: Prisma.$AuthPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeCode: string
      employeeCategory: string | null
      registerName: string | null
      statusId: string | null
      expectedStartDate: Date | null
      actualStartDate: Date | null
      probationEndDate: Date | null
      terminationDate: Date | null
      terminationReason: string | null
      resignationType: string | null
      dateOfBirth: Date | null
      idName: string | null
      idNameAr: string | null
      firstName: string | null
      lastName: string | null
      firstNameAr: string | null
      lastNameAr: string | null
      organizationId: string | null
      entityId: string | null
      budgetId: string | null
      departmentId: string | null
      divisionId: string | null
      unitId: string | null
      positionId: string | null
      gradeId: string | null
      locationId: string | null
      directManagerCode: string | null
      directManagerName: string | null
      managerId: string | null
      contractTypeId: string | null
      nationalityId: string | null
      genderId: string | null
      maritalStatusId: string | null
      email: string
      password: string | null
      personalPhoneNumber1: string | null
      corporatePhoneNumber: string | null
      idNumber: string | null
      idPlaceOfIssue: string | null
      idAddress: string | null
      idAddressAr: string | null
      idZoneOfResidence: string | null
      placeOfBirth: string | null
      companyId: string | null
      cleared: string | null
      disabilityType: string | null
      sourceId: number | null
      insertionDate: Date | null
      updateDate: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    status<T extends User$statusArgs<ExtArgs> = {}>(args?: Subset<T, User$statusArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends User$organizationArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    entity<T extends User$entityArgs<ExtArgs> = {}>(args?: Subset<T, User$entityArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    budget<T extends User$budgetArgs<ExtArgs> = {}>(args?: Subset<T, User$budgetArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends User$departmentArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    division<T extends User$divisionArgs<ExtArgs> = {}>(args?: Subset<T, User$divisionArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    unit<T extends User$unitArgs<ExtArgs> = {}>(args?: Subset<T, User$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    position<T extends User$positionArgs<ExtArgs> = {}>(args?: Subset<T, User$positionArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    grade<T extends User$gradeArgs<ExtArgs> = {}>(args?: Subset<T, User$gradeArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    location<T extends User$locationArgs<ExtArgs> = {}>(args?: Subset<T, User$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    managedBy<T extends User$managedByArgs<ExtArgs> = {}>(args?: Subset<T, User$managedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    manages<T extends User$managesArgs<ExtArgs> = {}>(args?: Subset<T, User$managesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contractType<T extends User$contractTypeArgs<ExtArgs> = {}>(args?: Subset<T, User$contractTypeArgs<ExtArgs>>): Prisma__ContractTypeClient<$Result.GetResult<Prisma.$ContractTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    nationality<T extends User$nationalityArgs<ExtArgs> = {}>(args?: Subset<T, User$nationalityArgs<ExtArgs>>): Prisma__NationalityClient<$Result.GetResult<Prisma.$NationalityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    gender<T extends User$genderArgs<ExtArgs> = {}>(args?: Subset<T, User$genderArgs<ExtArgs>>): Prisma__GenderClient<$Result.GetResult<Prisma.$GenderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    maritalStatus<T extends User$maritalStatusArgs<ExtArgs> = {}>(args?: Subset<T, User$maritalStatusArgs<ExtArgs>>): Prisma__MaritalStatusClient<$Result.GetResult<Prisma.$MaritalStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    auth<T extends User$authArgs<ExtArgs> = {}>(args?: Subset<T, User$authArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly employeeCode: FieldRef<"User", 'String'>
    readonly employeeCategory: FieldRef<"User", 'String'>
    readonly registerName: FieldRef<"User", 'String'>
    readonly statusId: FieldRef<"User", 'String'>
    readonly expectedStartDate: FieldRef<"User", 'DateTime'>
    readonly actualStartDate: FieldRef<"User", 'DateTime'>
    readonly probationEndDate: FieldRef<"User", 'DateTime'>
    readonly terminationDate: FieldRef<"User", 'DateTime'>
    readonly terminationReason: FieldRef<"User", 'String'>
    readonly resignationType: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly idName: FieldRef<"User", 'String'>
    readonly idNameAr: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly firstNameAr: FieldRef<"User", 'String'>
    readonly lastNameAr: FieldRef<"User", 'String'>
    readonly organizationId: FieldRef<"User", 'String'>
    readonly entityId: FieldRef<"User", 'String'>
    readonly budgetId: FieldRef<"User", 'String'>
    readonly departmentId: FieldRef<"User", 'String'>
    readonly divisionId: FieldRef<"User", 'String'>
    readonly unitId: FieldRef<"User", 'String'>
    readonly positionId: FieldRef<"User", 'String'>
    readonly gradeId: FieldRef<"User", 'String'>
    readonly locationId: FieldRef<"User", 'String'>
    readonly directManagerCode: FieldRef<"User", 'String'>
    readonly directManagerName: FieldRef<"User", 'String'>
    readonly managerId: FieldRef<"User", 'String'>
    readonly contractTypeId: FieldRef<"User", 'String'>
    readonly nationalityId: FieldRef<"User", 'String'>
    readonly genderId: FieldRef<"User", 'String'>
    readonly maritalStatusId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly personalPhoneNumber1: FieldRef<"User", 'String'>
    readonly corporatePhoneNumber: FieldRef<"User", 'String'>
    readonly idNumber: FieldRef<"User", 'String'>
    readonly idPlaceOfIssue: FieldRef<"User", 'String'>
    readonly idAddress: FieldRef<"User", 'String'>
    readonly idAddressAr: FieldRef<"User", 'String'>
    readonly idZoneOfResidence: FieldRef<"User", 'String'>
    readonly placeOfBirth: FieldRef<"User", 'String'>
    readonly companyId: FieldRef<"User", 'String'>
    readonly cleared: FieldRef<"User", 'String'>
    readonly disabilityType: FieldRef<"User", 'String'>
    readonly sourceId: FieldRef<"User", 'Int'>
    readonly insertionDate: FieldRef<"User", 'DateTime'>
    readonly updateDate: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.status
   */
  export type User$statusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    where?: StatusWhereInput
  }

  /**
   * User.organization
   */
  export type User$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * User.entity
   */
  export type User$entityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
  }

  /**
   * User.budget
   */
  export type User$budgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    where?: BudgetWhereInput
  }

  /**
   * User.department
   */
  export type User$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.division
   */
  export type User$divisionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    where?: DivisionWhereInput
  }

  /**
   * User.unit
   */
  export type User$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * User.position
   */
  export type User$positionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
  }

  /**
   * User.grade
   */
  export type User$gradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
  }

  /**
   * User.location
   */
  export type User$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * User.managedBy
   */
  export type User$managedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.manages
   */
  export type User$managesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.contractType
   */
  export type User$contractTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractType
     */
    select?: ContractTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractType
     */
    omit?: ContractTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractTypeInclude<ExtArgs> | null
    where?: ContractTypeWhereInput
  }

  /**
   * User.nationality
   */
  export type User$nationalityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nationality
     */
    select?: NationalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nationality
     */
    omit?: NationalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NationalityInclude<ExtArgs> | null
    where?: NationalityWhereInput
  }

  /**
   * User.gender
   */
  export type User$genderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Gender
     */
    omit?: GenderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenderInclude<ExtArgs> | null
    where?: GenderWhereInput
  }

  /**
   * User.maritalStatus
   */
  export type User$maritalStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaritalStatus
     */
    select?: MaritalStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaritalStatus
     */
    omit?: MaritalStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaritalStatusInclude<ExtArgs> | null
    where?: MaritalStatusWhereInput
  }

  /**
   * User.auth
   */
  export type User$authArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthInclude<ExtArgs> | null
    where?: AuthWhereInput
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    cursor?: AuthWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const PositionScalarFieldEnum: {
    id: 'id',
    positionEn: 'positionEn',
    positionAr: 'positionAr'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    departmentEn: 'departmentEn',
    departmentAr: 'departmentAr'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const DivisionScalarFieldEnum: {
    id: 'id',
    divisionName: 'divisionName'
  };

  export type DivisionScalarFieldEnum = (typeof DivisionScalarFieldEnum)[keyof typeof DivisionScalarFieldEnum]


  export const UnitScalarFieldEnum: {
    id: 'id',
    unitName: 'unitName'
  };

  export type UnitScalarFieldEnum = (typeof UnitScalarFieldEnum)[keyof typeof UnitScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    gradeOfficial: 'gradeOfficial',
    gradeInternal: 'gradeInternal'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    locationName: 'locationName'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const ContractTypeScalarFieldEnum: {
    id: 'id',
    typeName: 'typeName'
  };

  export type ContractTypeScalarFieldEnum = (typeof ContractTypeScalarFieldEnum)[keyof typeof ContractTypeScalarFieldEnum]


  export const NationalityScalarFieldEnum: {
    id: 'id',
    nationalityEn: 'nationalityEn',
    nationalityAr: 'nationalityAr'
  };

  export type NationalityScalarFieldEnum = (typeof NationalityScalarFieldEnum)[keyof typeof NationalityScalarFieldEnum]


  export const GenderScalarFieldEnum: {
    id: 'id',
    genderEn: 'genderEn',
    genderAr: 'genderAr'
  };

  export type GenderScalarFieldEnum = (typeof GenderScalarFieldEnum)[keyof typeof GenderScalarFieldEnum]


  export const MaritalStatusScalarFieldEnum: {
    id: 'id',
    statusEn: 'statusEn',
    statusAr: 'statusAr'
  };

  export type MaritalStatusScalarFieldEnum = (typeof MaritalStatusScalarFieldEnum)[keyof typeof MaritalStatusScalarFieldEnum]


  export const EntityScalarFieldEnum: {
    id: 'id',
    entityName: 'entityName'
  };

  export type EntityScalarFieldEnum = (typeof EntityScalarFieldEnum)[keyof typeof EntityScalarFieldEnum]


  export const BudgetScalarFieldEnum: {
    id: 'id',
    budgetName: 'budgetName'
  };

  export type BudgetScalarFieldEnum = (typeof BudgetScalarFieldEnum)[keyof typeof BudgetScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    statusName: 'statusName'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const AuthScalarFieldEnum: {
    id: 'id',
    employeeCode: 'employeeCode',
    userId: 'userId',
    token: 'token',
    refreshToken: 'refreshToken',
    tokenExpiry: 'tokenExpiry'
  };

  export type AuthScalarFieldEnum = (typeof AuthScalarFieldEnum)[keyof typeof AuthScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    employeeCode: 'employeeCode',
    employeeCategory: 'employeeCategory',
    registerName: 'registerName',
    statusId: 'statusId',
    expectedStartDate: 'expectedStartDate',
    actualStartDate: 'actualStartDate',
    probationEndDate: 'probationEndDate',
    terminationDate: 'terminationDate',
    terminationReason: 'terminationReason',
    resignationType: 'resignationType',
    dateOfBirth: 'dateOfBirth',
    idName: 'idName',
    idNameAr: 'idNameAr',
    firstName: 'firstName',
    lastName: 'lastName',
    firstNameAr: 'firstNameAr',
    lastNameAr: 'lastNameAr',
    organizationId: 'organizationId',
    entityId: 'entityId',
    budgetId: 'budgetId',
    departmentId: 'departmentId',
    divisionId: 'divisionId',
    unitId: 'unitId',
    positionId: 'positionId',
    gradeId: 'gradeId',
    locationId: 'locationId',
    directManagerCode: 'directManagerCode',
    directManagerName: 'directManagerName',
    managerId: 'managerId',
    contractTypeId: 'contractTypeId',
    nationalityId: 'nationalityId',
    genderId: 'genderId',
    maritalStatusId: 'maritalStatusId',
    email: 'email',
    password: 'password',
    personalPhoneNumber1: 'personalPhoneNumber1',
    corporatePhoneNumber: 'corporatePhoneNumber',
    idNumber: 'idNumber',
    idPlaceOfIssue: 'idPlaceOfIssue',
    idAddress: 'idAddress',
    idAddressAr: 'idAddressAr',
    idZoneOfResidence: 'idZoneOfResidence',
    placeOfBirth: 'placeOfBirth',
    companyId: 'companyId',
    cleared: 'cleared',
    disabilityType: 'disabilityType',
    sourceId: 'sourceId',
    insertionDate: 'insertionDate',
    updateDate: 'updateDate'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    value?: StringFilter<"Organization"> | string
    users?: UserListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    value?: StringFilter<"Organization"> | string
    users?: UserListRelationFilter
  }, "id" | "name">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    value?: StringWithAggregatesFilter<"Organization"> | string
  }

  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    id?: StringFilter<"Position"> | string
    positionEn?: StringFilter<"Position"> | string
    positionAr?: StringNullableFilter<"Position"> | string | null
    users?: UserListRelationFilter
  }

  export type PositionOrderByWithRelationInput = {
    id?: SortOrder
    positionEn?: SortOrder
    positionAr?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    positionEn?: string
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    positionAr?: StringNullableFilter<"Position"> | string | null
    users?: UserListRelationFilter
  }, "id" | "positionEn">

  export type PositionOrderByWithAggregationInput = {
    id?: SortOrder
    positionEn?: SortOrder
    positionAr?: SortOrder
    _count?: PositionCountOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Position"> | string
    positionEn?: StringWithAggregatesFilter<"Position"> | string
    positionAr?: StringNullableWithAggregatesFilter<"Position"> | string | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    departmentEn?: StringFilter<"Department"> | string
    departmentAr?: StringNullableFilter<"Department"> | string | null
    users?: UserListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    departmentEn?: SortOrder
    departmentAr?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    departmentEn?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    departmentAr?: StringNullableFilter<"Department"> | string | null
    users?: UserListRelationFilter
  }, "id" | "departmentEn">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    departmentEn?: SortOrder
    departmentAr?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    departmentEn?: StringWithAggregatesFilter<"Department"> | string
    departmentAr?: StringNullableWithAggregatesFilter<"Department"> | string | null
  }

  export type DivisionWhereInput = {
    AND?: DivisionWhereInput | DivisionWhereInput[]
    OR?: DivisionWhereInput[]
    NOT?: DivisionWhereInput | DivisionWhereInput[]
    id?: StringFilter<"Division"> | string
    divisionName?: StringFilter<"Division"> | string
    users?: UserListRelationFilter
  }

  export type DivisionOrderByWithRelationInput = {
    id?: SortOrder
    divisionName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type DivisionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    divisionName?: string
    AND?: DivisionWhereInput | DivisionWhereInput[]
    OR?: DivisionWhereInput[]
    NOT?: DivisionWhereInput | DivisionWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "divisionName">

  export type DivisionOrderByWithAggregationInput = {
    id?: SortOrder
    divisionName?: SortOrder
    _count?: DivisionCountOrderByAggregateInput
    _max?: DivisionMaxOrderByAggregateInput
    _min?: DivisionMinOrderByAggregateInput
  }

  export type DivisionScalarWhereWithAggregatesInput = {
    AND?: DivisionScalarWhereWithAggregatesInput | DivisionScalarWhereWithAggregatesInput[]
    OR?: DivisionScalarWhereWithAggregatesInput[]
    NOT?: DivisionScalarWhereWithAggregatesInput | DivisionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Division"> | string
    divisionName?: StringWithAggregatesFilter<"Division"> | string
  }

  export type UnitWhereInput = {
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    id?: StringFilter<"Unit"> | string
    unitName?: StringFilter<"Unit"> | string
    users?: UserListRelationFilter
  }

  export type UnitOrderByWithRelationInput = {
    id?: SortOrder
    unitName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type UnitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    unitName?: string
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "unitName">

  export type UnitOrderByWithAggregationInput = {
    id?: SortOrder
    unitName?: SortOrder
    _count?: UnitCountOrderByAggregateInput
    _max?: UnitMaxOrderByAggregateInput
    _min?: UnitMinOrderByAggregateInput
  }

  export type UnitScalarWhereWithAggregatesInput = {
    AND?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    OR?: UnitScalarWhereWithAggregatesInput[]
    NOT?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Unit"> | string
    unitName?: StringWithAggregatesFilter<"Unit"> | string
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: StringFilter<"Grade"> | string
    gradeOfficial?: IntFilter<"Grade"> | number
    gradeInternal?: StringNullableFilter<"Grade"> | string | null
    users?: UserListRelationFilter
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    gradeOfficial?: SortOrder
    gradeInternal?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    gradeOfficial?: number
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    gradeInternal?: StringNullableFilter<"Grade"> | string | null
    users?: UserListRelationFilter
  }, "id" | "gradeOfficial">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    gradeOfficial?: SortOrder
    gradeInternal?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Grade"> | string
    gradeOfficial?: IntWithAggregatesFilter<"Grade"> | number
    gradeInternal?: StringNullableWithAggregatesFilter<"Grade"> | string | null
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    locationName?: StringFilter<"Location"> | string
    users?: UserListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    locationName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    locationName?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "locationName">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    locationName?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    locationName?: StringWithAggregatesFilter<"Location"> | string
  }

  export type ContractTypeWhereInput = {
    AND?: ContractTypeWhereInput | ContractTypeWhereInput[]
    OR?: ContractTypeWhereInput[]
    NOT?: ContractTypeWhereInput | ContractTypeWhereInput[]
    id?: StringFilter<"ContractType"> | string
    typeName?: StringFilter<"ContractType"> | string
    users?: UserListRelationFilter
  }

  export type ContractTypeOrderByWithRelationInput = {
    id?: SortOrder
    typeName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type ContractTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    typeName?: string
    AND?: ContractTypeWhereInput | ContractTypeWhereInput[]
    OR?: ContractTypeWhereInput[]
    NOT?: ContractTypeWhereInput | ContractTypeWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "typeName">

  export type ContractTypeOrderByWithAggregationInput = {
    id?: SortOrder
    typeName?: SortOrder
    _count?: ContractTypeCountOrderByAggregateInput
    _max?: ContractTypeMaxOrderByAggregateInput
    _min?: ContractTypeMinOrderByAggregateInput
  }

  export type ContractTypeScalarWhereWithAggregatesInput = {
    AND?: ContractTypeScalarWhereWithAggregatesInput | ContractTypeScalarWhereWithAggregatesInput[]
    OR?: ContractTypeScalarWhereWithAggregatesInput[]
    NOT?: ContractTypeScalarWhereWithAggregatesInput | ContractTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractType"> | string
    typeName?: StringWithAggregatesFilter<"ContractType"> | string
  }

  export type NationalityWhereInput = {
    AND?: NationalityWhereInput | NationalityWhereInput[]
    OR?: NationalityWhereInput[]
    NOT?: NationalityWhereInput | NationalityWhereInput[]
    id?: StringFilter<"Nationality"> | string
    nationalityEn?: StringFilter<"Nationality"> | string
    nationalityAr?: StringNullableFilter<"Nationality"> | string | null
    users?: UserListRelationFilter
  }

  export type NationalityOrderByWithRelationInput = {
    id?: SortOrder
    nationalityEn?: SortOrder
    nationalityAr?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type NationalityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nationalityEn?: string
    AND?: NationalityWhereInput | NationalityWhereInput[]
    OR?: NationalityWhereInput[]
    NOT?: NationalityWhereInput | NationalityWhereInput[]
    nationalityAr?: StringNullableFilter<"Nationality"> | string | null
    users?: UserListRelationFilter
  }, "id" | "nationalityEn">

  export type NationalityOrderByWithAggregationInput = {
    id?: SortOrder
    nationalityEn?: SortOrder
    nationalityAr?: SortOrder
    _count?: NationalityCountOrderByAggregateInput
    _max?: NationalityMaxOrderByAggregateInput
    _min?: NationalityMinOrderByAggregateInput
  }

  export type NationalityScalarWhereWithAggregatesInput = {
    AND?: NationalityScalarWhereWithAggregatesInput | NationalityScalarWhereWithAggregatesInput[]
    OR?: NationalityScalarWhereWithAggregatesInput[]
    NOT?: NationalityScalarWhereWithAggregatesInput | NationalityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nationality"> | string
    nationalityEn?: StringWithAggregatesFilter<"Nationality"> | string
    nationalityAr?: StringNullableWithAggregatesFilter<"Nationality"> | string | null
  }

  export type GenderWhereInput = {
    AND?: GenderWhereInput | GenderWhereInput[]
    OR?: GenderWhereInput[]
    NOT?: GenderWhereInput | GenderWhereInput[]
    id?: StringFilter<"Gender"> | string
    genderEn?: StringFilter<"Gender"> | string
    genderAr?: StringNullableFilter<"Gender"> | string | null
    users?: UserListRelationFilter
  }

  export type GenderOrderByWithRelationInput = {
    id?: SortOrder
    genderEn?: SortOrder
    genderAr?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type GenderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    genderEn?: string
    AND?: GenderWhereInput | GenderWhereInput[]
    OR?: GenderWhereInput[]
    NOT?: GenderWhereInput | GenderWhereInput[]
    genderAr?: StringNullableFilter<"Gender"> | string | null
    users?: UserListRelationFilter
  }, "id" | "genderEn">

  export type GenderOrderByWithAggregationInput = {
    id?: SortOrder
    genderEn?: SortOrder
    genderAr?: SortOrder
    _count?: GenderCountOrderByAggregateInput
    _max?: GenderMaxOrderByAggregateInput
    _min?: GenderMinOrderByAggregateInput
  }

  export type GenderScalarWhereWithAggregatesInput = {
    AND?: GenderScalarWhereWithAggregatesInput | GenderScalarWhereWithAggregatesInput[]
    OR?: GenderScalarWhereWithAggregatesInput[]
    NOT?: GenderScalarWhereWithAggregatesInput | GenderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Gender"> | string
    genderEn?: StringWithAggregatesFilter<"Gender"> | string
    genderAr?: StringNullableWithAggregatesFilter<"Gender"> | string | null
  }

  export type MaritalStatusWhereInput = {
    AND?: MaritalStatusWhereInput | MaritalStatusWhereInput[]
    OR?: MaritalStatusWhereInput[]
    NOT?: MaritalStatusWhereInput | MaritalStatusWhereInput[]
    id?: StringFilter<"MaritalStatus"> | string
    statusEn?: StringFilter<"MaritalStatus"> | string
    statusAr?: StringNullableFilter<"MaritalStatus"> | string | null
    users?: UserListRelationFilter
  }

  export type MaritalStatusOrderByWithRelationInput = {
    id?: SortOrder
    statusEn?: SortOrder
    statusAr?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type MaritalStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    statusEn?: string
    AND?: MaritalStatusWhereInput | MaritalStatusWhereInput[]
    OR?: MaritalStatusWhereInput[]
    NOT?: MaritalStatusWhereInput | MaritalStatusWhereInput[]
    statusAr?: StringNullableFilter<"MaritalStatus"> | string | null
    users?: UserListRelationFilter
  }, "id" | "statusEn">

  export type MaritalStatusOrderByWithAggregationInput = {
    id?: SortOrder
    statusEn?: SortOrder
    statusAr?: SortOrder
    _count?: MaritalStatusCountOrderByAggregateInput
    _max?: MaritalStatusMaxOrderByAggregateInput
    _min?: MaritalStatusMinOrderByAggregateInput
  }

  export type MaritalStatusScalarWhereWithAggregatesInput = {
    AND?: MaritalStatusScalarWhereWithAggregatesInput | MaritalStatusScalarWhereWithAggregatesInput[]
    OR?: MaritalStatusScalarWhereWithAggregatesInput[]
    NOT?: MaritalStatusScalarWhereWithAggregatesInput | MaritalStatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MaritalStatus"> | string
    statusEn?: StringWithAggregatesFilter<"MaritalStatus"> | string
    statusAr?: StringNullableWithAggregatesFilter<"MaritalStatus"> | string | null
  }

  export type EntityWhereInput = {
    AND?: EntityWhereInput | EntityWhereInput[]
    OR?: EntityWhereInput[]
    NOT?: EntityWhereInput | EntityWhereInput[]
    id?: StringFilter<"Entity"> | string
    entityName?: StringFilter<"Entity"> | string
    users?: UserListRelationFilter
  }

  export type EntityOrderByWithRelationInput = {
    id?: SortOrder
    entityName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type EntityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    entityName?: string
    AND?: EntityWhereInput | EntityWhereInput[]
    OR?: EntityWhereInput[]
    NOT?: EntityWhereInput | EntityWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "entityName">

  export type EntityOrderByWithAggregationInput = {
    id?: SortOrder
    entityName?: SortOrder
    _count?: EntityCountOrderByAggregateInput
    _max?: EntityMaxOrderByAggregateInput
    _min?: EntityMinOrderByAggregateInput
  }

  export type EntityScalarWhereWithAggregatesInput = {
    AND?: EntityScalarWhereWithAggregatesInput | EntityScalarWhereWithAggregatesInput[]
    OR?: EntityScalarWhereWithAggregatesInput[]
    NOT?: EntityScalarWhereWithAggregatesInput | EntityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Entity"> | string
    entityName?: StringWithAggregatesFilter<"Entity"> | string
  }

  export type BudgetWhereInput = {
    AND?: BudgetWhereInput | BudgetWhereInput[]
    OR?: BudgetWhereInput[]
    NOT?: BudgetWhereInput | BudgetWhereInput[]
    id?: StringFilter<"Budget"> | string
    budgetName?: StringFilter<"Budget"> | string
    users?: UserListRelationFilter
  }

  export type BudgetOrderByWithRelationInput = {
    id?: SortOrder
    budgetName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type BudgetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    budgetName?: string
    AND?: BudgetWhereInput | BudgetWhereInput[]
    OR?: BudgetWhereInput[]
    NOT?: BudgetWhereInput | BudgetWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "budgetName">

  export type BudgetOrderByWithAggregationInput = {
    id?: SortOrder
    budgetName?: SortOrder
    _count?: BudgetCountOrderByAggregateInput
    _max?: BudgetMaxOrderByAggregateInput
    _min?: BudgetMinOrderByAggregateInput
  }

  export type BudgetScalarWhereWithAggregatesInput = {
    AND?: BudgetScalarWhereWithAggregatesInput | BudgetScalarWhereWithAggregatesInput[]
    OR?: BudgetScalarWhereWithAggregatesInput[]
    NOT?: BudgetScalarWhereWithAggregatesInput | BudgetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Budget"> | string
    budgetName?: StringWithAggregatesFilter<"Budget"> | string
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: StringFilter<"Status"> | string
    statusName?: StringFilter<"Status"> | string
    users?: UserListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    statusName?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    statusName?: string
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "statusName">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    statusName?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Status"> | string
    statusName?: StringWithAggregatesFilter<"Status"> | string
  }

  export type AuthWhereInput = {
    AND?: AuthWhereInput | AuthWhereInput[]
    OR?: AuthWhereInput[]
    NOT?: AuthWhereInput | AuthWhereInput[]
    id?: StringFilter<"Auth"> | string
    employeeCode?: StringFilter<"Auth"> | string
    userId?: StringNullableFilter<"Auth"> | string | null
    token?: StringNullableFilter<"Auth"> | string | null
    refreshToken?: StringNullableFilter<"Auth"> | string | null
    tokenExpiry?: DateTimeNullableFilter<"Auth"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuthOrderByWithRelationInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    tokenExpiry?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuthWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeCode?: string
    AND?: AuthWhereInput | AuthWhereInput[]
    OR?: AuthWhereInput[]
    NOT?: AuthWhereInput | AuthWhereInput[]
    userId?: StringNullableFilter<"Auth"> | string | null
    token?: StringNullableFilter<"Auth"> | string | null
    refreshToken?: StringNullableFilter<"Auth"> | string | null
    tokenExpiry?: DateTimeNullableFilter<"Auth"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "employeeCode">

  export type AuthOrderByWithAggregationInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    tokenExpiry?: SortOrder
    _count?: AuthCountOrderByAggregateInput
    _max?: AuthMaxOrderByAggregateInput
    _min?: AuthMinOrderByAggregateInput
  }

  export type AuthScalarWhereWithAggregatesInput = {
    AND?: AuthScalarWhereWithAggregatesInput | AuthScalarWhereWithAggregatesInput[]
    OR?: AuthScalarWhereWithAggregatesInput[]
    NOT?: AuthScalarWhereWithAggregatesInput | AuthScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Auth"> | string
    employeeCode?: StringWithAggregatesFilter<"Auth"> | string
    userId?: StringNullableWithAggregatesFilter<"Auth"> | string | null
    token?: StringNullableWithAggregatesFilter<"Auth"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Auth"> | string | null
    tokenExpiry?: DateTimeNullableWithAggregatesFilter<"Auth"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    employeeCode?: StringFilter<"User"> | string
    employeeCategory?: StringNullableFilter<"User"> | string | null
    registerName?: StringNullableFilter<"User"> | string | null
    statusId?: StringNullableFilter<"User"> | string | null
    expectedStartDate?: DateTimeNullableFilter<"User"> | Date | string | null
    actualStartDate?: DateTimeNullableFilter<"User"> | Date | string | null
    probationEndDate?: DateTimeNullableFilter<"User"> | Date | string | null
    terminationDate?: DateTimeNullableFilter<"User"> | Date | string | null
    terminationReason?: StringNullableFilter<"User"> | string | null
    resignationType?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    idName?: StringNullableFilter<"User"> | string | null
    idNameAr?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    firstNameAr?: StringNullableFilter<"User"> | string | null
    lastNameAr?: StringNullableFilter<"User"> | string | null
    organizationId?: StringNullableFilter<"User"> | string | null
    entityId?: StringNullableFilter<"User"> | string | null
    budgetId?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    divisionId?: StringNullableFilter<"User"> | string | null
    unitId?: StringNullableFilter<"User"> | string | null
    positionId?: StringNullableFilter<"User"> | string | null
    gradeId?: StringNullableFilter<"User"> | string | null
    locationId?: StringNullableFilter<"User"> | string | null
    directManagerCode?: StringNullableFilter<"User"> | string | null
    directManagerName?: StringNullableFilter<"User"> | string | null
    managerId?: StringNullableFilter<"User"> | string | null
    contractTypeId?: StringNullableFilter<"User"> | string | null
    nationalityId?: StringNullableFilter<"User"> | string | null
    genderId?: StringNullableFilter<"User"> | string | null
    maritalStatusId?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    personalPhoneNumber1?: StringNullableFilter<"User"> | string | null
    corporatePhoneNumber?: StringNullableFilter<"User"> | string | null
    idNumber?: StringNullableFilter<"User"> | string | null
    idPlaceOfIssue?: StringNullableFilter<"User"> | string | null
    idAddress?: StringNullableFilter<"User"> | string | null
    idAddressAr?: StringNullableFilter<"User"> | string | null
    idZoneOfResidence?: StringNullableFilter<"User"> | string | null
    placeOfBirth?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
    cleared?: StringNullableFilter<"User"> | string | null
    disabilityType?: StringNullableFilter<"User"> | string | null
    sourceId?: IntNullableFilter<"User"> | number | null
    insertionDate?: DateTimeNullableFilter<"User"> | Date | string | null
    updateDate?: DateTimeNullableFilter<"User"> | Date | string | null
    status?: XOR<StatusNullableScalarRelationFilter, StatusWhereInput> | null
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    entity?: XOR<EntityNullableScalarRelationFilter, EntityWhereInput> | null
    budget?: XOR<BudgetNullableScalarRelationFilter, BudgetWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    division?: XOR<DivisionNullableScalarRelationFilter, DivisionWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    position?: XOR<PositionNullableScalarRelationFilter, PositionWhereInput> | null
    grade?: XOR<GradeNullableScalarRelationFilter, GradeWhereInput> | null
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
    managedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    manages?: UserListRelationFilter
    contractType?: XOR<ContractTypeNullableScalarRelationFilter, ContractTypeWhereInput> | null
    nationality?: XOR<NationalityNullableScalarRelationFilter, NationalityWhereInput> | null
    gender?: XOR<GenderNullableScalarRelationFilter, GenderWhereInput> | null
    maritalStatus?: XOR<MaritalStatusNullableScalarRelationFilter, MaritalStatusWhereInput> | null
    auth?: AuthListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    employeeCategory?: SortOrder
    registerName?: SortOrder
    statusId?: SortOrder
    expectedStartDate?: SortOrder
    actualStartDate?: SortOrder
    probationEndDate?: SortOrder
    terminationDate?: SortOrder
    terminationReason?: SortOrder
    resignationType?: SortOrder
    dateOfBirth?: SortOrder
    idName?: SortOrder
    idNameAr?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    firstNameAr?: SortOrder
    lastNameAr?: SortOrder
    organizationId?: SortOrder
    entityId?: SortOrder
    budgetId?: SortOrder
    departmentId?: SortOrder
    divisionId?: SortOrder
    unitId?: SortOrder
    positionId?: SortOrder
    gradeId?: SortOrder
    locationId?: SortOrder
    directManagerCode?: SortOrder
    directManagerName?: SortOrder
    managerId?: SortOrder
    contractTypeId?: SortOrder
    nationalityId?: SortOrder
    genderId?: SortOrder
    maritalStatusId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    personalPhoneNumber1?: SortOrder
    corporatePhoneNumber?: SortOrder
    idNumber?: SortOrder
    idPlaceOfIssue?: SortOrder
    idAddress?: SortOrder
    idAddressAr?: SortOrder
    idZoneOfResidence?: SortOrder
    placeOfBirth?: SortOrder
    companyId?: SortOrder
    cleared?: SortOrder
    disabilityType?: SortOrder
    sourceId?: SortOrder
    insertionDate?: SortOrder
    updateDate?: SortOrder
    status?: StatusOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    entity?: EntityOrderByWithRelationInput
    budget?: BudgetOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    division?: DivisionOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    position?: PositionOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    managedBy?: UserOrderByWithRelationInput
    manages?: UserOrderByRelationAggregateInput
    contractType?: ContractTypeOrderByWithRelationInput
    nationality?: NationalityOrderByWithRelationInput
    gender?: GenderOrderByWithRelationInput
    maritalStatus?: MaritalStatusOrderByWithRelationInput
    auth?: AuthOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeCode?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    employeeCategory?: StringNullableFilter<"User"> | string | null
    registerName?: StringNullableFilter<"User"> | string | null
    statusId?: StringNullableFilter<"User"> | string | null
    expectedStartDate?: DateTimeNullableFilter<"User"> | Date | string | null
    actualStartDate?: DateTimeNullableFilter<"User"> | Date | string | null
    probationEndDate?: DateTimeNullableFilter<"User"> | Date | string | null
    terminationDate?: DateTimeNullableFilter<"User"> | Date | string | null
    terminationReason?: StringNullableFilter<"User"> | string | null
    resignationType?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    idName?: StringNullableFilter<"User"> | string | null
    idNameAr?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    firstNameAr?: StringNullableFilter<"User"> | string | null
    lastNameAr?: StringNullableFilter<"User"> | string | null
    organizationId?: StringNullableFilter<"User"> | string | null
    entityId?: StringNullableFilter<"User"> | string | null
    budgetId?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    divisionId?: StringNullableFilter<"User"> | string | null
    unitId?: StringNullableFilter<"User"> | string | null
    positionId?: StringNullableFilter<"User"> | string | null
    gradeId?: StringNullableFilter<"User"> | string | null
    locationId?: StringNullableFilter<"User"> | string | null
    directManagerCode?: StringNullableFilter<"User"> | string | null
    directManagerName?: StringNullableFilter<"User"> | string | null
    managerId?: StringNullableFilter<"User"> | string | null
    contractTypeId?: StringNullableFilter<"User"> | string | null
    nationalityId?: StringNullableFilter<"User"> | string | null
    genderId?: StringNullableFilter<"User"> | string | null
    maritalStatusId?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    personalPhoneNumber1?: StringNullableFilter<"User"> | string | null
    corporatePhoneNumber?: StringNullableFilter<"User"> | string | null
    idNumber?: StringNullableFilter<"User"> | string | null
    idPlaceOfIssue?: StringNullableFilter<"User"> | string | null
    idAddress?: StringNullableFilter<"User"> | string | null
    idAddressAr?: StringNullableFilter<"User"> | string | null
    idZoneOfResidence?: StringNullableFilter<"User"> | string | null
    placeOfBirth?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
    cleared?: StringNullableFilter<"User"> | string | null
    disabilityType?: StringNullableFilter<"User"> | string | null
    sourceId?: IntNullableFilter<"User"> | number | null
    insertionDate?: DateTimeNullableFilter<"User"> | Date | string | null
    updateDate?: DateTimeNullableFilter<"User"> | Date | string | null
    status?: XOR<StatusNullableScalarRelationFilter, StatusWhereInput> | null
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    entity?: XOR<EntityNullableScalarRelationFilter, EntityWhereInput> | null
    budget?: XOR<BudgetNullableScalarRelationFilter, BudgetWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    division?: XOR<DivisionNullableScalarRelationFilter, DivisionWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    position?: XOR<PositionNullableScalarRelationFilter, PositionWhereInput> | null
    grade?: XOR<GradeNullableScalarRelationFilter, GradeWhereInput> | null
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
    managedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    manages?: UserListRelationFilter
    contractType?: XOR<ContractTypeNullableScalarRelationFilter, ContractTypeWhereInput> | null
    nationality?: XOR<NationalityNullableScalarRelationFilter, NationalityWhereInput> | null
    gender?: XOR<GenderNullableScalarRelationFilter, GenderWhereInput> | null
    maritalStatus?: XOR<MaritalStatusNullableScalarRelationFilter, MaritalStatusWhereInput> | null
    auth?: AuthListRelationFilter
  }, "id" | "employeeCode" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    employeeCategory?: SortOrder
    registerName?: SortOrder
    statusId?: SortOrder
    expectedStartDate?: SortOrder
    actualStartDate?: SortOrder
    probationEndDate?: SortOrder
    terminationDate?: SortOrder
    terminationReason?: SortOrder
    resignationType?: SortOrder
    dateOfBirth?: SortOrder
    idName?: SortOrder
    idNameAr?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    firstNameAr?: SortOrder
    lastNameAr?: SortOrder
    organizationId?: SortOrder
    entityId?: SortOrder
    budgetId?: SortOrder
    departmentId?: SortOrder
    divisionId?: SortOrder
    unitId?: SortOrder
    positionId?: SortOrder
    gradeId?: SortOrder
    locationId?: SortOrder
    directManagerCode?: SortOrder
    directManagerName?: SortOrder
    managerId?: SortOrder
    contractTypeId?: SortOrder
    nationalityId?: SortOrder
    genderId?: SortOrder
    maritalStatusId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    personalPhoneNumber1?: SortOrder
    corporatePhoneNumber?: SortOrder
    idNumber?: SortOrder
    idPlaceOfIssue?: SortOrder
    idAddress?: SortOrder
    idAddressAr?: SortOrder
    idZoneOfResidence?: SortOrder
    placeOfBirth?: SortOrder
    companyId?: SortOrder
    cleared?: SortOrder
    disabilityType?: SortOrder
    sourceId?: SortOrder
    insertionDate?: SortOrder
    updateDate?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    employeeCode?: StringWithAggregatesFilter<"User"> | string
    employeeCategory?: StringNullableWithAggregatesFilter<"User"> | string | null
    registerName?: StringNullableWithAggregatesFilter<"User"> | string | null
    statusId?: StringNullableWithAggregatesFilter<"User"> | string | null
    expectedStartDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    actualStartDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    probationEndDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    terminationDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    terminationReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    resignationType?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    idName?: StringNullableWithAggregatesFilter<"User"> | string | null
    idNameAr?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstNameAr?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastNameAr?: StringNullableWithAggregatesFilter<"User"> | string | null
    organizationId?: StringNullableWithAggregatesFilter<"User"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"User"> | string | null
    budgetId?: StringNullableWithAggregatesFilter<"User"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    divisionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    unitId?: StringNullableWithAggregatesFilter<"User"> | string | null
    positionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    gradeId?: StringNullableWithAggregatesFilter<"User"> | string | null
    locationId?: StringNullableWithAggregatesFilter<"User"> | string | null
    directManagerCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    directManagerName?: StringNullableWithAggregatesFilter<"User"> | string | null
    managerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    contractTypeId?: StringNullableWithAggregatesFilter<"User"> | string | null
    nationalityId?: StringNullableWithAggregatesFilter<"User"> | string | null
    genderId?: StringNullableWithAggregatesFilter<"User"> | string | null
    maritalStatusId?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    personalPhoneNumber1?: StringNullableWithAggregatesFilter<"User"> | string | null
    corporatePhoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    idNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    idPlaceOfIssue?: StringNullableWithAggregatesFilter<"User"> | string | null
    idAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    idAddressAr?: StringNullableWithAggregatesFilter<"User"> | string | null
    idZoneOfResidence?: StringNullableWithAggregatesFilter<"User"> | string | null
    placeOfBirth?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyId?: StringNullableWithAggregatesFilter<"User"> | string | null
    cleared?: StringNullableWithAggregatesFilter<"User"> | string | null
    disabilityType?: StringNullableWithAggregatesFilter<"User"> | string | null
    sourceId?: IntNullableWithAggregatesFilter<"User"> | number | null
    insertionDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updateDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    value: string
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    value: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    value: string
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type PositionCreateInput = {
    id?: string
    positionEn: string
    positionAr?: string | null
    users?: UserCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateInput = {
    id?: string
    positionEn: string
    positionAr?: string | null
    users?: UserUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionUpdateInput = {
    positionEn?: StringFieldUpdateOperationsInput | string
    positionAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    positionEn?: StringFieldUpdateOperationsInput | string
    positionAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionCreateManyInput = {
    id?: string
    positionEn: string
    positionAr?: string | null
  }

  export type PositionUpdateManyMutationInput = {
    positionEn?: StringFieldUpdateOperationsInput | string
    positionAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PositionUncheckedUpdateManyInput = {
    positionEn?: StringFieldUpdateOperationsInput | string
    positionAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentCreateInput = {
    id?: string
    departmentEn: string
    departmentAr?: string | null
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    departmentEn: string
    departmentAr?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    departmentEn?: StringFieldUpdateOperationsInput | string
    departmentAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    departmentEn?: StringFieldUpdateOperationsInput | string
    departmentAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    departmentEn: string
    departmentAr?: string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    departmentEn?: StringFieldUpdateOperationsInput | string
    departmentAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUncheckedUpdateManyInput = {
    departmentEn?: StringFieldUpdateOperationsInput | string
    departmentAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DivisionCreateInput = {
    id?: string
    divisionName: string
    users?: UserCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUncheckedCreateInput = {
    id?: string
    divisionName: string
    users?: UserUncheckedCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUpdateInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionCreateManyInput = {
    id?: string
    divisionName: string
  }

  export type DivisionUpdateManyMutationInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type DivisionUncheckedUpdateManyInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitCreateInput = {
    id?: string
    unitName: string
    users?: UserCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateInput = {
    id?: string
    unitName: string
    users?: UserUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitUpdateInput = {
    unitName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateInput = {
    unitName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type UnitCreateManyInput = {
    id?: string
    unitName: string
  }

  export type UnitUpdateManyMutationInput = {
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateManyInput = {
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type GradeCreateInput = {
    id?: string
    gradeOfficial: number
    gradeInternal?: string | null
    users?: UserCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateInput = {
    id?: string
    gradeOfficial: number
    gradeInternal?: string | null
    users?: UserUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeUpdateInput = {
    gradeOfficial?: IntFieldUpdateOperationsInput | number
    gradeInternal?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    gradeOfficial?: IntFieldUpdateOperationsInput | number
    gradeInternal?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type GradeCreateManyInput = {
    id?: string
    gradeOfficial: number
    gradeInternal?: string | null
  }

  export type GradeUpdateManyMutationInput = {
    gradeOfficial?: IntFieldUpdateOperationsInput | number
    gradeInternal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeUncheckedUpdateManyInput = {
    gradeOfficial?: IntFieldUpdateOperationsInput | number
    gradeInternal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationCreateInput = {
    id?: string
    locationName: string
    users?: UserCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    locationName: string
    users?: UserUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    locationName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    locationName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    locationName: string
  }

  export type LocationUpdateManyMutationInput = {
    locationName?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUncheckedUpdateManyInput = {
    locationName?: StringFieldUpdateOperationsInput | string
  }

  export type ContractTypeCreateInput = {
    id?: string
    typeName: string
    users?: UserCreateNestedManyWithoutContractTypeInput
  }

  export type ContractTypeUncheckedCreateInput = {
    id?: string
    typeName: string
    users?: UserUncheckedCreateNestedManyWithoutContractTypeInput
  }

  export type ContractTypeUpdateInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutContractTypeNestedInput
  }

  export type ContractTypeUncheckedUpdateInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutContractTypeNestedInput
  }

  export type ContractTypeCreateManyInput = {
    id?: string
    typeName: string
  }

  export type ContractTypeUpdateManyMutationInput = {
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type ContractTypeUncheckedUpdateManyInput = {
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type NationalityCreateInput = {
    id?: string
    nationalityEn: string
    nationalityAr?: string | null
    users?: UserCreateNestedManyWithoutNationalityInput
  }

  export type NationalityUncheckedCreateInput = {
    id?: string
    nationalityEn: string
    nationalityAr?: string | null
    users?: UserUncheckedCreateNestedManyWithoutNationalityInput
  }

  export type NationalityUpdateInput = {
    nationalityEn?: StringFieldUpdateOperationsInput | string
    nationalityAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutNationalityNestedInput
  }

  export type NationalityUncheckedUpdateInput = {
    nationalityEn?: StringFieldUpdateOperationsInput | string
    nationalityAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutNationalityNestedInput
  }

  export type NationalityCreateManyInput = {
    id?: string
    nationalityEn: string
    nationalityAr?: string | null
  }

  export type NationalityUpdateManyMutationInput = {
    nationalityEn?: StringFieldUpdateOperationsInput | string
    nationalityAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NationalityUncheckedUpdateManyInput = {
    nationalityEn?: StringFieldUpdateOperationsInput | string
    nationalityAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderCreateInput = {
    id?: string
    genderEn: string
    genderAr?: string | null
    users?: UserCreateNestedManyWithoutGenderInput
  }

  export type GenderUncheckedCreateInput = {
    id?: string
    genderEn: string
    genderAr?: string | null
    users?: UserUncheckedCreateNestedManyWithoutGenderInput
  }

  export type GenderUpdateInput = {
    genderEn?: StringFieldUpdateOperationsInput | string
    genderAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutGenderNestedInput
  }

  export type GenderUncheckedUpdateInput = {
    genderEn?: StringFieldUpdateOperationsInput | string
    genderAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutGenderNestedInput
  }

  export type GenderCreateManyInput = {
    id?: string
    genderEn: string
    genderAr?: string | null
  }

  export type GenderUpdateManyMutationInput = {
    genderEn?: StringFieldUpdateOperationsInput | string
    genderAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderUncheckedUpdateManyInput = {
    genderEn?: StringFieldUpdateOperationsInput | string
    genderAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaritalStatusCreateInput = {
    id?: string
    statusEn: string
    statusAr?: string | null
    users?: UserCreateNestedManyWithoutMaritalStatusInput
  }

  export type MaritalStatusUncheckedCreateInput = {
    id?: string
    statusEn: string
    statusAr?: string | null
    users?: UserUncheckedCreateNestedManyWithoutMaritalStatusInput
  }

  export type MaritalStatusUpdateInput = {
    statusEn?: StringFieldUpdateOperationsInput | string
    statusAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutMaritalStatusNestedInput
  }

  export type MaritalStatusUncheckedUpdateInput = {
    statusEn?: StringFieldUpdateOperationsInput | string
    statusAr?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutMaritalStatusNestedInput
  }

  export type MaritalStatusCreateManyInput = {
    id?: string
    statusEn: string
    statusAr?: string | null
  }

  export type MaritalStatusUpdateManyMutationInput = {
    statusEn?: StringFieldUpdateOperationsInput | string
    statusAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaritalStatusUncheckedUpdateManyInput = {
    statusEn?: StringFieldUpdateOperationsInput | string
    statusAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityCreateInput = {
    id?: string
    entityName: string
    users?: UserCreateNestedManyWithoutEntityInput
  }

  export type EntityUncheckedCreateInput = {
    id?: string
    entityName: string
    users?: UserUncheckedCreateNestedManyWithoutEntityInput
  }

  export type EntityUpdateInput = {
    entityName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutEntityNestedInput
  }

  export type EntityUncheckedUpdateInput = {
    entityName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type EntityCreateManyInput = {
    id?: string
    entityName: string
  }

  export type EntityUpdateManyMutationInput = {
    entityName?: StringFieldUpdateOperationsInput | string
  }

  export type EntityUncheckedUpdateManyInput = {
    entityName?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetCreateInput = {
    id?: string
    budgetName: string
    users?: UserCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUncheckedCreateInput = {
    id?: string
    budgetName: string
    users?: UserUncheckedCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUpdateInput = {
    budgetName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutBudgetNestedInput
  }

  export type BudgetUncheckedUpdateInput = {
    budgetName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutBudgetNestedInput
  }

  export type BudgetCreateManyInput = {
    id?: string
    budgetName: string
  }

  export type BudgetUpdateManyMutationInput = {
    budgetName?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetUncheckedUpdateManyInput = {
    budgetName?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateInput = {
    id?: string
    statusName: string
    users?: UserCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateInput = {
    id?: string
    statusName: string
    users?: UserUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusUpdateInput = {
    statusName?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    statusName?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusCreateManyInput = {
    id?: string
    statusName: string
  }

  export type StatusUpdateManyMutationInput = {
    statusName?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    statusName?: StringFieldUpdateOperationsInput | string
  }

  export type AuthCreateInput = {
    id?: string
    employeeCode: string
    token?: string | null
    refreshToken?: string | null
    tokenExpiry?: Date | string | null
    user?: UserCreateNestedOneWithoutAuthInput
  }

  export type AuthUncheckedCreateInput = {
    id?: string
    employeeCode: string
    userId?: string | null
    token?: string | null
    refreshToken?: string | null
    tokenExpiry?: Date | string | null
  }

  export type AuthUpdateInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutAuthNestedInput
  }

  export type AuthUncheckedUpdateInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthCreateManyInput = {
    id?: string
    employeeCode: string
    userId?: string | null
    token?: string | null
    refreshToken?: string | null
    tokenExpiry?: Date | string | null
  }

  export type AuthUpdateManyMutationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthUncheckedUpdateManyInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type PositionCountOrderByAggregateInput = {
    id?: SortOrder
    positionEn?: SortOrder
    positionAr?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    id?: SortOrder
    positionEn?: SortOrder
    positionAr?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    id?: SortOrder
    positionEn?: SortOrder
    positionAr?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    departmentEn?: SortOrder
    departmentAr?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    departmentEn?: SortOrder
    departmentAr?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    departmentEn?: SortOrder
    departmentAr?: SortOrder
  }

  export type DivisionCountOrderByAggregateInput = {
    id?: SortOrder
    divisionName?: SortOrder
  }

  export type DivisionMaxOrderByAggregateInput = {
    id?: SortOrder
    divisionName?: SortOrder
  }

  export type DivisionMinOrderByAggregateInput = {
    id?: SortOrder
    divisionName?: SortOrder
  }

  export type UnitCountOrderByAggregateInput = {
    id?: SortOrder
    unitName?: SortOrder
  }

  export type UnitMaxOrderByAggregateInput = {
    id?: SortOrder
    unitName?: SortOrder
  }

  export type UnitMinOrderByAggregateInput = {
    id?: SortOrder
    unitName?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    gradeOfficial?: SortOrder
    gradeInternal?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    gradeOfficial?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    gradeOfficial?: SortOrder
    gradeInternal?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    gradeOfficial?: SortOrder
    gradeInternal?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    gradeOfficial?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    locationName?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    locationName?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    locationName?: SortOrder
  }

  export type ContractTypeCountOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
  }

  export type ContractTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
  }

  export type ContractTypeMinOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
  }

  export type NationalityCountOrderByAggregateInput = {
    id?: SortOrder
    nationalityEn?: SortOrder
    nationalityAr?: SortOrder
  }

  export type NationalityMaxOrderByAggregateInput = {
    id?: SortOrder
    nationalityEn?: SortOrder
    nationalityAr?: SortOrder
  }

  export type NationalityMinOrderByAggregateInput = {
    id?: SortOrder
    nationalityEn?: SortOrder
    nationalityAr?: SortOrder
  }

  export type GenderCountOrderByAggregateInput = {
    id?: SortOrder
    genderEn?: SortOrder
    genderAr?: SortOrder
  }

  export type GenderMaxOrderByAggregateInput = {
    id?: SortOrder
    genderEn?: SortOrder
    genderAr?: SortOrder
  }

  export type GenderMinOrderByAggregateInput = {
    id?: SortOrder
    genderEn?: SortOrder
    genderAr?: SortOrder
  }

  export type MaritalStatusCountOrderByAggregateInput = {
    id?: SortOrder
    statusEn?: SortOrder
    statusAr?: SortOrder
  }

  export type MaritalStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    statusEn?: SortOrder
    statusAr?: SortOrder
  }

  export type MaritalStatusMinOrderByAggregateInput = {
    id?: SortOrder
    statusEn?: SortOrder
    statusAr?: SortOrder
  }

  export type EntityCountOrderByAggregateInput = {
    id?: SortOrder
    entityName?: SortOrder
  }

  export type EntityMaxOrderByAggregateInput = {
    id?: SortOrder
    entityName?: SortOrder
  }

  export type EntityMinOrderByAggregateInput = {
    id?: SortOrder
    entityName?: SortOrder
  }

  export type BudgetCountOrderByAggregateInput = {
    id?: SortOrder
    budgetName?: SortOrder
  }

  export type BudgetMaxOrderByAggregateInput = {
    id?: SortOrder
    budgetName?: SortOrder
  }

  export type BudgetMinOrderByAggregateInput = {
    id?: SortOrder
    budgetName?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    statusName?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    statusName?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    statusName?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuthCountOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    tokenExpiry?: SortOrder
  }

  export type AuthMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    tokenExpiry?: SortOrder
  }

  export type AuthMinOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    tokenExpiry?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type StatusNullableScalarRelationFilter = {
    is?: StatusWhereInput | null
    isNot?: StatusWhereInput | null
  }

  export type OrganizationNullableScalarRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type EntityNullableScalarRelationFilter = {
    is?: EntityWhereInput | null
    isNot?: EntityWhereInput | null
  }

  export type BudgetNullableScalarRelationFilter = {
    is?: BudgetWhereInput | null
    isNot?: BudgetWhereInput | null
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type DivisionNullableScalarRelationFilter = {
    is?: DivisionWhereInput | null
    isNot?: DivisionWhereInput | null
  }

  export type UnitNullableScalarRelationFilter = {
    is?: UnitWhereInput | null
    isNot?: UnitWhereInput | null
  }

  export type PositionNullableScalarRelationFilter = {
    is?: PositionWhereInput | null
    isNot?: PositionWhereInput | null
  }

  export type GradeNullableScalarRelationFilter = {
    is?: GradeWhereInput | null
    isNot?: GradeWhereInput | null
  }

  export type LocationNullableScalarRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type ContractTypeNullableScalarRelationFilter = {
    is?: ContractTypeWhereInput | null
    isNot?: ContractTypeWhereInput | null
  }

  export type NationalityNullableScalarRelationFilter = {
    is?: NationalityWhereInput | null
    isNot?: NationalityWhereInput | null
  }

  export type GenderNullableScalarRelationFilter = {
    is?: GenderWhereInput | null
    isNot?: GenderWhereInput | null
  }

  export type MaritalStatusNullableScalarRelationFilter = {
    is?: MaritalStatusWhereInput | null
    isNot?: MaritalStatusWhereInput | null
  }

  export type AuthListRelationFilter = {
    every?: AuthWhereInput
    some?: AuthWhereInput
    none?: AuthWhereInput
  }

  export type AuthOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    employeeCategory?: SortOrder
    registerName?: SortOrder
    statusId?: SortOrder
    expectedStartDate?: SortOrder
    actualStartDate?: SortOrder
    probationEndDate?: SortOrder
    terminationDate?: SortOrder
    terminationReason?: SortOrder
    resignationType?: SortOrder
    dateOfBirth?: SortOrder
    idName?: SortOrder
    idNameAr?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    firstNameAr?: SortOrder
    lastNameAr?: SortOrder
    organizationId?: SortOrder
    entityId?: SortOrder
    budgetId?: SortOrder
    departmentId?: SortOrder
    divisionId?: SortOrder
    unitId?: SortOrder
    positionId?: SortOrder
    gradeId?: SortOrder
    locationId?: SortOrder
    directManagerCode?: SortOrder
    directManagerName?: SortOrder
    managerId?: SortOrder
    contractTypeId?: SortOrder
    nationalityId?: SortOrder
    genderId?: SortOrder
    maritalStatusId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    personalPhoneNumber1?: SortOrder
    corporatePhoneNumber?: SortOrder
    idNumber?: SortOrder
    idPlaceOfIssue?: SortOrder
    idAddress?: SortOrder
    idAddressAr?: SortOrder
    idZoneOfResidence?: SortOrder
    placeOfBirth?: SortOrder
    companyId?: SortOrder
    cleared?: SortOrder
    disabilityType?: SortOrder
    sourceId?: SortOrder
    insertionDate?: SortOrder
    updateDate?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    sourceId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    employeeCategory?: SortOrder
    registerName?: SortOrder
    statusId?: SortOrder
    expectedStartDate?: SortOrder
    actualStartDate?: SortOrder
    probationEndDate?: SortOrder
    terminationDate?: SortOrder
    terminationReason?: SortOrder
    resignationType?: SortOrder
    dateOfBirth?: SortOrder
    idName?: SortOrder
    idNameAr?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    firstNameAr?: SortOrder
    lastNameAr?: SortOrder
    organizationId?: SortOrder
    entityId?: SortOrder
    budgetId?: SortOrder
    departmentId?: SortOrder
    divisionId?: SortOrder
    unitId?: SortOrder
    positionId?: SortOrder
    gradeId?: SortOrder
    locationId?: SortOrder
    directManagerCode?: SortOrder
    directManagerName?: SortOrder
    managerId?: SortOrder
    contractTypeId?: SortOrder
    nationalityId?: SortOrder
    genderId?: SortOrder
    maritalStatusId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    personalPhoneNumber1?: SortOrder
    corporatePhoneNumber?: SortOrder
    idNumber?: SortOrder
    idPlaceOfIssue?: SortOrder
    idAddress?: SortOrder
    idAddressAr?: SortOrder
    idZoneOfResidence?: SortOrder
    placeOfBirth?: SortOrder
    companyId?: SortOrder
    cleared?: SortOrder
    disabilityType?: SortOrder
    sourceId?: SortOrder
    insertionDate?: SortOrder
    updateDate?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    employeeCategory?: SortOrder
    registerName?: SortOrder
    statusId?: SortOrder
    expectedStartDate?: SortOrder
    actualStartDate?: SortOrder
    probationEndDate?: SortOrder
    terminationDate?: SortOrder
    terminationReason?: SortOrder
    resignationType?: SortOrder
    dateOfBirth?: SortOrder
    idName?: SortOrder
    idNameAr?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    firstNameAr?: SortOrder
    lastNameAr?: SortOrder
    organizationId?: SortOrder
    entityId?: SortOrder
    budgetId?: SortOrder
    departmentId?: SortOrder
    divisionId?: SortOrder
    unitId?: SortOrder
    positionId?: SortOrder
    gradeId?: SortOrder
    locationId?: SortOrder
    directManagerCode?: SortOrder
    directManagerName?: SortOrder
    managerId?: SortOrder
    contractTypeId?: SortOrder
    nationalityId?: SortOrder
    genderId?: SortOrder
    maritalStatusId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    personalPhoneNumber1?: SortOrder
    corporatePhoneNumber?: SortOrder
    idNumber?: SortOrder
    idPlaceOfIssue?: SortOrder
    idAddress?: SortOrder
    idAddressAr?: SortOrder
    idZoneOfResidence?: SortOrder
    placeOfBirth?: SortOrder
    companyId?: SortOrder
    cleared?: SortOrder
    disabilityType?: SortOrder
    sourceId?: SortOrder
    insertionDate?: SortOrder
    updateDate?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    sourceId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutPositionInput = {
    create?: XOR<UserCreateWithoutPositionInput, UserUncheckedCreateWithoutPositionInput> | UserCreateWithoutPositionInput[] | UserUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPositionInput | UserCreateOrConnectWithoutPositionInput[]
    createMany?: UserCreateManyPositionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPositionInput = {
    create?: XOR<UserCreateWithoutPositionInput, UserUncheckedCreateWithoutPositionInput> | UserCreateWithoutPositionInput[] | UserUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPositionInput | UserCreateOrConnectWithoutPositionInput[]
    createMany?: UserCreateManyPositionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type UserUpdateManyWithoutPositionNestedInput = {
    create?: XOR<UserCreateWithoutPositionInput, UserUncheckedCreateWithoutPositionInput> | UserCreateWithoutPositionInput[] | UserUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPositionInput | UserCreateOrConnectWithoutPositionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPositionInput | UserUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: UserCreateManyPositionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPositionInput | UserUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPositionInput | UserUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPositionNestedInput = {
    create?: XOR<UserCreateWithoutPositionInput, UserUncheckedCreateWithoutPositionInput> | UserCreateWithoutPositionInput[] | UserUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPositionInput | UserCreateOrConnectWithoutPositionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPositionInput | UserUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: UserCreateManyPositionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPositionInput | UserUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPositionInput | UserUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutDivisionInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDivisionInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDivisionInput | UserUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDivisionInput | UserUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDivisionInput | UserUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDivisionInput | UserUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDivisionInput | UserUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDivisionInput | UserUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutUnitInput = {
    create?: XOR<UserCreateWithoutUnitInput, UserUncheckedCreateWithoutUnitInput> | UserCreateWithoutUnitInput[] | UserUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUnitInput | UserCreateOrConnectWithoutUnitInput[]
    createMany?: UserCreateManyUnitInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<UserCreateWithoutUnitInput, UserUncheckedCreateWithoutUnitInput> | UserCreateWithoutUnitInput[] | UserUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUnitInput | UserCreateOrConnectWithoutUnitInput[]
    createMany?: UserCreateManyUnitInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutUnitNestedInput = {
    create?: XOR<UserCreateWithoutUnitInput, UserUncheckedCreateWithoutUnitInput> | UserCreateWithoutUnitInput[] | UserUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUnitInput | UserCreateOrConnectWithoutUnitInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUnitInput | UserUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: UserCreateManyUnitInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUnitInput | UserUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUnitInput | UserUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<UserCreateWithoutUnitInput, UserUncheckedCreateWithoutUnitInput> | UserCreateWithoutUnitInput[] | UserUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUnitInput | UserCreateOrConnectWithoutUnitInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUnitInput | UserUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: UserCreateManyUnitInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUnitInput | UserUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUnitInput | UserUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutGradeInput = {
    create?: XOR<UserCreateWithoutGradeInput, UserUncheckedCreateWithoutGradeInput> | UserCreateWithoutGradeInput[] | UserUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGradeInput | UserCreateOrConnectWithoutGradeInput[]
    createMany?: UserCreateManyGradeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<UserCreateWithoutGradeInput, UserUncheckedCreateWithoutGradeInput> | UserCreateWithoutGradeInput[] | UserUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGradeInput | UserCreateOrConnectWithoutGradeInput[]
    createMany?: UserCreateManyGradeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutGradeNestedInput = {
    create?: XOR<UserCreateWithoutGradeInput, UserUncheckedCreateWithoutGradeInput> | UserCreateWithoutGradeInput[] | UserUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGradeInput | UserCreateOrConnectWithoutGradeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGradeInput | UserUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: UserCreateManyGradeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGradeInput | UserUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGradeInput | UserUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<UserCreateWithoutGradeInput, UserUncheckedCreateWithoutGradeInput> | UserCreateWithoutGradeInput[] | UserUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGradeInput | UserCreateOrConnectWithoutGradeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGradeInput | UserUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: UserCreateManyGradeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGradeInput | UserUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGradeInput | UserUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutLocationInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutLocationNestedInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLocationInput | UserUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLocationInput | UserUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLocationInput | UserUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput> | UserCreateWithoutLocationInput[] | UserUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput | UserCreateOrConnectWithoutLocationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLocationInput | UserUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: UserCreateManyLocationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLocationInput | UserUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLocationInput | UserUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutContractTypeInput = {
    create?: XOR<UserCreateWithoutContractTypeInput, UserUncheckedCreateWithoutContractTypeInput> | UserCreateWithoutContractTypeInput[] | UserUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutContractTypeInput | UserCreateOrConnectWithoutContractTypeInput[]
    createMany?: UserCreateManyContractTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutContractTypeInput = {
    create?: XOR<UserCreateWithoutContractTypeInput, UserUncheckedCreateWithoutContractTypeInput> | UserCreateWithoutContractTypeInput[] | UserUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutContractTypeInput | UserCreateOrConnectWithoutContractTypeInput[]
    createMany?: UserCreateManyContractTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutContractTypeNestedInput = {
    create?: XOR<UserCreateWithoutContractTypeInput, UserUncheckedCreateWithoutContractTypeInput> | UserCreateWithoutContractTypeInput[] | UserUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutContractTypeInput | UserCreateOrConnectWithoutContractTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutContractTypeInput | UserUpsertWithWhereUniqueWithoutContractTypeInput[]
    createMany?: UserCreateManyContractTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutContractTypeInput | UserUpdateWithWhereUniqueWithoutContractTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutContractTypeInput | UserUpdateManyWithWhereWithoutContractTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutContractTypeNestedInput = {
    create?: XOR<UserCreateWithoutContractTypeInput, UserUncheckedCreateWithoutContractTypeInput> | UserCreateWithoutContractTypeInput[] | UserUncheckedCreateWithoutContractTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutContractTypeInput | UserCreateOrConnectWithoutContractTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutContractTypeInput | UserUpsertWithWhereUniqueWithoutContractTypeInput[]
    createMany?: UserCreateManyContractTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutContractTypeInput | UserUpdateWithWhereUniqueWithoutContractTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutContractTypeInput | UserUpdateManyWithWhereWithoutContractTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutNationalityInput = {
    create?: XOR<UserCreateWithoutNationalityInput, UserUncheckedCreateWithoutNationalityInput> | UserCreateWithoutNationalityInput[] | UserUncheckedCreateWithoutNationalityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNationalityInput | UserCreateOrConnectWithoutNationalityInput[]
    createMany?: UserCreateManyNationalityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutNationalityInput = {
    create?: XOR<UserCreateWithoutNationalityInput, UserUncheckedCreateWithoutNationalityInput> | UserCreateWithoutNationalityInput[] | UserUncheckedCreateWithoutNationalityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNationalityInput | UserCreateOrConnectWithoutNationalityInput[]
    createMany?: UserCreateManyNationalityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutNationalityNestedInput = {
    create?: XOR<UserCreateWithoutNationalityInput, UserUncheckedCreateWithoutNationalityInput> | UserCreateWithoutNationalityInput[] | UserUncheckedCreateWithoutNationalityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNationalityInput | UserCreateOrConnectWithoutNationalityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutNationalityInput | UserUpsertWithWhereUniqueWithoutNationalityInput[]
    createMany?: UserCreateManyNationalityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutNationalityInput | UserUpdateWithWhereUniqueWithoutNationalityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutNationalityInput | UserUpdateManyWithWhereWithoutNationalityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutNationalityNestedInput = {
    create?: XOR<UserCreateWithoutNationalityInput, UserUncheckedCreateWithoutNationalityInput> | UserCreateWithoutNationalityInput[] | UserUncheckedCreateWithoutNationalityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNationalityInput | UserCreateOrConnectWithoutNationalityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutNationalityInput | UserUpsertWithWhereUniqueWithoutNationalityInput[]
    createMany?: UserCreateManyNationalityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutNationalityInput | UserUpdateWithWhereUniqueWithoutNationalityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutNationalityInput | UserUpdateManyWithWhereWithoutNationalityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutGenderInput = {
    create?: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput> | UserCreateWithoutGenderInput[] | UserUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGenderInput | UserCreateOrConnectWithoutGenderInput[]
    createMany?: UserCreateManyGenderInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutGenderInput = {
    create?: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput> | UserCreateWithoutGenderInput[] | UserUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGenderInput | UserCreateOrConnectWithoutGenderInput[]
    createMany?: UserCreateManyGenderInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutGenderNestedInput = {
    create?: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput> | UserCreateWithoutGenderInput[] | UserUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGenderInput | UserCreateOrConnectWithoutGenderInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGenderInput | UserUpsertWithWhereUniqueWithoutGenderInput[]
    createMany?: UserCreateManyGenderInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGenderInput | UserUpdateWithWhereUniqueWithoutGenderInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGenderInput | UserUpdateManyWithWhereWithoutGenderInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutGenderNestedInput = {
    create?: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput> | UserCreateWithoutGenderInput[] | UserUncheckedCreateWithoutGenderInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGenderInput | UserCreateOrConnectWithoutGenderInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGenderInput | UserUpsertWithWhereUniqueWithoutGenderInput[]
    createMany?: UserCreateManyGenderInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGenderInput | UserUpdateWithWhereUniqueWithoutGenderInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGenderInput | UserUpdateManyWithWhereWithoutGenderInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutMaritalStatusInput = {
    create?: XOR<UserCreateWithoutMaritalStatusInput, UserUncheckedCreateWithoutMaritalStatusInput> | UserCreateWithoutMaritalStatusInput[] | UserUncheckedCreateWithoutMaritalStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMaritalStatusInput | UserCreateOrConnectWithoutMaritalStatusInput[]
    createMany?: UserCreateManyMaritalStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutMaritalStatusInput = {
    create?: XOR<UserCreateWithoutMaritalStatusInput, UserUncheckedCreateWithoutMaritalStatusInput> | UserCreateWithoutMaritalStatusInput[] | UserUncheckedCreateWithoutMaritalStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMaritalStatusInput | UserCreateOrConnectWithoutMaritalStatusInput[]
    createMany?: UserCreateManyMaritalStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutMaritalStatusNestedInput = {
    create?: XOR<UserCreateWithoutMaritalStatusInput, UserUncheckedCreateWithoutMaritalStatusInput> | UserCreateWithoutMaritalStatusInput[] | UserUncheckedCreateWithoutMaritalStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMaritalStatusInput | UserCreateOrConnectWithoutMaritalStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMaritalStatusInput | UserUpsertWithWhereUniqueWithoutMaritalStatusInput[]
    createMany?: UserCreateManyMaritalStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMaritalStatusInput | UserUpdateWithWhereUniqueWithoutMaritalStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMaritalStatusInput | UserUpdateManyWithWhereWithoutMaritalStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutMaritalStatusNestedInput = {
    create?: XOR<UserCreateWithoutMaritalStatusInput, UserUncheckedCreateWithoutMaritalStatusInput> | UserCreateWithoutMaritalStatusInput[] | UserUncheckedCreateWithoutMaritalStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMaritalStatusInput | UserCreateOrConnectWithoutMaritalStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMaritalStatusInput | UserUpsertWithWhereUniqueWithoutMaritalStatusInput[]
    createMany?: UserCreateManyMaritalStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMaritalStatusInput | UserUpdateWithWhereUniqueWithoutMaritalStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMaritalStatusInput | UserUpdateManyWithWhereWithoutMaritalStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutEntityInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutEntityNestedInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEntityInput | UserUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEntityInput | UserUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEntityInput | UserUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEntityInput | UserUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEntityInput | UserUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEntityInput | UserUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutBudgetInput = {
    create?: XOR<UserCreateWithoutBudgetInput, UserUncheckedCreateWithoutBudgetInput> | UserCreateWithoutBudgetInput[] | UserUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBudgetInput | UserCreateOrConnectWithoutBudgetInput[]
    createMany?: UserCreateManyBudgetInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutBudgetInput = {
    create?: XOR<UserCreateWithoutBudgetInput, UserUncheckedCreateWithoutBudgetInput> | UserCreateWithoutBudgetInput[] | UserUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBudgetInput | UserCreateOrConnectWithoutBudgetInput[]
    createMany?: UserCreateManyBudgetInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutBudgetNestedInput = {
    create?: XOR<UserCreateWithoutBudgetInput, UserUncheckedCreateWithoutBudgetInput> | UserCreateWithoutBudgetInput[] | UserUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBudgetInput | UserCreateOrConnectWithoutBudgetInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBudgetInput | UserUpsertWithWhereUniqueWithoutBudgetInput[]
    createMany?: UserCreateManyBudgetInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBudgetInput | UserUpdateWithWhereUniqueWithoutBudgetInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBudgetInput | UserUpdateManyWithWhereWithoutBudgetInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutBudgetNestedInput = {
    create?: XOR<UserCreateWithoutBudgetInput, UserUncheckedCreateWithoutBudgetInput> | UserCreateWithoutBudgetInput[] | UserUncheckedCreateWithoutBudgetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBudgetInput | UserCreateOrConnectWithoutBudgetInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBudgetInput | UserUpsertWithWhereUniqueWithoutBudgetInput[]
    createMany?: UserCreateManyBudgetInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBudgetInput | UserUpdateWithWhereUniqueWithoutBudgetInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBudgetInput | UserUpdateManyWithWhereWithoutBudgetInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutStatusInput = {
    create?: XOR<UserCreateWithoutStatusInput, UserUncheckedCreateWithoutStatusInput> | UserCreateWithoutStatusInput[] | UserUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStatusInput | UserCreateOrConnectWithoutStatusInput[]
    createMany?: UserCreateManyStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<UserCreateWithoutStatusInput, UserUncheckedCreateWithoutStatusInput> | UserCreateWithoutStatusInput[] | UserUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStatusInput | UserCreateOrConnectWithoutStatusInput[]
    createMany?: UserCreateManyStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutStatusNestedInput = {
    create?: XOR<UserCreateWithoutStatusInput, UserUncheckedCreateWithoutStatusInput> | UserCreateWithoutStatusInput[] | UserUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStatusInput | UserCreateOrConnectWithoutStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStatusInput | UserUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: UserCreateManyStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStatusInput | UserUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStatusInput | UserUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<UserCreateWithoutStatusInput, UserUncheckedCreateWithoutStatusInput> | UserCreateWithoutStatusInput[] | UserUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStatusInput | UserCreateOrConnectWithoutStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStatusInput | UserUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: UserCreateManyStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStatusInput | UserUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStatusInput | UserUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuthInput = {
    create?: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type UserUpdateOneWithoutAuthNestedInput = {
    create?: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthInput
    upsert?: UserUpsertWithoutAuthInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthInput, UserUpdateWithoutAuthInput>, UserUncheckedUpdateWithoutAuthInput>
  }

  export type StatusCreateNestedOneWithoutUsersInput = {
    create?: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StatusCreateOrConnectWithoutUsersInput
    connect?: StatusWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EntityCreateNestedOneWithoutUsersInput = {
    create?: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: EntityCreateOrConnectWithoutUsersInput
    connect?: EntityWhereUniqueInput
  }

  export type BudgetCreateNestedOneWithoutUsersInput = {
    create?: XOR<BudgetCreateWithoutUsersInput, BudgetUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BudgetCreateOrConnectWithoutUsersInput
    connect?: BudgetWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DivisionCreateNestedOneWithoutUsersInput = {
    create?: XOR<DivisionCreateWithoutUsersInput, DivisionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutUsersInput
    connect?: DivisionWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutUsersInput = {
    create?: XOR<UnitCreateWithoutUsersInput, UnitUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UnitCreateOrConnectWithoutUsersInput
    connect?: UnitWhereUniqueInput
  }

  export type PositionCreateNestedOneWithoutUsersInput = {
    create?: XOR<PositionCreateWithoutUsersInput, PositionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PositionCreateOrConnectWithoutUsersInput
    connect?: PositionWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutUsersInput = {
    create?: XOR<GradeCreateWithoutUsersInput, GradeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GradeCreateOrConnectWithoutUsersInput
    connect?: GradeWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutUsersInput = {
    create?: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutUsersInput
    connect?: LocationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutManagesInput = {
    create?: XOR<UserCreateWithoutManagesInput, UserUncheckedCreateWithoutManagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutManagedByInput = {
    create?: XOR<UserCreateWithoutManagedByInput, UserUncheckedCreateWithoutManagedByInput> | UserCreateWithoutManagedByInput[] | UserUncheckedCreateWithoutManagedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutManagedByInput | UserCreateOrConnectWithoutManagedByInput[]
    createMany?: UserCreateManyManagedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ContractTypeCreateNestedOneWithoutUsersInput = {
    create?: XOR<ContractTypeCreateWithoutUsersInput, ContractTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ContractTypeCreateOrConnectWithoutUsersInput
    connect?: ContractTypeWhereUniqueInput
  }

  export type NationalityCreateNestedOneWithoutUsersInput = {
    create?: XOR<NationalityCreateWithoutUsersInput, NationalityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: NationalityCreateOrConnectWithoutUsersInput
    connect?: NationalityWhereUniqueInput
  }

  export type GenderCreateNestedOneWithoutUsersInput = {
    create?: XOR<GenderCreateWithoutUsersInput, GenderUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GenderCreateOrConnectWithoutUsersInput
    connect?: GenderWhereUniqueInput
  }

  export type MaritalStatusCreateNestedOneWithoutUsersInput = {
    create?: XOR<MaritalStatusCreateWithoutUsersInput, MaritalStatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MaritalStatusCreateOrConnectWithoutUsersInput
    connect?: MaritalStatusWhereUniqueInput
  }

  export type AuthCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput> | AuthCreateWithoutUserInput[] | AuthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput | AuthCreateOrConnectWithoutUserInput[]
    createMany?: AuthCreateManyUserInputEnvelope
    connect?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutManagedByInput = {
    create?: XOR<UserCreateWithoutManagedByInput, UserUncheckedCreateWithoutManagedByInput> | UserCreateWithoutManagedByInput[] | UserUncheckedCreateWithoutManagedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutManagedByInput | UserCreateOrConnectWithoutManagedByInput[]
    createMany?: UserCreateManyManagedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AuthUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput> | AuthCreateWithoutUserInput[] | AuthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput | AuthCreateOrConnectWithoutUserInput[]
    createMany?: AuthCreateManyUserInputEnvelope
    connect?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type StatusUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StatusCreateOrConnectWithoutUsersInput
    upsert?: StatusUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: StatusWhereInput | boolean
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutUsersInput, StatusUpdateWithoutUsersInput>, StatusUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type EntityUpdateOneWithoutUsersNestedInput = {
    create?: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: EntityCreateOrConnectWithoutUsersInput
    upsert?: EntityUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: EntityWhereInput | boolean
    connect?: EntityWhereUniqueInput
    update?: XOR<XOR<EntityUpdateToOneWithWhereWithoutUsersInput, EntityUpdateWithoutUsersInput>, EntityUncheckedUpdateWithoutUsersInput>
  }

  export type BudgetUpdateOneWithoutUsersNestedInput = {
    create?: XOR<BudgetCreateWithoutUsersInput, BudgetUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BudgetCreateOrConnectWithoutUsersInput
    upsert?: BudgetUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: BudgetWhereInput | boolean
    connect?: BudgetWhereUniqueInput
    update?: XOR<XOR<BudgetUpdateToOneWithWhereWithoutUsersInput, BudgetUpdateWithoutUsersInput>, BudgetUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DivisionUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DivisionCreateWithoutUsersInput, DivisionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutUsersInput
    upsert?: DivisionUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: DivisionWhereInput | boolean
    connect?: DivisionWhereUniqueInput
    update?: XOR<XOR<DivisionUpdateToOneWithWhereWithoutUsersInput, DivisionUpdateWithoutUsersInput>, DivisionUncheckedUpdateWithoutUsersInput>
  }

  export type UnitUpdateOneWithoutUsersNestedInput = {
    create?: XOR<UnitCreateWithoutUsersInput, UnitUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UnitCreateOrConnectWithoutUsersInput
    upsert?: UnitUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutUsersInput, UnitUpdateWithoutUsersInput>, UnitUncheckedUpdateWithoutUsersInput>
  }

  export type PositionUpdateOneWithoutUsersNestedInput = {
    create?: XOR<PositionCreateWithoutUsersInput, PositionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PositionCreateOrConnectWithoutUsersInput
    upsert?: PositionUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: PositionWhereInput | boolean
    connect?: PositionWhereUniqueInput
    update?: XOR<XOR<PositionUpdateToOneWithWhereWithoutUsersInput, PositionUpdateWithoutUsersInput>, PositionUncheckedUpdateWithoutUsersInput>
  }

  export type GradeUpdateOneWithoutUsersNestedInput = {
    create?: XOR<GradeCreateWithoutUsersInput, GradeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GradeCreateOrConnectWithoutUsersInput
    upsert?: GradeUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: GradeWhereInput | boolean
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutUsersInput, GradeUpdateWithoutUsersInput>, GradeUncheckedUpdateWithoutUsersInput>
  }

  export type LocationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutUsersInput
    upsert?: LocationUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutUsersInput, LocationUpdateWithoutUsersInput>, LocationUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneWithoutManagesNestedInput = {
    create?: XOR<UserCreateWithoutManagesInput, UserUncheckedCreateWithoutManagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagesInput
    upsert?: UserUpsertWithoutManagesInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagesInput, UserUpdateWithoutManagesInput>, UserUncheckedUpdateWithoutManagesInput>
  }

  export type UserUpdateManyWithoutManagedByNestedInput = {
    create?: XOR<UserCreateWithoutManagedByInput, UserUncheckedCreateWithoutManagedByInput> | UserCreateWithoutManagedByInput[] | UserUncheckedCreateWithoutManagedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutManagedByInput | UserCreateOrConnectWithoutManagedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutManagedByInput | UserUpsertWithWhereUniqueWithoutManagedByInput[]
    createMany?: UserCreateManyManagedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutManagedByInput | UserUpdateWithWhereUniqueWithoutManagedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutManagedByInput | UserUpdateManyWithWhereWithoutManagedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ContractTypeUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ContractTypeCreateWithoutUsersInput, ContractTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ContractTypeCreateOrConnectWithoutUsersInput
    upsert?: ContractTypeUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: ContractTypeWhereInput | boolean
    connect?: ContractTypeWhereUniqueInput
    update?: XOR<XOR<ContractTypeUpdateToOneWithWhereWithoutUsersInput, ContractTypeUpdateWithoutUsersInput>, ContractTypeUncheckedUpdateWithoutUsersInput>
  }

  export type NationalityUpdateOneWithoutUsersNestedInput = {
    create?: XOR<NationalityCreateWithoutUsersInput, NationalityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: NationalityCreateOrConnectWithoutUsersInput
    upsert?: NationalityUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: NationalityWhereInput | boolean
    connect?: NationalityWhereUniqueInput
    update?: XOR<XOR<NationalityUpdateToOneWithWhereWithoutUsersInput, NationalityUpdateWithoutUsersInput>, NationalityUncheckedUpdateWithoutUsersInput>
  }

  export type GenderUpdateOneWithoutUsersNestedInput = {
    create?: XOR<GenderCreateWithoutUsersInput, GenderUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GenderCreateOrConnectWithoutUsersInput
    upsert?: GenderUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: GenderWhereInput | boolean
    connect?: GenderWhereUniqueInput
    update?: XOR<XOR<GenderUpdateToOneWithWhereWithoutUsersInput, GenderUpdateWithoutUsersInput>, GenderUncheckedUpdateWithoutUsersInput>
  }

  export type MaritalStatusUpdateOneWithoutUsersNestedInput = {
    create?: XOR<MaritalStatusCreateWithoutUsersInput, MaritalStatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MaritalStatusCreateOrConnectWithoutUsersInput
    upsert?: MaritalStatusUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: MaritalStatusWhereInput | boolean
    connect?: MaritalStatusWhereUniqueInput
    update?: XOR<XOR<MaritalStatusUpdateToOneWithWhereWithoutUsersInput, MaritalStatusUpdateWithoutUsersInput>, MaritalStatusUncheckedUpdateWithoutUsersInput>
  }

  export type AuthUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput> | AuthCreateWithoutUserInput[] | AuthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput | AuthCreateOrConnectWithoutUserInput[]
    upsert?: AuthUpsertWithWhereUniqueWithoutUserInput | AuthUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthCreateManyUserInputEnvelope
    set?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    disconnect?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    delete?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    connect?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    update?: AuthUpdateWithWhereUniqueWithoutUserInput | AuthUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthUpdateManyWithWhereWithoutUserInput | AuthUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthScalarWhereInput | AuthScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutManagedByNestedInput = {
    create?: XOR<UserCreateWithoutManagedByInput, UserUncheckedCreateWithoutManagedByInput> | UserCreateWithoutManagedByInput[] | UserUncheckedCreateWithoutManagedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutManagedByInput | UserCreateOrConnectWithoutManagedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutManagedByInput | UserUpsertWithWhereUniqueWithoutManagedByInput[]
    createMany?: UserCreateManyManagedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutManagedByInput | UserUpdateWithWhereUniqueWithoutManagedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutManagedByInput | UserUpdateManyWithWhereWithoutManagedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AuthUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput> | AuthCreateWithoutUserInput[] | AuthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthCreateOrConnectWithoutUserInput | AuthCreateOrConnectWithoutUserInput[]
    upsert?: AuthUpsertWithWhereUniqueWithoutUserInput | AuthUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthCreateManyUserInputEnvelope
    set?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    disconnect?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    delete?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    connect?: AuthWhereUniqueInput | AuthWhereUniqueInput[]
    update?: AuthUpdateWithWhereUniqueWithoutUserInput | AuthUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthUpdateManyWithWhereWithoutUserInput | AuthUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthScalarWhereInput | AuthScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    employeeCode?: StringFilter<"User"> | string
    employeeCategory?: StringNullableFilter<"User"> | string | null
    registerName?: StringNullableFilter<"User"> | string | null
    statusId?: StringNullableFilter<"User"> | string | null
    expectedStartDate?: DateTimeNullableFilter<"User"> | Date | string | null
    actualStartDate?: DateTimeNullableFilter<"User"> | Date | string | null
    probationEndDate?: DateTimeNullableFilter<"User"> | Date | string | null
    terminationDate?: DateTimeNullableFilter<"User"> | Date | string | null
    terminationReason?: StringNullableFilter<"User"> | string | null
    resignationType?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    idName?: StringNullableFilter<"User"> | string | null
    idNameAr?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    firstNameAr?: StringNullableFilter<"User"> | string | null
    lastNameAr?: StringNullableFilter<"User"> | string | null
    organizationId?: StringNullableFilter<"User"> | string | null
    entityId?: StringNullableFilter<"User"> | string | null
    budgetId?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    divisionId?: StringNullableFilter<"User"> | string | null
    unitId?: StringNullableFilter<"User"> | string | null
    positionId?: StringNullableFilter<"User"> | string | null
    gradeId?: StringNullableFilter<"User"> | string | null
    locationId?: StringNullableFilter<"User"> | string | null
    directManagerCode?: StringNullableFilter<"User"> | string | null
    directManagerName?: StringNullableFilter<"User"> | string | null
    managerId?: StringNullableFilter<"User"> | string | null
    contractTypeId?: StringNullableFilter<"User"> | string | null
    nationalityId?: StringNullableFilter<"User"> | string | null
    genderId?: StringNullableFilter<"User"> | string | null
    maritalStatusId?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    personalPhoneNumber1?: StringNullableFilter<"User"> | string | null
    corporatePhoneNumber?: StringNullableFilter<"User"> | string | null
    idNumber?: StringNullableFilter<"User"> | string | null
    idPlaceOfIssue?: StringNullableFilter<"User"> | string | null
    idAddress?: StringNullableFilter<"User"> | string | null
    idAddressAr?: StringNullableFilter<"User"> | string | null
    idZoneOfResidence?: StringNullableFilter<"User"> | string | null
    placeOfBirth?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
    cleared?: StringNullableFilter<"User"> | string | null
    disabilityType?: StringNullableFilter<"User"> | string | null
    sourceId?: IntNullableFilter<"User"> | number | null
    insertionDate?: DateTimeNullableFilter<"User"> | Date | string | null
    updateDate?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type UserCreateWithoutPositionInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPositionInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPositionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPositionInput, UserUncheckedCreateWithoutPositionInput>
  }

  export type UserCreateManyPositionInputEnvelope = {
    data: UserCreateManyPositionInput | UserCreateManyPositionInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutPositionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPositionInput, UserUncheckedUpdateWithoutPositionInput>
    create: XOR<UserCreateWithoutPositionInput, UserUncheckedCreateWithoutPositionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPositionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPositionInput, UserUncheckedUpdateWithoutPositionInput>
  }

  export type UserUpdateManyWithWhereWithoutPositionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPositionInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutDivisionInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDivisionInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDivisionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput>
  }

  export type UserCreateManyDivisionInputEnvelope = {
    data: UserCreateManyDivisionInput | UserCreateManyDivisionInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutDivisionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDivisionInput, UserUncheckedUpdateWithoutDivisionInput>
    create: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDivisionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDivisionInput, UserUncheckedUpdateWithoutDivisionInput>
  }

  export type UserUpdateManyWithWhereWithoutDivisionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDivisionInput>
  }

  export type UserCreateWithoutUnitInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUnitInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUnitInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUnitInput, UserUncheckedCreateWithoutUnitInput>
  }

  export type UserCreateManyUnitInputEnvelope = {
    data: UserCreateManyUnitInput | UserCreateManyUnitInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutUnitInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUnitInput, UserUncheckedUpdateWithoutUnitInput>
    create: XOR<UserCreateWithoutUnitInput, UserUncheckedCreateWithoutUnitInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUnitInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUnitInput, UserUncheckedUpdateWithoutUnitInput>
  }

  export type UserUpdateManyWithWhereWithoutUnitInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUnitInput>
  }

  export type UserCreateWithoutGradeInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGradeInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGradeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGradeInput, UserUncheckedCreateWithoutGradeInput>
  }

  export type UserCreateManyGradeInputEnvelope = {
    data: UserCreateManyGradeInput | UserCreateManyGradeInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutGradeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGradeInput, UserUncheckedUpdateWithoutGradeInput>
    create: XOR<UserCreateWithoutGradeInput, UserUncheckedCreateWithoutGradeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGradeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGradeInput, UserUncheckedUpdateWithoutGradeInput>
  }

  export type UserUpdateManyWithWhereWithoutGradeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGradeInput>
  }

  export type UserCreateWithoutLocationInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLocationInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLocationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type UserCreateManyLocationInputEnvelope = {
    data: UserCreateManyLocationInput | UserCreateManyLocationInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutLocationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLocationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
  }

  export type UserUpdateManyWithWhereWithoutLocationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLocationInput>
  }

  export type UserCreateWithoutContractTypeInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContractTypeInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContractTypeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContractTypeInput, UserUncheckedCreateWithoutContractTypeInput>
  }

  export type UserCreateManyContractTypeInputEnvelope = {
    data: UserCreateManyContractTypeInput | UserCreateManyContractTypeInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutContractTypeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutContractTypeInput, UserUncheckedUpdateWithoutContractTypeInput>
    create: XOR<UserCreateWithoutContractTypeInput, UserUncheckedCreateWithoutContractTypeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutContractTypeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutContractTypeInput, UserUncheckedUpdateWithoutContractTypeInput>
  }

  export type UserUpdateManyWithWhereWithoutContractTypeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutContractTypeInput>
  }

  export type UserCreateWithoutNationalityInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNationalityInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNationalityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNationalityInput, UserUncheckedCreateWithoutNationalityInput>
  }

  export type UserCreateManyNationalityInputEnvelope = {
    data: UserCreateManyNationalityInput | UserCreateManyNationalityInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutNationalityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutNationalityInput, UserUncheckedUpdateWithoutNationalityInput>
    create: XOR<UserCreateWithoutNationalityInput, UserUncheckedCreateWithoutNationalityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutNationalityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutNationalityInput, UserUncheckedUpdateWithoutNationalityInput>
  }

  export type UserUpdateManyWithWhereWithoutNationalityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutNationalityInput>
  }

  export type UserCreateWithoutGenderInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGenderInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput>
  }

  export type UserCreateManyGenderInputEnvelope = {
    data: UserCreateManyGenderInput | UserCreateManyGenderInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutGenderInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGenderInput, UserUncheckedUpdateWithoutGenderInput>
    create: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGenderInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGenderInput, UserUncheckedUpdateWithoutGenderInput>
  }

  export type UserUpdateManyWithWhereWithoutGenderInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGenderInput>
  }

  export type UserCreateWithoutMaritalStatusInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMaritalStatusInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMaritalStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMaritalStatusInput, UserUncheckedCreateWithoutMaritalStatusInput>
  }

  export type UserCreateManyMaritalStatusInputEnvelope = {
    data: UserCreateManyMaritalStatusInput | UserCreateManyMaritalStatusInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutMaritalStatusInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMaritalStatusInput, UserUncheckedUpdateWithoutMaritalStatusInput>
    create: XOR<UserCreateWithoutMaritalStatusInput, UserUncheckedCreateWithoutMaritalStatusInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMaritalStatusInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMaritalStatusInput, UserUncheckedUpdateWithoutMaritalStatusInput>
  }

  export type UserUpdateManyWithWhereWithoutMaritalStatusInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMaritalStatusInput>
  }

  export type UserCreateWithoutEntityInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEntityInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEntityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput>
  }

  export type UserCreateManyEntityInputEnvelope = {
    data: UserCreateManyEntityInput | UserCreateManyEntityInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutEntityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutEntityInput, UserUncheckedUpdateWithoutEntityInput>
    create: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutEntityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutEntityInput, UserUncheckedUpdateWithoutEntityInput>
  }

  export type UserUpdateManyWithWhereWithoutEntityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutEntityInput>
  }

  export type UserCreateWithoutBudgetInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBudgetInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBudgetInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBudgetInput, UserUncheckedCreateWithoutBudgetInput>
  }

  export type UserCreateManyBudgetInputEnvelope = {
    data: UserCreateManyBudgetInput | UserCreateManyBudgetInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutBudgetInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBudgetInput, UserUncheckedUpdateWithoutBudgetInput>
    create: XOR<UserCreateWithoutBudgetInput, UserUncheckedCreateWithoutBudgetInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBudgetInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBudgetInput, UserUncheckedUpdateWithoutBudgetInput>
  }

  export type UserUpdateManyWithWhereWithoutBudgetInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBudgetInput>
  }

  export type UserCreateWithoutStatusInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatusInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusInput, UserUncheckedCreateWithoutStatusInput>
  }

  export type UserCreateManyStatusInputEnvelope = {
    data: UserCreateManyStatusInput | UserCreateManyStatusInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutStatusInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStatusInput, UserUncheckedUpdateWithoutStatusInput>
    create: XOR<UserCreateWithoutStatusInput, UserUncheckedCreateWithoutStatusInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStatusInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStatusInput, UserUncheckedUpdateWithoutStatusInput>
  }

  export type UserUpdateManyWithWhereWithoutStatusInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStatusInput>
  }

  export type UserCreateWithoutAuthInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAuthInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
  }

  export type UserCreateOrConnectWithoutAuthInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
  }

  export type UserUpsertWithoutAuthInput = {
    update: XOR<UserUpdateWithoutAuthInput, UserUncheckedUpdateWithoutAuthInput>
    create: XOR<UserCreateWithoutAuthInput, UserUncheckedCreateWithoutAuthInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthInput, UserUncheckedUpdateWithoutAuthInput>
  }

  export type UserUpdateWithoutAuthInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
  }

  export type StatusCreateWithoutUsersInput = {
    id?: string
    statusName: string
  }

  export type StatusUncheckedCreateWithoutUsersInput = {
    id?: string
    statusName: string
  }

  export type StatusCreateOrConnectWithoutUsersInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    name: string
    value: string
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    value: string
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type EntityCreateWithoutUsersInput = {
    id?: string
    entityName: string
  }

  export type EntityUncheckedCreateWithoutUsersInput = {
    id?: string
    entityName: string
  }

  export type EntityCreateOrConnectWithoutUsersInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
  }

  export type BudgetCreateWithoutUsersInput = {
    id?: string
    budgetName: string
  }

  export type BudgetUncheckedCreateWithoutUsersInput = {
    id?: string
    budgetName: string
  }

  export type BudgetCreateOrConnectWithoutUsersInput = {
    where: BudgetWhereUniqueInput
    create: XOR<BudgetCreateWithoutUsersInput, BudgetUncheckedCreateWithoutUsersInput>
  }

  export type DepartmentCreateWithoutUsersInput = {
    id?: string
    departmentEn: string
    departmentAr?: string | null
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: string
    departmentEn: string
    departmentAr?: string | null
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type DivisionCreateWithoutUsersInput = {
    id?: string
    divisionName: string
  }

  export type DivisionUncheckedCreateWithoutUsersInput = {
    id?: string
    divisionName: string
  }

  export type DivisionCreateOrConnectWithoutUsersInput = {
    where: DivisionWhereUniqueInput
    create: XOR<DivisionCreateWithoutUsersInput, DivisionUncheckedCreateWithoutUsersInput>
  }

  export type UnitCreateWithoutUsersInput = {
    id?: string
    unitName: string
  }

  export type UnitUncheckedCreateWithoutUsersInput = {
    id?: string
    unitName: string
  }

  export type UnitCreateOrConnectWithoutUsersInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutUsersInput, UnitUncheckedCreateWithoutUsersInput>
  }

  export type PositionCreateWithoutUsersInput = {
    id?: string
    positionEn: string
    positionAr?: string | null
  }

  export type PositionUncheckedCreateWithoutUsersInput = {
    id?: string
    positionEn: string
    positionAr?: string | null
  }

  export type PositionCreateOrConnectWithoutUsersInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutUsersInput, PositionUncheckedCreateWithoutUsersInput>
  }

  export type GradeCreateWithoutUsersInput = {
    id?: string
    gradeOfficial: number
    gradeInternal?: string | null
  }

  export type GradeUncheckedCreateWithoutUsersInput = {
    id?: string
    gradeOfficial: number
    gradeInternal?: string | null
  }

  export type GradeCreateOrConnectWithoutUsersInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutUsersInput, GradeUncheckedCreateWithoutUsersInput>
  }

  export type LocationCreateWithoutUsersInput = {
    id?: string
    locationName: string
  }

  export type LocationUncheckedCreateWithoutUsersInput = {
    id?: string
    locationName: string
  }

  export type LocationCreateOrConnectWithoutUsersInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutManagesInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    managedBy?: UserCreateNestedOneWithoutManagesInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagesInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagesInput, UserUncheckedCreateWithoutManagesInput>
  }

  export type UserCreateWithoutManagedByInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    status?: StatusCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    entity?: EntityCreateNestedOneWithoutUsersInput
    budget?: BudgetCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    division?: DivisionCreateNestedOneWithoutUsersInput
    unit?: UnitCreateNestedOneWithoutUsersInput
    position?: PositionCreateNestedOneWithoutUsersInput
    grade?: GradeCreateNestedOneWithoutUsersInput
    location?: LocationCreateNestedOneWithoutUsersInput
    manages?: UserCreateNestedManyWithoutManagedByInput
    contractType?: ContractTypeCreateNestedOneWithoutUsersInput
    nationality?: NationalityCreateNestedOneWithoutUsersInput
    gender?: GenderCreateNestedOneWithoutUsersInput
    maritalStatus?: MaritalStatusCreateNestedOneWithoutUsersInput
    auth?: AuthCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagedByInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
    manages?: UserUncheckedCreateNestedManyWithoutManagedByInput
    auth?: AuthUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedByInput, UserUncheckedCreateWithoutManagedByInput>
  }

  export type UserCreateManyManagedByInputEnvelope = {
    data: UserCreateManyManagedByInput | UserCreateManyManagedByInput[]
  }

  export type ContractTypeCreateWithoutUsersInput = {
    id?: string
    typeName: string
  }

  export type ContractTypeUncheckedCreateWithoutUsersInput = {
    id?: string
    typeName: string
  }

  export type ContractTypeCreateOrConnectWithoutUsersInput = {
    where: ContractTypeWhereUniqueInput
    create: XOR<ContractTypeCreateWithoutUsersInput, ContractTypeUncheckedCreateWithoutUsersInput>
  }

  export type NationalityCreateWithoutUsersInput = {
    id?: string
    nationalityEn: string
    nationalityAr?: string | null
  }

  export type NationalityUncheckedCreateWithoutUsersInput = {
    id?: string
    nationalityEn: string
    nationalityAr?: string | null
  }

  export type NationalityCreateOrConnectWithoutUsersInput = {
    where: NationalityWhereUniqueInput
    create: XOR<NationalityCreateWithoutUsersInput, NationalityUncheckedCreateWithoutUsersInput>
  }

  export type GenderCreateWithoutUsersInput = {
    id?: string
    genderEn: string
    genderAr?: string | null
  }

  export type GenderUncheckedCreateWithoutUsersInput = {
    id?: string
    genderEn: string
    genderAr?: string | null
  }

  export type GenderCreateOrConnectWithoutUsersInput = {
    where: GenderWhereUniqueInput
    create: XOR<GenderCreateWithoutUsersInput, GenderUncheckedCreateWithoutUsersInput>
  }

  export type MaritalStatusCreateWithoutUsersInput = {
    id?: string
    statusEn: string
    statusAr?: string | null
  }

  export type MaritalStatusUncheckedCreateWithoutUsersInput = {
    id?: string
    statusEn: string
    statusAr?: string | null
  }

  export type MaritalStatusCreateOrConnectWithoutUsersInput = {
    where: MaritalStatusWhereUniqueInput
    create: XOR<MaritalStatusCreateWithoutUsersInput, MaritalStatusUncheckedCreateWithoutUsersInput>
  }

  export type AuthCreateWithoutUserInput = {
    id?: string
    employeeCode: string
    token?: string | null
    refreshToken?: string | null
    tokenExpiry?: Date | string | null
  }

  export type AuthUncheckedCreateWithoutUserInput = {
    id?: string
    employeeCode: string
    token?: string | null
    refreshToken?: string | null
    tokenExpiry?: Date | string | null
  }

  export type AuthCreateOrConnectWithoutUserInput = {
    where: AuthWhereUniqueInput
    create: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
  }

  export type AuthCreateManyUserInputEnvelope = {
    data: AuthCreateManyUserInput | AuthCreateManyUserInput[]
  }

  export type StatusUpsertWithoutUsersInput = {
    update: XOR<StatusUpdateWithoutUsersInput, StatusUncheckedUpdateWithoutUsersInput>
    create: XOR<StatusCreateWithoutUsersInput, StatusUncheckedCreateWithoutUsersInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutUsersInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutUsersInput, StatusUncheckedUpdateWithoutUsersInput>
  }

  export type StatusUpdateWithoutUsersInput = {
    statusName?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateWithoutUsersInput = {
    statusName?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type EntityUpsertWithoutUsersInput = {
    update: XOR<EntityUpdateWithoutUsersInput, EntityUncheckedUpdateWithoutUsersInput>
    create: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
    where?: EntityWhereInput
  }

  export type EntityUpdateToOneWithWhereWithoutUsersInput = {
    where?: EntityWhereInput
    data: XOR<EntityUpdateWithoutUsersInput, EntityUncheckedUpdateWithoutUsersInput>
  }

  export type EntityUpdateWithoutUsersInput = {
    entityName?: StringFieldUpdateOperationsInput | string
  }

  export type EntityUncheckedUpdateWithoutUsersInput = {
    entityName?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetUpsertWithoutUsersInput = {
    update: XOR<BudgetUpdateWithoutUsersInput, BudgetUncheckedUpdateWithoutUsersInput>
    create: XOR<BudgetCreateWithoutUsersInput, BudgetUncheckedCreateWithoutUsersInput>
    where?: BudgetWhereInput
  }

  export type BudgetUpdateToOneWithWhereWithoutUsersInput = {
    where?: BudgetWhereInput
    data: XOR<BudgetUpdateWithoutUsersInput, BudgetUncheckedUpdateWithoutUsersInput>
  }

  export type BudgetUpdateWithoutUsersInput = {
    budgetName?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetUncheckedUpdateWithoutUsersInput = {
    budgetName?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    departmentEn?: StringFieldUpdateOperationsInput | string
    departmentAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    departmentEn?: StringFieldUpdateOperationsInput | string
    departmentAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DivisionUpsertWithoutUsersInput = {
    update: XOR<DivisionUpdateWithoutUsersInput, DivisionUncheckedUpdateWithoutUsersInput>
    create: XOR<DivisionCreateWithoutUsersInput, DivisionUncheckedCreateWithoutUsersInput>
    where?: DivisionWhereInput
  }

  export type DivisionUpdateToOneWithWhereWithoutUsersInput = {
    where?: DivisionWhereInput
    data: XOR<DivisionUpdateWithoutUsersInput, DivisionUncheckedUpdateWithoutUsersInput>
  }

  export type DivisionUpdateWithoutUsersInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type DivisionUncheckedUpdateWithoutUsersInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUpsertWithoutUsersInput = {
    update: XOR<UnitUpdateWithoutUsersInput, UnitUncheckedUpdateWithoutUsersInput>
    create: XOR<UnitCreateWithoutUsersInput, UnitUncheckedCreateWithoutUsersInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutUsersInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutUsersInput, UnitUncheckedUpdateWithoutUsersInput>
  }

  export type UnitUpdateWithoutUsersInput = {
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateWithoutUsersInput = {
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type PositionUpsertWithoutUsersInput = {
    update: XOR<PositionUpdateWithoutUsersInput, PositionUncheckedUpdateWithoutUsersInput>
    create: XOR<PositionCreateWithoutUsersInput, PositionUncheckedCreateWithoutUsersInput>
    where?: PositionWhereInput
  }

  export type PositionUpdateToOneWithWhereWithoutUsersInput = {
    where?: PositionWhereInput
    data: XOR<PositionUpdateWithoutUsersInput, PositionUncheckedUpdateWithoutUsersInput>
  }

  export type PositionUpdateWithoutUsersInput = {
    positionEn?: StringFieldUpdateOperationsInput | string
    positionAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PositionUncheckedUpdateWithoutUsersInput = {
    positionEn?: StringFieldUpdateOperationsInput | string
    positionAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeUpsertWithoutUsersInput = {
    update: XOR<GradeUpdateWithoutUsersInput, GradeUncheckedUpdateWithoutUsersInput>
    create: XOR<GradeCreateWithoutUsersInput, GradeUncheckedCreateWithoutUsersInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutUsersInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutUsersInput, GradeUncheckedUpdateWithoutUsersInput>
  }

  export type GradeUpdateWithoutUsersInput = {
    gradeOfficial?: IntFieldUpdateOperationsInput | number
    gradeInternal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeUncheckedUpdateWithoutUsersInput = {
    gradeOfficial?: IntFieldUpdateOperationsInput | number
    gradeInternal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUpsertWithoutUsersInput = {
    update: XOR<LocationUpdateWithoutUsersInput, LocationUncheckedUpdateWithoutUsersInput>
    create: XOR<LocationCreateWithoutUsersInput, LocationUncheckedCreateWithoutUsersInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutUsersInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutUsersInput, LocationUncheckedUpdateWithoutUsersInput>
  }

  export type LocationUpdateWithoutUsersInput = {
    locationName?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUncheckedUpdateWithoutUsersInput = {
    locationName?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutManagesInput = {
    update: XOR<UserUpdateWithoutManagesInput, UserUncheckedUpdateWithoutManagesInput>
    create: XOR<UserCreateWithoutManagesInput, UserUncheckedCreateWithoutManagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagesInput, UserUncheckedUpdateWithoutManagesInput>
  }

  export type UserUpdateWithoutManagesInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagesInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutManagedByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutManagedByInput, UserUncheckedUpdateWithoutManagedByInput>
    create: XOR<UserCreateWithoutManagedByInput, UserUncheckedCreateWithoutManagedByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutManagedByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutManagedByInput, UserUncheckedUpdateWithoutManagedByInput>
  }

  export type UserUpdateManyWithWhereWithoutManagedByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutManagedByInput>
  }

  export type ContractTypeUpsertWithoutUsersInput = {
    update: XOR<ContractTypeUpdateWithoutUsersInput, ContractTypeUncheckedUpdateWithoutUsersInput>
    create: XOR<ContractTypeCreateWithoutUsersInput, ContractTypeUncheckedCreateWithoutUsersInput>
    where?: ContractTypeWhereInput
  }

  export type ContractTypeUpdateToOneWithWhereWithoutUsersInput = {
    where?: ContractTypeWhereInput
    data: XOR<ContractTypeUpdateWithoutUsersInput, ContractTypeUncheckedUpdateWithoutUsersInput>
  }

  export type ContractTypeUpdateWithoutUsersInput = {
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type ContractTypeUncheckedUpdateWithoutUsersInput = {
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type NationalityUpsertWithoutUsersInput = {
    update: XOR<NationalityUpdateWithoutUsersInput, NationalityUncheckedUpdateWithoutUsersInput>
    create: XOR<NationalityCreateWithoutUsersInput, NationalityUncheckedCreateWithoutUsersInput>
    where?: NationalityWhereInput
  }

  export type NationalityUpdateToOneWithWhereWithoutUsersInput = {
    where?: NationalityWhereInput
    data: XOR<NationalityUpdateWithoutUsersInput, NationalityUncheckedUpdateWithoutUsersInput>
  }

  export type NationalityUpdateWithoutUsersInput = {
    nationalityEn?: StringFieldUpdateOperationsInput | string
    nationalityAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NationalityUncheckedUpdateWithoutUsersInput = {
    nationalityEn?: StringFieldUpdateOperationsInput | string
    nationalityAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderUpsertWithoutUsersInput = {
    update: XOR<GenderUpdateWithoutUsersInput, GenderUncheckedUpdateWithoutUsersInput>
    create: XOR<GenderCreateWithoutUsersInput, GenderUncheckedCreateWithoutUsersInput>
    where?: GenderWhereInput
  }

  export type GenderUpdateToOneWithWhereWithoutUsersInput = {
    where?: GenderWhereInput
    data: XOR<GenderUpdateWithoutUsersInput, GenderUncheckedUpdateWithoutUsersInput>
  }

  export type GenderUpdateWithoutUsersInput = {
    genderEn?: StringFieldUpdateOperationsInput | string
    genderAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderUncheckedUpdateWithoutUsersInput = {
    genderEn?: StringFieldUpdateOperationsInput | string
    genderAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaritalStatusUpsertWithoutUsersInput = {
    update: XOR<MaritalStatusUpdateWithoutUsersInput, MaritalStatusUncheckedUpdateWithoutUsersInput>
    create: XOR<MaritalStatusCreateWithoutUsersInput, MaritalStatusUncheckedCreateWithoutUsersInput>
    where?: MaritalStatusWhereInput
  }

  export type MaritalStatusUpdateToOneWithWhereWithoutUsersInput = {
    where?: MaritalStatusWhereInput
    data: XOR<MaritalStatusUpdateWithoutUsersInput, MaritalStatusUncheckedUpdateWithoutUsersInput>
  }

  export type MaritalStatusUpdateWithoutUsersInput = {
    statusEn?: StringFieldUpdateOperationsInput | string
    statusAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaritalStatusUncheckedUpdateWithoutUsersInput = {
    statusEn?: StringFieldUpdateOperationsInput | string
    statusAr?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthWhereUniqueInput
    update: XOR<AuthUpdateWithoutUserInput, AuthUncheckedUpdateWithoutUserInput>
    create: XOR<AuthCreateWithoutUserInput, AuthUncheckedCreateWithoutUserInput>
  }

  export type AuthUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthWhereUniqueInput
    data: XOR<AuthUpdateWithoutUserInput, AuthUncheckedUpdateWithoutUserInput>
  }

  export type AuthUpdateManyWithWhereWithoutUserInput = {
    where: AuthScalarWhereInput
    data: XOR<AuthUpdateManyMutationInput, AuthUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthScalarWhereInput = {
    AND?: AuthScalarWhereInput | AuthScalarWhereInput[]
    OR?: AuthScalarWhereInput[]
    NOT?: AuthScalarWhereInput | AuthScalarWhereInput[]
    id?: StringFilter<"Auth"> | string
    employeeCode?: StringFilter<"Auth"> | string
    userId?: StringNullableFilter<"Auth"> | string | null
    token?: StringNullableFilter<"Auth"> | string | null
    refreshToken?: StringNullableFilter<"Auth"> | string | null
    tokenExpiry?: DateTimeNullableFilter<"Auth"> | Date | string | null
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutOrganizationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyPositionInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutPositionInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPositionInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPositionInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutDepartmentInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyDivisionInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutDivisionInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDivisionInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDivisionInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyUnitInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutUnitInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUnitInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUnitInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyGradeInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutGradeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGradeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGradeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyLocationInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutLocationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLocationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLocationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyContractTypeInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutContractTypeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContractTypeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutContractTypeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyNationalityInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutNationalityInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNationalityInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutNationalityInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyGenderInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutGenderInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGenderInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGenderInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyMaritalStatusInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutMaritalStatusInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMaritalStatusInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMaritalStatusInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyEntityInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutEntityInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEntityInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutEntityInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyBudgetInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutBudgetInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBudgetInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBudgetInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyStatusInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    managerId?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type UserUpdateWithoutStatusInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    managedBy?: UserUpdateOneWithoutManagesNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStatusInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyManagedByInput = {
    id?: string
    employeeCode: string
    employeeCategory?: string | null
    registerName?: string | null
    statusId?: string | null
    expectedStartDate?: Date | string | null
    actualStartDate?: Date | string | null
    probationEndDate?: Date | string | null
    terminationDate?: Date | string | null
    terminationReason?: string | null
    resignationType?: string | null
    dateOfBirth?: Date | string | null
    idName?: string | null
    idNameAr?: string | null
    firstName?: string | null
    lastName?: string | null
    firstNameAr?: string | null
    lastNameAr?: string | null
    organizationId?: string | null
    entityId?: string | null
    budgetId?: string | null
    departmentId?: string | null
    divisionId?: string | null
    unitId?: string | null
    positionId?: string | null
    gradeId?: string | null
    locationId?: string | null
    directManagerCode?: string | null
    directManagerName?: string | null
    contractTypeId?: string | null
    nationalityId?: string | null
    genderId?: string | null
    maritalStatusId?: string | null
    email: string
    password?: string | null
    personalPhoneNumber1?: string | null
    corporatePhoneNumber?: string | null
    idNumber?: string | null
    idPlaceOfIssue?: string | null
    idAddress?: string | null
    idAddressAr?: string | null
    idZoneOfResidence?: string | null
    placeOfBirth?: string | null
    companyId?: string | null
    cleared?: string | null
    disabilityType?: string | null
    sourceId?: number | null
    insertionDate?: Date | string | null
    updateDate?: Date | string | null
  }

  export type AuthCreateManyUserInput = {
    id?: string
    employeeCode: string
    token?: string | null
    refreshToken?: string | null
    tokenExpiry?: Date | string | null
  }

  export type UserUpdateWithoutManagedByInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StatusUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
    budget?: BudgetUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    division?: DivisionUpdateOneWithoutUsersNestedInput
    unit?: UnitUpdateOneWithoutUsersNestedInput
    position?: PositionUpdateOneWithoutUsersNestedInput
    grade?: GradeUpdateOneWithoutUsersNestedInput
    location?: LocationUpdateOneWithoutUsersNestedInput
    manages?: UserUpdateManyWithoutManagedByNestedInput
    contractType?: ContractTypeUpdateOneWithoutUsersNestedInput
    nationality?: NationalityUpdateOneWithoutUsersNestedInput
    gender?: GenderUpdateOneWithoutUsersNestedInput
    maritalStatus?: MaritalStatusUpdateOneWithoutUsersNestedInput
    auth?: AuthUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedByInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manages?: UserUncheckedUpdateManyWithoutManagedByNestedInput
    auth?: AuthUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutManagedByInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    employeeCategory?: NullableStringFieldUpdateOperationsInput | string | null
    registerName?: NullableStringFieldUpdateOperationsInput | string | null
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    expectedStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    probationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    resignationType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idName?: NullableStringFieldUpdateOperationsInput | string | null
    idNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    firstNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    lastNameAr?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    budgetId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    divisionId?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableStringFieldUpdateOperationsInput | string | null
    positionId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerCode?: NullableStringFieldUpdateOperationsInput | string | null
    directManagerName?: NullableStringFieldUpdateOperationsInput | string | null
    contractTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalityId?: NullableStringFieldUpdateOperationsInput | string | null
    genderId?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatusId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    personalPhoneNumber1?: NullableStringFieldUpdateOperationsInput | string | null
    corporatePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idPlaceOfIssue?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    idAddressAr?: NullableStringFieldUpdateOperationsInput | string | null
    idZoneOfResidence?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    cleared?: NullableStringFieldUpdateOperationsInput | string | null
    disabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableIntFieldUpdateOperationsInput | number | null
    insertionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthUpdateWithoutUserInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthUncheckedUpdateWithoutUserInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthUncheckedUpdateManyWithoutUserInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}